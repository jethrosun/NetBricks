<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1062" fill="url(#background)"/><text id="title" x="600.00" y="24.00">Flame Graph</text><text id="details" x="10.00" y="1045.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1045.00"> </text><g id="frames"><g><title>__libc_start_main (22 samples, 0.02%)</title><rect x="10" y="965" width="0" height="15" fill="rgb(205,192,32)"/><text x="13.00" y="975.50"></text></g><g><title>main (22 samples, 0.02%)</title><rect x="10" y="949" width="0" height="15" fill="rgb(228,122,22)"/><text x="13.00" y="959.50"></text></g><g><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hc87de8565012a906 (22 samples, 0.02%)</title><rect x="10" y="933" width="0" height="15" fill="rgb(217,120,40)"/><text x="13.00" y="943.50"></text></g><g><title>pvn_tls::main (22 samples, 0.02%)</title><rect x="10" y="917" width="0" height="15" fill="rgb(245,133,20)"/><text x="13.00" y="927.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (22 samples, 0.02%)</title><rect x="10" y="901" width="0" height="15" fill="rgb(242,27,12)"/><text x="13.00" y="911.50"></text></g><g><title>e2d2::interface::port::phy_port::PmdPort::new_dpdk_port (22 samples, 0.02%)</title><rect x="10" y="885" width="0" height="15" fill="rgb(251,204,14)"/><text x="13.00" y="895.50"></text></g><g><title>init_pmd_port (22 samples, 0.02%)</title><rect x="10" y="869" width="0" height="15" fill="rgb(246,89,25)"/><text x="13.00" y="879.50"></text></g><g><title>rte_eth_dev_configure (22 samples, 0.02%)</title><rect x="10" y="853" width="0" height="15" fill="rgb(252,54,25)"/><text x="13.00" y="863.50"></text></g><g><title>i40e_dev_configure (22 samples, 0.02%)</title><rect x="10" y="837" width="0" height="15" fill="rgb(246,223,9)"/><text x="13.00" y="847.50"></text></g><g><title>i40e_dev_sync_phy_type (22 samples, 0.02%)</title><rect x="10" y="821" width="0" height="15" fill="rgb(227,213,0)"/><text x="13.00" y="831.50"></text></g><g><title>i40e_aq_get_phy_capabilities (22 samples, 0.02%)</title><rect x="10" y="805" width="0" height="15" fill="rgb(222,182,18)"/><text x="13.00" y="815.50"></text></g><g><title>i40e_aq_get_link_info (22 samples, 0.02%)</title><rect x="10" y="789" width="0" height="15" fill="rgb(212,152,42)"/><text x="13.00" y="799.50"></text></g><g><title>i40e_asq_send_command (22 samples, 0.02%)</title><rect x="10" y="773" width="0" height="15" fill="rgb(215,148,31)"/><text x="13.00" y="783.50"></text></g><g><title>rte_delay_us_block (22 samples, 0.02%)</title><rect x="10" y="757" width="0" height="15" fill="rgb(223,170,26)"/><text x="13.00" y="767.50"></text></g><g><title>rte_pause (14 samples, 0.01%)</title><rect x="10" y="741" width="0" height="15" fill="rgb(232,18,41)"/><text x="13.00" y="751.50"></text></g><g><title>_mm_pause (14 samples, 0.01%)</title><rect x="10" y="725" width="0" height="15" fill="rgb(205,129,15)"/><text x="13.00" y="735.50"></text></g><g><title>main (36 samples, 0.04%)</title><rect x="10" y="965" width="0" height="15" fill="rgb(228,104,32)"/><text x="13.00" y="975.50"></text></g><g><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hc87de8565012a906 (36 samples, 0.04%)</title><rect x="10" y="949" width="0" height="15" fill="rgb(254,100,49)"/><text x="13.00" y="959.50"></text></g><g><title>pvn_tls::main (36 samples, 0.04%)</title><rect x="10" y="933" width="0" height="15" fill="rgb(230,89,0)"/><text x="13.00" y="943.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (36 samples, 0.04%)</title><rect x="10" y="917" width="0" height="15" fill="rgb(228,14,52)"/><text x="13.00" y="927.50"></text></g><g><title>e2d2::interface::port::phy_port::PmdPort::new_dpdk_port (36 samples, 0.04%)</title><rect x="10" y="901" width="0" height="15" fill="rgb(245,15,18)"/><text x="13.00" y="911.50"></text></g><g><title>init_pmd_port (36 samples, 0.04%)</title><rect x="10" y="885" width="0" height="15" fill="rgb(216,218,12)"/><text x="13.00" y="895.50"></text></g><g><title>rte_eth_dev_start (36 samples, 0.04%)</title><rect x="10" y="869" width="0" height="15" fill="rgb(228,60,11)"/><text x="13.00" y="879.50"></text></g><g><title>i40e_dev_start (36 samples, 0.04%)</title><rect x="10" y="853" width="0" height="15" fill="rgb(248,174,32)"/><text x="13.00" y="863.50"></text></g><g><title>i40e_apply_link_speed (36 samples, 0.04%)</title><rect x="10" y="837" width="0" height="15" fill="rgb(205,222,0)"/><text x="13.00" y="847.50"></text></g><g><title>i40e_phy_conf_link (36 samples, 0.04%)</title><rect x="10" y="821" width="0" height="15" fill="rgb(207,158,31)"/><text x="13.00" y="831.50"></text></g><g><title>i40e_aq_get_phy_capabilities (36 samples, 0.04%)</title><rect x="10" y="805" width="0" height="15" fill="rgb(240,72,33)"/><text x="13.00" y="815.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.04%)</title><rect x="10" y="789" width="0" height="15" fill="rgb(236,7,27)"/><text x="13.00" y="799.50"></text></g><g><title>rte_delay_us_block (36 samples, 0.04%)</title><rect x="10" y="773" width="0" height="15" fill="rgb(219,206,52)"/><text x="13.00" y="783.50"></text></g><g><title>rte_pause (32 samples, 0.03%)</title><rect x="10" y="757" width="0" height="15" fill="rgb(223,197,0)"/><text x="13.00" y="767.50"></text></g><g><title>_mm_pause (32 samples, 0.03%)</title><rect x="10" y="741" width="0" height="15" fill="rgb(249,197,32)"/><text x="13.00" y="751.50"></text></g><g><title>_cond_resched (18 samples, 0.02%)</title><rect x="11" y="645" width="0" height="15" fill="rgb(251,145,6)"/><text x="14.00" y="655.50"></text></g><g><title>_cond_resched (12 samples, 0.01%)</title><rect x="12" y="629" width="0" height="15" fill="rgb(225,33,54)"/><text x="15.00" y="639.50"></text></g><g><title>clear_huge_page (75 samples, 0.08%)</title><rect x="11" y="645" width="1" height="15" fill="rgb(212,146,30)"/><text x="14.00" y="655.50"></text></g><g><title>rte_eal_memory_init (2,123 samples, 2.15%)</title><rect x="10" y="885" width="26" height="15" fill="rgb(214,104,29)"/><text x="13.00" y="895.50">r..</text></g><g><title>rte_eal_hugepage_init (2,123 samples, 2.15%)</title><rect x="10" y="869" width="26" height="15" fill="rgb(232,137,8)"/><text x="13.00" y="879.50">r..</text></g><g><title>map_all_hugepages (2,123 samples, 2.15%)</title><rect x="10" y="853" width="26" height="15" fill="rgb(238,71,52)"/><text x="13.00" y="863.50">m..</text></g><g><title>__GI___mmap64 (2,123 samples, 2.15%)</title><rect x="10" y="837" width="26" height="15" fill="rgb(207,64,4)"/><text x="13.00" y="847.50">_..</text></g><g><title>entry_SYSCALL_64_after_hwframe (2,123 samples, 2.15%)</title><rect x="10" y="821" width="26" height="15" fill="rgb(251,162,1)"/><text x="13.00" y="831.50">e..</text></g><g><title>do_syscall_64 (2,123 samples, 2.15%)</title><rect x="10" y="805" width="26" height="15" fill="rgb(225,188,30)"/><text x="13.00" y="815.50">d..</text></g><g><title>sys_mmap (2,123 samples, 2.15%)</title><rect x="10" y="789" width="26" height="15" fill="rgb(222,53,24)"/><text x="13.00" y="799.50">s..</text></g><g><title>sys_mmap_pgoff (2,123 samples, 2.15%)</title><rect x="10" y="773" width="26" height="15" fill="rgb(252,173,47)"/><text x="13.00" y="783.50">s..</text></g><g><title>vm_mmap_pgoff (2,123 samples, 2.15%)</title><rect x="10" y="757" width="26" height="15" fill="rgb(240,181,31)"/><text x="13.00" y="767.50">v..</text></g><g><title>__mm_populate (2,123 samples, 2.15%)</title><rect x="10" y="741" width="26" height="15" fill="rgb(232,72,33)"/><text x="13.00" y="751.50">_..</text></g><g><title>populate_vma_page_range (2,123 samples, 2.15%)</title><rect x="10" y="725" width="26" height="15" fill="rgb(216,196,8)"/><text x="13.00" y="735.50">p..</text></g><g><title>__get_user_pages (2,123 samples, 2.15%)</title><rect x="10" y="709" width="26" height="15" fill="rgb(225,45,51)"/><text x="13.00" y="719.50">_..</text></g><g><title>follow_hugetlb_page (2,123 samples, 2.15%)</title><rect x="10" y="693" width="26" height="15" fill="rgb(252,24,37)"/><text x="13.00" y="703.50">f..</text></g><g><title>hugetlb_fault (2,103 samples, 2.13%)</title><rect x="11" y="677" width="25" height="15" fill="rgb(252,198,9)"/><text x="14.00" y="687.50">h..</text></g><g><title>hugetlb_no_page (2,103 samples, 2.13%)</title><rect x="11" y="661" width="25" height="15" fill="rgb(225,47,17)"/><text x="14.00" y="671.50">h..</text></g><g><title>clear_page_erms (2,010 samples, 2.04%)</title><rect x="12" y="645" width="24" height="15" fill="rgb(232,228,43)"/><text x="15.00" y="655.50">c..</text></g><g><title>[unknown] (2,200 samples, 2.23%)</title><rect x="10" y="981" width="26" height="15" fill="rgb(235,172,52)"/><text x="13.00" y="991.50">[..</text></g><g><title>pvn_tls::main (2,124 samples, 2.15%)</title><rect x="10" y="965" width="26" height="15" fill="rgb(222,104,47)"/><text x="13.00" y="975.50">p..</text></g><g><title>e2d2::scheduler::context::initialize_system (2,124 samples, 2.15%)</title><rect x="10" y="949" width="26" height="15" fill="rgb(247,23,40)"/><text x="13.00" y="959.50">e..</text></g><g><title>init_system_whitelisted (2,124 samples, 2.15%)</title><rect x="10" y="933" width="26" height="15" fill="rgb(205,201,0)"/><text x="13.00" y="943.50">i..</text></g><g><title>init_eal (2,124 samples, 2.15%)</title><rect x="10" y="917" width="26" height="15" fill="rgb(217,174,54)"/><text x="13.00" y="927.50">i..</text></g><g><title>rte_eal_init (2,124 samples, 2.15%)</title><rect x="10" y="901" width="26" height="15" fill="rgb(235,185,23)"/><text x="13.00" y="911.50">r..</text></g><g><title>native_write_msr (12 samples, 0.01%)</title><rect x="36" y="853" width="0" height="15" fill="rgb(236,174,33)"/><text x="39.00" y="863.50"></text></g><g><title>schedule_tail (20 samples, 0.02%)</title><rect x="36" y="949" width="0" height="15" fill="rgb(234,201,52)"/><text x="39.00" y="959.50"></text></g><g><title>finish_task_switch (20 samples, 0.02%)</title><rect x="36" y="933" width="0" height="15" fill="rgb(228,209,22)"/><text x="39.00" y="943.50"></text></g><g><title>__perf_event_task_sched_in (20 samples, 0.02%)</title><rect x="36" y="917" width="0" height="15" fill="rgb(205,100,1)"/><text x="39.00" y="927.50"></text></g><g><title>x86_pmu_enable (20 samples, 0.02%)</title><rect x="36" y="901" width="0" height="15" fill="rgb(222,112,48)"/><text x="39.00" y="911.50"></text></g><g><title>intel_pmu_enable_all (20 samples, 0.02%)</title><rect x="36" y="885" width="0" height="15" fill="rgb(251,226,14)"/><text x="39.00" y="895.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (20 samples, 0.02%)</title><rect x="36" y="869" width="0" height="15" fill="rgb(232,15,20)"/><text x="39.00" y="879.50"></text></g><g><title>__GI___clone (21 samples, 0.02%)</title><rect x="36" y="981" width="0" height="15" fill="rgb(208,213,43)"/><text x="39.00" y="991.50"></text></g><g><title>ret_from_fork (21 samples, 0.02%)</title><rect x="36" y="965" width="0" height="15" fill="rgb(243,152,14)"/><text x="39.00" y="975.50"></text></g><g><title>__GI___nanosleep (16 samples, 0.02%)</title><rect x="36" y="901" width="0" height="15" fill="rgb(234,161,4)"/><text x="39.00" y="911.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.01%)</title><rect x="36" y="885" width="0" height="15" fill="rgb(252,153,31)"/><text x="39.00" y="895.50"></text></g><g><title>do_syscall_64 (14 samples, 0.01%)</title><rect x="36" y="869" width="0" height="15" fill="rgb(213,199,7)"/><text x="39.00" y="879.50"></text></g><g><title>sys_nanosleep (11 samples, 0.01%)</title><rect x="36" y="853" width="0" height="15" fill="rgb(211,106,23)"/><text x="39.00" y="863.50"></text></g><g><title>hrtimer_nanosleep (9 samples, 0.01%)</title><rect x="36" y="837" width="0" height="15" fill="rgb(207,162,0)"/><text x="39.00" y="847.50"></text></g><g><title>do_nanosleep (9 samples, 0.01%)</title><rect x="36" y="821" width="0" height="15" fill="rgb(209,143,32)"/><text x="39.00" y="831.50"></text></g><g><title>i40e_aq_get_link_info (20 samples, 0.02%)</title><rect x="37" y="709" width="0" height="15" fill="rgb(236,119,7)"/><text x="40.00" y="719.50"></text></g><g><title>i40e_asq_send_command (20 samples, 0.02%)</title><rect x="37" y="693" width="0" height="15" fill="rgb(242,94,27)"/><text x="40.00" y="703.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.02%)</title><rect x="37" y="677" width="0" height="15" fill="rgb(243,70,18)"/><text x="40.00" y="687.50"></text></g><g><title>rte_pause (17 samples, 0.02%)</title><rect x="37" y="661" width="0" height="15" fill="rgb(213,42,49)"/><text x="40.00" y="671.50"></text></g><g><title>_mm_pause (17 samples, 0.02%)</title><rect x="37" y="645" width="0" height="15" fill="rgb(229,179,42)"/><text x="40.00" y="655.50"></text></g><g><title>i40e_dev_sync_phy_type (56 samples, 0.06%)</title><rect x="37" y="741" width="0" height="15" fill="rgb(247,94,29)"/><text x="40.00" y="751.50"></text></g><g><title>i40e_aq_get_phy_capabilities (56 samples, 0.06%)</title><rect x="37" y="725" width="0" height="15" fill="rgb(228,121,36)"/><text x="40.00" y="735.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.04%)</title><rect x="37" y="709" width="0" height="15" fill="rgb(224,44,30)"/><text x="40.00" y="719.50"></text></g><g><title>rte_delay_us_block (35 samples, 0.04%)</title><rect x="37" y="693" width="0" height="15" fill="rgb(211,215,29)"/><text x="40.00" y="703.50"></text></g><g><title>rte_pause (31 samples, 0.03%)</title><rect x="37" y="677" width="0" height="15" fill="rgb(236,8,35)"/><text x="40.00" y="687.50"></text></g><g><title>_mm_pause (31 samples, 0.03%)</title><rect x="37" y="661" width="0" height="15" fill="rgb(253,17,46)"/><text x="40.00" y="671.50"></text></g><g><title>i40e_pf_reset (80 samples, 0.08%)</title><rect x="38" y="741" width="1" height="15" fill="rgb(254,176,34)"/><text x="41.00" y="751.50"></text></g><g><title>rte_delay_us_block (80 samples, 0.08%)</title><rect x="38" y="725" width="1" height="15" fill="rgb(246,189,48)"/><text x="41.00" y="735.50"></text></g><g><title>rte_pause (69 samples, 0.07%)</title><rect x="38" y="709" width="1" height="15" fill="rgb(240,138,53)"/><text x="41.00" y="719.50"></text></g><g><title>_mm_pause (69 samples, 0.07%)</title><rect x="38" y="693" width="1" height="15" fill="rgb(238,34,18)"/><text x="41.00" y="703.50"></text></g><g><title>i40e_update_flow_control (26 samples, 0.03%)</title><rect x="39" y="725" width="0" height="15" fill="rgb(209,4,7)"/><text x="42.00" y="735.50"></text></g><g><title>i40e_aq_get_link_info (26 samples, 0.03%)</title><rect x="39" y="709" width="0" height="15" fill="rgb(236,215,37)"/><text x="42.00" y="719.50"></text></g><g><title>i40e_asq_send_command (26 samples, 0.03%)</title><rect x="39" y="693" width="0" height="15" fill="rgb(223,79,20)"/><text x="42.00" y="703.50"></text></g><g><title>rte_delay_us_block (25 samples, 0.03%)</title><rect x="39" y="677" width="0" height="15" fill="rgb(243,116,14)"/><text x="42.00" y="687.50"></text></g><g><title>rte_pause (21 samples, 0.02%)</title><rect x="39" y="661" width="0" height="15" fill="rgb(245,223,22)"/><text x="42.00" y="671.50"></text></g><g><title>_mm_pause (21 samples, 0.02%)</title><rect x="39" y="645" width="0" height="15" fill="rgb(250,221,38)"/><text x="42.00" y="655.50"></text></g><g><title>i40e_pf_setup (36 samples, 0.04%)</title><rect x="39" y="741" width="0" height="15" fill="rgb(212,66,1)"/><text x="42.00" y="751.50"></text></g><g><title>i40e_aq_get_phy_capabilities (36 samples, 0.04%)</title><rect x="39" y="725" width="0" height="15" fill="rgb(250,74,13)"/><text x="42.00" y="735.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.04%)</title><rect x="39" y="709" width="0" height="15" fill="rgb(212,221,31)"/><text x="42.00" y="719.50"></text></g><g><title>rte_delay_us_block (35 samples, 0.04%)</title><rect x="39" y="693" width="0" height="15" fill="rgb(206,133,0)"/><text x="42.00" y="703.50"></text></g><g><title>rte_pause (27 samples, 0.03%)</title><rect x="39" y="677" width="0" height="15" fill="rgb(250,56,31)"/><text x="42.00" y="687.50"></text></g><g><title>_mm_pause (27 samples, 0.03%)</title><rect x="39" y="661" width="0" height="15" fill="rgb(250,49,26)"/><text x="42.00" y="671.50"></text></g><g><title>i40e_aq_get_link_info (20 samples, 0.02%)</title><rect x="39" y="709" width="1" height="15" fill="rgb(205,39,33)"/><text x="42.00" y="719.50"></text></g><g><title>i40e_asq_send_command (20 samples, 0.02%)</title><rect x="39" y="693" width="1" height="15" fill="rgb(215,214,39)"/><text x="42.00" y="703.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.02%)</title><rect x="39" y="677" width="1" height="15" fill="rgb(213,94,27)"/><text x="42.00" y="687.50"></text></g><g><title>rte_pause (19 samples, 0.02%)</title><rect x="39" y="661" width="1" height="15" fill="rgb(239,114,22)"/><text x="42.00" y="671.50"></text></g><g><title>_mm_pause (19 samples, 0.02%)</title><rect x="39" y="645" width="1" height="15" fill="rgb(232,150,21)"/><text x="42.00" y="655.50"></text></g><g><title>i40e_set_fc (92 samples, 0.09%)</title><rect x="39" y="741" width="1" height="15" fill="rgb(235,139,11)"/><text x="42.00" y="751.50"></text></g><g><title>i40e_update_link_info (56 samples, 0.06%)</title><rect x="39" y="725" width="1" height="15" fill="rgb(242,33,53)"/><text x="42.00" y="735.50"></text></g><g><title>i40e_aq_get_phy_capabilities (36 samples, 0.04%)</title><rect x="40" y="709" width="0" height="15" fill="rgb(231,117,6)"/><text x="43.00" y="719.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.04%)</title><rect x="40" y="693" width="0" height="15" fill="rgb(247,194,6)"/><text x="43.00" y="703.50"></text></g><g><title>rte_delay_us_block (36 samples, 0.04%)</title><rect x="40" y="677" width="0" height="15" fill="rgb(235,131,14)"/><text x="43.00" y="687.50"></text></g><g><title>rte_pause (34 samples, 0.03%)</title><rect x="40" y="661" width="0" height="15" fill="rgb(208,179,39)"/><text x="43.00" y="671.50"></text></g><g><title>_mm_pause (34 samples, 0.03%)</title><rect x="40" y="645" width="0" height="15" fill="rgb(222,159,8)"/><text x="43.00" y="655.50"></text></g><g><title>attach_pmd_device (311 samples, 0.32%)</title><rect x="36" y="869" width="4" height="15" fill="rgb(208,25,17)"/><text x="39.00" y="879.50"></text></g><g><title>rte_eth_dev_attach (311 samples, 0.32%)</title><rect x="36" y="853" width="4" height="15" fill="rgb(237,3,31)"/><text x="39.00" y="863.50"></text></g><g><title>rte_eal_hotplug_add (311 samples, 0.32%)</title><rect x="36" y="837" width="4" height="15" fill="rgb(206,21,44)"/><text x="39.00" y="847.50"></text></g><g><title>pci_probe_all_drivers (311 samples, 0.32%)</title><rect x="36" y="821" width="4" height="15" fill="rgb(212,89,12)"/><text x="39.00" y="831.50"></text></g><g><title>rte_pci_probe_one_driver (311 samples, 0.32%)</title><rect x="36" y="805" width="4" height="15" fill="rgb(248,73,44)"/><text x="39.00" y="815.50"></text></g><g><title>eth_i40e_pci_probe (311 samples, 0.32%)</title><rect x="36" y="789" width="4" height="15" fill="rgb(219,161,24)"/><text x="39.00" y="799.50"></text></g><g><title>rte_eth_dev_pci_generic_probe (311 samples, 0.32%)</title><rect x="36" y="773" width="4" height="15" fill="rgb(250,188,24)"/><text x="39.00" y="783.50"></text></g><g><title>eth_i40e_dev_init (311 samples, 0.32%)</title><rect x="36" y="757" width="4" height="15" fill="rgb(231,0,8)"/><text x="39.00" y="767.50"></text></g><g><title>rte_eth_dev_configure (44 samples, 0.04%)</title><rect x="40" y="853" width="1" height="15" fill="rgb(217,95,2)"/><text x="43.00" y="863.50"></text></g><g><title>i40e_dev_configure (44 samples, 0.04%)</title><rect x="40" y="837" width="1" height="15" fill="rgb(228,57,8)"/><text x="43.00" y="847.50"></text></g><g><title>i40e_dev_sync_phy_type (36 samples, 0.04%)</title><rect x="40" y="821" width="1" height="15" fill="rgb(229,56,31)"/><text x="43.00" y="831.50"></text></g><g><title>i40e_aq_get_phy_capabilities (36 samples, 0.04%)</title><rect x="40" y="805" width="1" height="15" fill="rgb(242,148,48)"/><text x="43.00" y="815.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.04%)</title><rect x="40" y="789" width="1" height="15" fill="rgb(232,21,29)"/><text x="43.00" y="799.50"></text></g><g><title>rte_delay_us_block (36 samples, 0.04%)</title><rect x="40" y="773" width="1" height="15" fill="rgb(242,210,6)"/><text x="43.00" y="783.50"></text></g><g><title>rte_pause (32 samples, 0.03%)</title><rect x="40" y="757" width="1" height="15" fill="rgb(247,45,6)"/><text x="43.00" y="767.50"></text></g><g><title>_mm_pause (32 samples, 0.03%)</title><rect x="40" y="741" width="1" height="15" fill="rgb(206,108,38)"/><text x="43.00" y="751.50"></text></g><g><title>i40e_dev_link_update (20 samples, 0.02%)</title><rect x="41" y="837" width="0" height="15" fill="rgb(234,38,20)"/><text x="44.00" y="847.50"></text></g><g><title>i40e_aq_get_link_info (20 samples, 0.02%)</title><rect x="41" y="821" width="0" height="15" fill="rgb(229,22,38)"/><text x="44.00" y="831.50"></text></g><g><title>i40e_asq_send_command (20 samples, 0.02%)</title><rect x="41" y="805" width="0" height="15" fill="rgb(208,40,42)"/><text x="44.00" y="815.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.02%)</title><rect x="41" y="789" width="0" height="15" fill="rgb(244,128,12)"/><text x="44.00" y="799.50"></text></g><g><title>rte_pause (19 samples, 0.02%)</title><rect x="41" y="773" width="0" height="15" fill="rgb(240,151,47)"/><text x="44.00" y="783.50"></text></g><g><title>_mm_pause (19 samples, 0.02%)</title><rect x="41" y="757" width="0" height="15" fill="rgb(207,186,52)"/><text x="44.00" y="767.50"></text></g><g><title>i40e_dev_link_update (20 samples, 0.02%)</title><rect x="41" y="821" width="0" height="15" fill="rgb(206,1,7)"/><text x="44.00" y="831.50"></text></g><g><title>i40e_aq_get_link_info (20 samples, 0.02%)</title><rect x="41" y="805" width="0" height="15" fill="rgb(253,119,45)"/><text x="44.00" y="815.50"></text></g><g><title>i40e_asq_send_command (20 samples, 0.02%)</title><rect x="41" y="789" width="0" height="15" fill="rgb(245,47,17)"/><text x="44.00" y="799.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.02%)</title><rect x="41" y="773" width="0" height="15" fill="rgb(238,184,34)"/><text x="44.00" y="783.50"></text></g><g><title>rte_pause (19 samples, 0.02%)</title><rect x="41" y="757" width="0" height="15" fill="rgb(221,127,6)"/><text x="44.00" y="767.50"></text></g><g><title>_mm_pause (19 samples, 0.02%)</title><rect x="41" y="741" width="0" height="15" fill="rgb(250,35,54)"/><text x="44.00" y="751.50"></text></g><g><title>i40e_dev_switch_rx_queues (16 samples, 0.02%)</title><rect x="41" y="805" width="0" height="15" fill="rgb(244,111,22)"/><text x="44.00" y="815.50"></text></g><g><title>i40e_dev_rx_queue_start (16 samples, 0.02%)</title><rect x="41" y="789" width="0" height="15" fill="rgb(212,186,44)"/><text x="44.00" y="799.50"></text></g><g><title>i40e_switch_rx_queue (16 samples, 0.02%)</title><rect x="41" y="773" width="0" height="15" fill="rgb(219,47,17)"/><text x="44.00" y="783.50"></text></g><g><title>rte_delay_us_block (16 samples, 0.02%)</title><rect x="41" y="757" width="0" height="15" fill="rgb(246,79,49)"/><text x="44.00" y="767.50"></text></g><g><title>rte_pause (14 samples, 0.01%)</title><rect x="41" y="741" width="0" height="15" fill="rgb(211,172,1)"/><text x="44.00" y="751.50"></text></g><g><title>_mm_pause (14 samples, 0.01%)</title><rect x="41" y="725" width="0" height="15" fill="rgb(240,71,0)"/><text x="44.00" y="735.50"></text></g><g><title>i40e_dev_start (60 samples, 0.06%)</title><rect x="41" y="837" width="1" height="15" fill="rgb(243,50,24)"/><text x="44.00" y="847.50"></text></g><g><title>i40e_dev_switch_queues (32 samples, 0.03%)</title><rect x="41" y="821" width="1" height="15" fill="rgb(234,194,27)"/><text x="44.00" y="831.50"></text></g><g><title>i40e_dev_switch_tx_queues (16 samples, 0.02%)</title><rect x="41" y="805" width="1" height="15" fill="rgb(205,75,13)"/><text x="44.00" y="815.50"></text></g><g><title>i40e_dev_tx_queue_start (16 samples, 0.02%)</title><rect x="41" y="789" width="1" height="15" fill="rgb(249,9,6)"/><text x="44.00" y="799.50"></text></g><g><title>i40e_switch_tx_queue (16 samples, 0.02%)</title><rect x="41" y="773" width="1" height="15" fill="rgb(249,100,28)"/><text x="44.00" y="783.50"></text></g><g><title>rte_delay_us_block (16 samples, 0.02%)</title><rect x="41" y="757" width="1" height="15" fill="rgb(214,29,9)"/><text x="44.00" y="767.50"></text></g><g><title>rte_pause (11 samples, 0.01%)</title><rect x="42" y="741" width="0" height="15" fill="rgb(212,219,15)"/><text x="45.00" y="751.50"></text></g><g><title>_mm_pause (11 samples, 0.01%)</title><rect x="42" y="725" width="0" height="15" fill="rgb(227,131,34)"/><text x="45.00" y="735.50"></text></g><g><title>rte_eth_dev_start (82 samples, 0.08%)</title><rect x="41" y="853" width="1" height="15" fill="rgb(248,196,53)"/><text x="44.00" y="863.50"></text></g><g><title>e2d2::interface::port::phy_port::PmdPort::new_dpdk_port (439 samples, 0.45%)</title><rect x="36" y="885" width="6" height="15" fill="rgb(235,106,11)"/><text x="39.00" y="895.50"></text></g><g><title>init_pmd_port (128 samples, 0.13%)</title><rect x="40" y="869" width="2" height="15" fill="rgb(211,26,8)"/><text x="43.00" y="879.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (440 samples, 0.45%)</title><rect x="36" y="901" width="6" height="15" fill="rgb(254,80,51)"/><text x="39.00" y="911.50"></text></g><g><title>_start (468 samples, 0.47%)</title><rect x="36" y="981" width="6" height="15" fill="rgb(230,147,18)"/><text x="39.00" y="991.50"></text></g><g><title>__libc_start_main (468 samples, 0.47%)</title><rect x="36" y="965" width="6" height="15" fill="rgb(225,106,40)"/><text x="39.00" y="975.50"></text></g><g><title>main (467 samples, 0.47%)</title><rect x="36" y="949" width="6" height="15" fill="rgb(220,143,22)"/><text x="39.00" y="959.50"></text></g><g><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hc87de8565012a906 (467 samples, 0.47%)</title><rect x="36" y="933" width="6" height="15" fill="rgb(234,189,7)"/><text x="39.00" y="943.50"></text></g><g><title>pvn_tls::main (467 samples, 0.47%)</title><rect x="36" y="917" width="6" height="15" fill="rgb(251,185,39)"/><text x="39.00" y="927.50"></text></g><g><title>pvn-tls (2,693 samples, 2.73%)</title><rect x="10" y="997" width="32" height="15" fill="rgb(233,88,10)"/><text x="13.00" y="1007.50">pv..</text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (302 samples, 0.31%)</title><rect x="42" y="981" width="3" height="15" fill="rgb(227,74,47)"/><text x="45.00" y="991.50"></text></g><g><title>[libzcsi.so] (285 samples, 0.29%)</title><rect x="45" y="981" width="4" height="15" fill="rgb(235,97,46)"/><text x="48.00" y="991.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (285 samples, 0.29%)</title><rect x="45" y="965" width="4" height="15" fill="rgb(238,225,22)"/><text x="48.00" y="975.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (138 samples, 0.14%)</title><rect x="47" y="949" width="2" height="15" fill="rgb(240,44,52)"/><text x="50.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (138 samples, 0.14%)</title><rect x="47" y="933" width="2" height="15" fill="rgb(220,219,3)"/><text x="50.00" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (455 samples, 0.46%)</title><rect x="49" y="965" width="5" height="15" fill="rgb(245,217,2)"/><text x="52.00" y="975.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (302 samples, 0.31%)</title><rect x="66" y="853" width="4" height="15" fill="rgb(232,143,19)"/><text x="69.00" y="863.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (302 samples, 0.31%)</title><rect x="66" y="837" width="4" height="15" fill="rgb(252,2,52)"/><text x="69.00" y="847.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (302 samples, 0.31%)</title><rect x="66" y="821" width="4" height="15" fill="rgb(231,65,7)"/><text x="69.00" y="831.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (1,575 samples, 1.60%)</title><rect x="54" y="965" width="19" height="15" fill="rgb(243,194,46)"/><text x="57.00" y="975.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (603 samples, 0.61%)</title><rect x="66" y="949" width="7" height="15" fill="rgb(223,119,40)"/><text x="69.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (603 samples, 0.61%)</title><rect x="66" y="933" width="7" height="15" fill="rgb(254,135,45)"/><text x="69.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (603 samples, 0.61%)</title><rect x="66" y="917" width="7" height="15" fill="rgb(254,156,13)"/><text x="69.00" y="927.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (603 samples, 0.61%)</title><rect x="66" y="901" width="7" height="15" fill="rgb(212,63,17)"/><text x="69.00" y="911.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (603 samples, 0.61%)</title><rect x="66" y="885" width="7" height="15" fill="rgb(249,81,45)"/><text x="69.00" y="895.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (603 samples, 0.61%)</title><rect x="66" y="869" width="7" height="15" fill="rgb(236,32,21)"/><text x="69.00" y="879.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (301 samples, 0.31%)</title><rect x="70" y="853" width="3" height="15" fill="rgb(211,208,7)"/><text x="73.00" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (301 samples, 0.31%)</title><rect x="70" y="837" width="3" height="15" fill="rgb(249,86,48)"/><text x="73.00" y="847.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (3,541 samples, 3.59%)</title><rect x="73" y="965" width="43" height="15" fill="rgb(244,177,3)"/><text x="76.00" y="975.50">&lt;e2d..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (3,525 samples, 3.57%)</title><rect x="73" y="949" width="43" height="15" fill="rgb(241,178,40)"/><text x="76.00" y="959.50">&lt;e2d..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (3,525 samples, 3.57%)</title><rect x="73" y="933" width="43" height="15" fill="rgb(209,92,35)"/><text x="76.00" y="943.50">&lt;e2d..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (247 samples, 0.25%)</title><rect x="113" y="917" width="3" height="15" fill="rgb(240,148,20)"/><text x="116.00" y="927.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (247 samples, 0.25%)</title><rect x="113" y="901" width="3" height="15" fill="rgb(251,55,16)"/><text x="116.00" y="911.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (646 samples, 0.66%)</title><rect x="116" y="965" width="7" height="15" fill="rgb(215,105,7)"/><text x="119.00" y="975.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (326 samples, 0.33%)</title><rect x="119" y="949" width="4" height="15" fill="rgb(245,176,45)"/><text x="122.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (326 samples, 0.33%)</title><rect x="119" y="933" width="4" height="15" fill="rgb(217,144,50)"/><text x="122.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (2,237 samples, 2.27%)</title><rect x="123" y="965" width="27" height="15" fill="rgb(220,60,43)"/><text x="126.00" y="975.50">&lt;..</text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (35 samples, 0.04%)</title><rect x="150" y="949" width="0" height="15" fill="rgb(237,62,15)"/><text x="153.00" y="959.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (35 samples, 0.04%)</title><rect x="150" y="933" width="0" height="15" fill="rgb(239,160,40)"/><text x="153.00" y="943.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (35 samples, 0.04%)</title><rect x="150" y="917" width="0" height="15" fill="rgb(228,20,34)"/><text x="153.00" y="927.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (35 samples, 0.04%)</title><rect x="150" y="901" width="0" height="15" fill="rgb(246,179,0)"/><text x="153.00" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (35 samples, 0.04%)</title><rect x="150" y="885" width="0" height="15" fill="rgb(232,55,15)"/><text x="153.00" y="895.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (304 samples, 0.31%)</title><rect x="165" y="933" width="4" height="15" fill="rgb(233,154,28)"/><text x="168.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (290 samples, 0.29%)</title><rect x="169" y="933" width="3" height="15" fill="rgb(216,187,49)"/><text x="172.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (3,122 samples, 3.17%)</title><rect x="150" y="965" width="37" height="15" fill="rgb(207,223,32)"/><text x="153.00" y="975.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (1,856 samples, 1.88%)</title><rect x="165" y="949" width="22" height="15" fill="rgb(245,12,11)"/><text x="168.00" y="959.50">&lt;..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (1,262 samples, 1.28%)</title><rect x="172" y="933" width="15" height="15" fill="rgb(225,121,31)"/><text x="175.00" y="943.50"></text></g><g><title>__GI___pthread_mutex_lock (378 samples, 0.38%)</title><rect x="187" y="965" width="5" height="15" fill="rgb(245,76,3)"/><text x="190.00" y="975.50"></text></g><g><title>core::ptr::real_drop_in_place (320 samples, 0.32%)</title><rect x="195" y="885" width="4" height="15" fill="rgb(243,36,43)"/><text x="198.00" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (320 samples, 0.32%)</title><rect x="195" y="869" width="4" height="15" fill="rgb(244,182,35)"/><text x="198.00" y="879.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_unlock (320 samples, 0.32%)</title><rect x="195" y="853" width="4" height="15" fill="rgb(226,31,4)"/><text x="198.00" y="863.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (320 samples, 0.32%)</title><rect x="195" y="837" width="4" height="15" fill="rgb(226,159,46)"/><text x="198.00" y="847.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (890 samples, 0.90%)</title><rect x="192" y="965" width="11" height="15" fill="rgb(232,56,49)"/><text x="195.00" y="975.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (890 samples, 0.90%)</title><rect x="192" y="949" width="11" height="15" fill="rgb(221,179,11)"/><text x="195.00" y="959.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (890 samples, 0.90%)</title><rect x="192" y="933" width="11" height="15" fill="rgb(218,42,20)"/><text x="195.00" y="943.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (616 samples, 0.62%)</title><rect x="195" y="917" width="8" height="15" fill="rgb(235,130,49)"/><text x="198.00" y="927.50"></text></g><g><title>std::sync::mpsc::sync::Packet&lt;T&gt;::try_recv (616 samples, 0.62%)</title><rect x="195" y="901" width="8" height="15" fill="rgb(215,206,1)"/><text x="198.00" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (296 samples, 0.30%)</title><rect x="199" y="885" width="4" height="15" fill="rgb(220,122,15)"/><text x="202.00" y="895.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (296 samples, 0.30%)</title><rect x="199" y="869" width="4" height="15" fill="rgb(236,68,11)"/><text x="202.00" y="879.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (296 samples, 0.30%)</title><rect x="199" y="853" width="4" height="15" fill="rgb(216,175,16)"/><text x="202.00" y="863.50"></text></g><g><title>i40e_recv_pkts_vec (1,210 samples, 1.23%)</title><rect x="203" y="965" width="14" height="15" fill="rgb(250,95,24)"/><text x="206.00" y="975.50"></text></g><g><title>[unknown] (15,024 samples, 15.24%)</title><rect x="49" y="981" width="180" height="15" fill="rgb(239,40,23)"/><text x="52.00" y="991.50">[unknown]</text></g><g><title>recv_pkts (970 samples, 0.98%)</title><rect x="217" y="965" width="12" height="15" fill="rgb(214,199,11)"/><text x="220.00" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (571 samples, 0.58%)</title><rect x="265" y="773" width="7" height="15" fill="rgb(252,130,11)"/><text x="268.00" y="783.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (297 samples, 0.30%)</title><rect x="268" y="757" width="4" height="15" fill="rgb(215,115,4)"/><text x="271.00" y="767.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (297 samples, 0.30%)</title><rect x="268" y="741" width="4" height="15" fill="rgb(248,13,22)"/><text x="271.00" y="751.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (299 samples, 0.30%)</title><rect x="279" y="693" width="4" height="15" fill="rgb(213,145,39)"/><text x="282.00" y="703.50"></text></g><g><title>_$LT$e2d2..operators..receive_batch..ReceiveBatch$LT$T$GT$$u20$as$u20$e2d2..operators..act..Act$GT$::act::_$u7b$$u7b$closure$u7d$$u7d$::h04d16e535da9b6c3 (299 samples, 0.30%)</title><rect x="279" y="677" width="4" height="15" fill="rgb(253,201,13)"/><text x="282.00" y="687.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (296 samples, 0.30%)</title><rect x="283" y="677" width="4" height="15" fill="rgb(239,63,7)"/><text x="286.00" y="687.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (3,351 samples, 3.40%)</title><rect x="290" y="661" width="40" height="15" fill="rgb(242,218,8)"/><text x="293.00" y="671.50">e2d..</text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (3,351 samples, 3.40%)</title><rect x="290" y="645" width="40" height="15" fill="rgb(252,99,1)"/><text x="293.00" y="655.50">&lt;e2..</text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (3,351 samples, 3.40%)</title><rect x="290" y="629" width="40" height="15" fill="rgb(212,24,1)"/><text x="293.00" y="639.50">e2d..</text></g><g><title>recv_pkts (3,345 samples, 3.39%)</title><rect x="290" y="613" width="40" height="15" fill="rgb(205,190,49)"/><text x="293.00" y="623.50">rec..</text></g><g><title>rte_eth_rx_burst (3,028 samples, 3.07%)</title><rect x="294" y="597" width="36" height="15" fill="rgb(232,196,4)"/><text x="297.00" y="607.50">rte..</text></g><g><title>i40e_recv_pkts_vec (1,217 samples, 1.23%)</title><rect x="316" y="581" width="14" height="15" fill="rgb(247,108,32)"/><text x="319.00" y="591.50"></text></g><g><title>_recv_raw_pkts_vec (897 samples, 0.91%)</title><rect x="319" y="565" width="11" height="15" fill="rgb(234,102,9)"/><text x="322.00" y="575.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (4,886 samples, 4.96%)</title><rect x="272" y="773" width="58" height="15" fill="rgb(253,62,0)"/><text x="275.00" y="783.50">&lt;e2d2:..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (4,581 samples, 4.65%)</title><rect x="275" y="757" width="55" height="15" fill="rgb(205,152,10)"/><text x="278.00" y="767.50">&lt;e2d2..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (4,581 samples, 4.65%)</title><rect x="275" y="741" width="55" height="15" fill="rgb(252,68,20)"/><text x="278.00" y="751.50">&lt;e2d2..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (4,245 samples, 4.31%)</title><rect x="279" y="725" width="51" height="15" fill="rgb(216,51,18)"/><text x="282.00" y="735.50">&lt;e2d2..</text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (4,245 samples, 4.31%)</title><rect x="279" y="709" width="51" height="15" fill="rgb(234,198,53)"/><text x="282.00" y="719.50">&lt;e2d2..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (3,946 samples, 4.00%)</title><rect x="283" y="693" width="47" height="15" fill="rgb(229,177,32)"/><text x="286.00" y="703.50">e2d2..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (3,650 samples, 3.70%)</title><rect x="287" y="677" width="43" height="15" fill="rgb(212,120,19)"/><text x="290.00" y="687.50">e2d2..</text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (1,686 samples, 1.71%)</title><rect x="366" y="709" width="20" height="15" fill="rgb(230,123,24)"/><text x="369.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (1,368 samples, 1.39%)</title><rect x="370" y="693" width="16" height="15" fill="rgb(215,104,41)"/><text x="373.00" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (171 samples, 0.17%)</title><rect x="390" y="613" width="3" height="15" fill="rgb(223,3,39)"/><text x="393.00" y="623.50"></text></g><g><title>_$LT$e2d2..operators..receive_batch..ReceiveBatch$LT$T$GT$$u20$as$u20$e2d2..operators..act..Act$GT$::act::_$u7b$$u7b$closure$u7d$$u7d$::h8d1298e4bf1f28cf (171 samples, 0.17%)</title><rect x="390" y="597" width="3" height="15" fill="rgb(218,155,42)"/><text x="393.00" y="607.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (349 samples, 0.35%)</title><rect x="393" y="597" width="4" height="15" fill="rgb(245,60,10)"/><text x="396.00" y="607.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::free_packet_batch (13 samples, 0.01%)</title><rect x="397" y="581" width="0" height="15" fill="rgb(248,71,38)"/><text x="400.00" y="591.50"></text></g><g><title>core::cmp::min (111 samples, 0.11%)</title><rect x="398" y="549" width="1" height="15" fill="rgb(230,68,8)"/><text x="401.00" y="559.50"></text></g><g><title>core::cmp::Ord::min (111 samples, 0.11%)</title><rect x="398" y="533" width="1" height="15" fill="rgb(234,54,34)"/><text x="401.00" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::le (53 samples, 0.05%)</title><rect x="398" y="517" width="1" height="15" fill="rgb(205,3,35)"/><text x="401.00" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (96 samples, 0.10%)</title><rect x="399" y="549" width="1" height="15" fill="rgb(240,4,2)"/><text x="402.00" y="559.50"></text></g><g><title>&lt;e2d2::queues::mpsc_mbuf_queue::MpscConsumer as e2d2::interface::PacketRx&gt;::recv (256 samples, 0.26%)</title><rect x="397" y="581" width="3" height="15" fill="rgb(213,98,36)"/><text x="400.00" y="591.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue (256 samples, 0.26%)</title><rect x="397" y="565" width="3" height="15" fill="rgb(236,217,52)"/><text x="400.00" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (11 samples, 0.01%)</title><rect x="400" y="549" width="0" height="15" fill="rgb(208,14,14)"/><text x="403.00" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.01%)</title><rect x="400" y="533" width="0" height="15" fill="rgb(215,179,8)"/><text x="403.00" y="543.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::add_to_batch (131 samples, 0.13%)</title><rect x="400" y="581" width="2" height="15" fill="rgb(235,24,7)"/><text x="403.00" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (131 samples, 0.13%)</title><rect x="400" y="565" width="2" height="15" fill="rgb(224,191,10)"/><text x="403.00" y="575.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (1,311 samples, 1.33%)</title><rect x="389" y="645" width="16" height="15" fill="rgb(231,192,6)"/><text x="392.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (1,196 samples, 1.21%)</title><rect x="390" y="629" width="15" height="15" fill="rgb(221,26,40)"/><text x="393.00" y="639.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (1,025 samples, 1.04%)</title><rect x="393" y="613" width="12" height="15" fill="rgb(225,127,19)"/><text x="396.00" y="623.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (675 samples, 0.68%)</title><rect x="397" y="597" width="8" height="15" fill="rgb(229,5,42)"/><text x="400.00" y="607.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (244 samples, 0.25%)</title><rect x="402" y="581" width="3" height="15" fill="rgb(232,216,31)"/><text x="405.00" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (244 samples, 0.25%)</title><rect x="402" y="565" width="3" height="15" fill="rgb(233,46,46)"/><text x="405.00" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (140 samples, 0.14%)</title><rect x="403" y="549" width="2" height="15" fill="rgb(209,144,6)"/><text x="406.00" y="559.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2,085 samples, 2.11%)</title><rect x="387" y="677" width="25" height="15" fill="rgb(236,85,12)"/><text x="390.00" y="687.50">&lt;..</text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (2,085 samples, 2.11%)</title><rect x="387" y="661" width="25" height="15" fill="rgb(218,199,27)"/><text x="390.00" y="671.50">&lt;..</text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (617 samples, 0.63%)</title><rect x="405" y="645" width="7" height="15" fill="rgb(251,182,32)"/><text x="408.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (617 samples, 0.63%)</title><rect x="405" y="629" width="7" height="15" fill="rgb(220,165,53)"/><text x="408.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (617 samples, 0.63%)</title><rect x="405" y="613" width="7" height="15" fill="rgb(206,125,54)"/><text x="408.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (617 samples, 0.63%)</title><rect x="405" y="597" width="7" height="15" fill="rgb(250,80,12)"/><text x="408.00" y="607.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (6,668 samples, 6.76%)</title><rect x="334" y="725" width="80" height="15" fill="rgb(206,2,10)"/><text x="337.00" y="735.50">&lt;e2d2::op..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (2,314 samples, 2.35%)</title><rect x="386" y="709" width="28" height="15" fill="rgb(223,75,7)"/><text x="389.00" y="719.50">&lt;..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2,314 samples, 2.35%)</title><rect x="386" y="693" width="28" height="15" fill="rgb(247,208,39)"/><text x="389.00" y="703.50">&lt;..</text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (137 samples, 0.14%)</title><rect x="412" y="677" width="2" height="15" fill="rgb(249,149,53)"/><text x="415.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (137 samples, 0.14%)</title><rect x="412" y="661" width="2" height="15" fill="rgb(240,49,41)"/><text x="415.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (137 samples, 0.14%)</title><rect x="412" y="645" width="2" height="15" fill="rgb(253,128,14)"/><text x="415.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (137 samples, 0.14%)</title><rect x="412" y="629" width="2" height="15" fill="rgb(234,94,37)"/><text x="415.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (137 samples, 0.14%)</title><rect x="412" y="613" width="2" height="15" fill="rgb(242,74,9)"/><text x="415.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (137 samples, 0.14%)</title><rect x="412" y="597" width="2" height="15" fill="rgb(234,194,45)"/><text x="415.00" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (141 samples, 0.14%)</title><rect x="416" y="693" width="1" height="15" fill="rgb(217,129,42)"/><text x="419.00" y="703.50"></text></g><g><title>_$LT$e2d2..operators..receive_batch..ReceiveBatch$LT$T$GT$$u20$as$u20$e2d2..operators..act..Act$GT$::act::_$u7b$$u7b$closure$u7d$$u7d$::h8d1298e4bf1f28cf (141 samples, 0.14%)</title><rect x="416" y="677" width="1" height="15" fill="rgb(221,162,29)"/><text x="419.00" y="687.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (633 samples, 0.64%)</title><rect x="417" y="677" width="8" height="15" fill="rgb(243,185,5)"/><text x="420.00" y="687.50"></text></g><g><title>core::cmp::min (207 samples, 0.21%)</title><rect x="425" y="629" width="3" height="15" fill="rgb(219,161,51)"/><text x="428.00" y="639.50"></text></g><g><title>core::cmp::Ord::min (207 samples, 0.21%)</title><rect x="425" y="613" width="3" height="15" fill="rgb(238,204,29)"/><text x="428.00" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::le (110 samples, 0.11%)</title><rect x="427" y="597" width="1" height="15" fill="rgb(239,215,42)"/><text x="430.00" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (72 samples, 0.07%)</title><rect x="428" y="629" width="1" height="15" fill="rgb(222,98,53)"/><text x="431.00" y="639.50"></text></g><g><title>&lt;e2d2::queues::mpsc_mbuf_queue::MpscConsumer as e2d2::interface::PacketRx&gt;::recv (297 samples, 0.30%)</title><rect x="425" y="661" width="4" height="15" fill="rgb(222,169,8)"/><text x="428.00" y="671.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue (297 samples, 0.30%)</title><rect x="425" y="645" width="4" height="15" fill="rgb(233,222,24)"/><text x="428.00" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (10 samples, 0.01%)</title><rect x="429" y="629" width="0" height="15" fill="rgb(207,25,3)"/><text x="432.00" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (10 samples, 0.01%)</title><rect x="429" y="613" width="0" height="15" fill="rgb(241,70,54)"/><text x="432.00" y="623.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::add_to_batch (138 samples, 0.14%)</title><rect x="429" y="661" width="2" height="15" fill="rgb(240,5,0)"/><text x="432.00" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (138 samples, 0.14%)</title><rect x="429" y="645" width="2" height="15" fill="rgb(242,108,50)"/><text x="432.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (8,386 samples, 8.50%)</title><rect x="334" y="741" width="100" height="15" fill="rgb(244,90,38)"/><text x="337.00" y="751.50">&lt;e2d2::opera..</text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (1,718 samples, 1.74%)</title><rect x="414" y="725" width="20" height="15" fill="rgb(215,195,17)"/><text x="417.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (1,564 samples, 1.59%)</title><rect x="416" y="709" width="18" height="15" fill="rgb(208,129,10)"/><text x="419.00" y="719.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (1,423 samples, 1.44%)</title><rect x="417" y="693" width="17" height="15" fill="rgb(227,51,46)"/><text x="420.00" y="703.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (790 samples, 0.80%)</title><rect x="425" y="677" width="9" height="15" fill="rgb(227,195,52)"/><text x="428.00" y="687.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (321 samples, 0.33%)</title><rect x="431" y="661" width="3" height="15" fill="rgb(249,134,4)"/><text x="434.00" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (321 samples, 0.33%)</title><rect x="431" y="645" width="3" height="15" fill="rgb(229,189,44)"/><text x="434.00" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (198 samples, 0.20%)</title><rect x="432" y="629" width="2" height="15" fill="rgb(250,95,53)"/><text x="435.00" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (315 samples, 0.32%)</title><rect x="443" y="693" width="4" height="15" fill="rgb(215,56,44)"/><text x="446.00" y="703.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (315 samples, 0.32%)</title><rect x="443" y="677" width="4" height="15" fill="rgb(214,145,29)"/><text x="446.00" y="687.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (315 samples, 0.32%)</title><rect x="443" y="661" width="4" height="15" fill="rgb(212,229,37)"/><text x="446.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (1,485 samples, 1.51%)</title><rect x="434" y="741" width="18" height="15" fill="rgb(216,33,33)"/><text x="437.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (1,202 samples, 1.22%)</title><rect x="438" y="725" width="14" height="15" fill="rgb(250,182,5)"/><text x="441.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (1,202 samples, 1.22%)</title><rect x="438" y="709" width="14" height="15" fill="rgb(231,4,22)"/><text x="441.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (432 samples, 0.44%)</title><rect x="447" y="693" width="5" height="15" fill="rgb(239,179,17)"/><text x="450.00" y="703.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (142 samples, 0.14%)</title><rect x="450" y="677" width="2" height="15" fill="rgb(230,50,36)"/><text x="453.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (142 samples, 0.14%)</title><rect x="450" y="661" width="2" height="15" fill="rgb(226,116,20)"/><text x="453.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (142 samples, 0.14%)</title><rect x="450" y="645" width="2" height="15" fill="rgb(208,166,43)"/><text x="453.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (141 samples, 0.14%)</title><rect x="450" y="629" width="2" height="15" fill="rgb(251,65,2)"/><text x="453.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::done (141 samples, 0.14%)</title><rect x="450" y="613" width="2" height="15" fill="rgb(227,174,16)"/><text x="453.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::done (141 samples, 0.14%)</title><rect x="450" y="597" width="2" height="15" fill="rgb(236,24,51)"/><text x="453.00" y="607.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (141 samples, 0.14%)</title><rect x="450" y="581" width="2" height="15" fill="rgb(246,162,31)"/><text x="453.00" y="591.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (141 samples, 0.14%)</title><rect x="450" y="565" width="2" height="15" fill="rgb(243,17,19)"/><text x="453.00" y="575.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::free_packet_batch (141 samples, 0.14%)</title><rect x="450" y="549" width="2" height="15" fill="rgb(229,25,27)"/><text x="453.00" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (14 samples, 0.01%)</title><rect x="456" y="677" width="0" height="15" fill="rgb(247,215,49)"/><text x="459.00" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (256 samples, 0.26%)</title><rect x="456" y="693" width="3" height="15" fill="rgb(250,27,9)"/><text x="459.00" y="703.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (242 samples, 0.25%)</title><rect x="456" y="677" width="3" height="15" fill="rgb(245,82,52)"/><text x="459.00" y="687.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (242 samples, 0.25%)</title><rect x="456" y="661" width="3" height="15" fill="rgb(215,24,43)"/><text x="459.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (3,664 samples, 3.72%)</title><rect x="452" y="741" width="44" height="15" fill="rgb(232,114,5)"/><text x="455.00" y="751.50">&lt;e2d..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (3,526 samples, 3.58%)</title><rect x="454" y="725" width="42" height="15" fill="rgb(230,190,41)"/><text x="457.00" y="735.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (3,514 samples, 3.56%)</title><rect x="454" y="709" width="42" height="15" fill="rgb(250,164,32)"/><text x="457.00" y="719.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (3,096 samples, 3.14%)</title><rect x="459" y="693" width="37" height="15" fill="rgb(217,208,36)"/><text x="462.00" y="703.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (14,548 samples, 14.75%)</title><rect x="330" y="773" width="174" height="15" fill="rgb(208,27,38)"/><text x="333.00" y="783.50">&lt;e2d2::operators::send..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (14,229 samples, 14.43%)</title><rect x="334" y="757" width="170" height="15" fill="rgb(248,92,51)"/><text x="337.00" y="767.50">&lt;e2d2::operators::send..</text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::send_q (694 samples, 0.70%)</title><rect x="496" y="741" width="8" height="15" fill="rgb(253,123,11)"/><text x="499.00" y="751.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (308 samples, 0.31%)</title><rect x="501" y="725" width="3" height="15" fill="rgb(208,223,37)"/><text x="504.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (329 samples, 0.33%)</title><rect x="504" y="741" width="4" height="15" fill="rgb(242,105,14)"/><text x="507.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (18 samples, 0.02%)</title><rect x="508" y="725" width="0" height="15" fill="rgb(220,7,47)"/><text x="511.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (18 samples, 0.02%)</title><rect x="508" y="709" width="0" height="15" fill="rgb(220,151,23)"/><text x="511.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (132 samples, 0.13%)</title><rect x="508" y="741" width="2" height="15" fill="rgb(209,198,20)"/><text x="511.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (296 samples, 0.30%)</title><rect x="510" y="741" width="3" height="15" fill="rgb(219,160,7)"/><text x="513.00" y="751.50"></text></g><g><title>__GI___pthread_mutex_unlock (896 samples, 0.91%)</title><rect x="504" y="773" width="11" height="15" fill="rgb(248,127,17)"/><text x="507.00" y="783.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (896 samples, 0.91%)</title><rect x="504" y="757" width="11" height="15" fill="rgb(225,31,38)"/><text x="507.00" y="767.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (139 samples, 0.14%)</title><rect x="513" y="741" width="2" height="15" fill="rgb(243,132,28)"/><text x="516.00" y="751.50"></text></g><g><title>e2d2::utils::asm::rdtsc_unsafe (4,626 samples, 4.69%)</title><rect x="515" y="773" width="55" height="15" fill="rgb(254,190,38)"/><text x="518.00" y="783.50">e2d2:..</text></g><g><title>core::ptr::real_drop_in_place (8,019 samples, 8.13%)</title><rect x="584" y="741" width="96" height="15" fill="rgb(239,35,44)"/><text x="587.00" y="751.50">core::ptr::..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8,019 samples, 8.13%)</title><rect x="584" y="725" width="96" height="15" fill="rgb(250,144,31)"/><text x="587.00" y="735.50">&lt;std::sync:..</text></g><g><title>std::sys_common::mutex::Mutex::raw_unlock (8,019 samples, 8.13%)</title><rect x="584" y="709" width="96" height="15" fill="rgb(234,221,13)"/><text x="587.00" y="719.50">std::sys_co..</text></g><g><title>std::sys::unix::mutex::Mutex::unlock (8,019 samples, 8.13%)</title><rect x="584" y="693" width="96" height="15" fill="rgb(212,200,50)"/><text x="587.00" y="703.50">std::sys::u..</text></g><g><title>__GI___pthread_mutex_unlock (8,019 samples, 8.13%)</title><rect x="584" y="677" width="96" height="15" fill="rgb(209,39,43)"/><text x="587.00" y="687.50">__GI___pthr..</text></g><g><title>__pthread_mutex_unlock_usercnt (7,383 samples, 7.49%)</title><rect x="592" y="661" width="88" height="15" fill="rgb(219,158,11)"/><text x="595.00" y="671.50">__pthread_..</text></g><g><title>std::sys_common::poison::Flag::get (295 samples, 0.30%)</title><rect x="680" y="693" width="4" height="15" fill="rgb(227,39,2)"/><text x="683.00" y="703.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (295 samples, 0.30%)</title><rect x="680" y="677" width="4" height="15" fill="rgb(220,14,36)"/><text x="683.00" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (295 samples, 0.30%)</title><rect x="680" y="661" width="4" height="15" fill="rgb(232,70,0)"/><text x="683.00" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (300 samples, 0.30%)</title><rect x="684" y="597" width="3" height="15" fill="rgb(244,80,12)"/><text x="687.00" y="607.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (597 samples, 0.61%)</title><rect x="680" y="725" width="7" height="15" fill="rgb(206,101,11)"/><text x="683.00" y="735.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (597 samples, 0.61%)</title><rect x="680" y="709" width="7" height="15" fill="rgb(216,129,18)"/><text x="683.00" y="719.50"></text></g><g><title>std::thread::panicking (302 samples, 0.31%)</title><rect x="684" y="693" width="3" height="15" fill="rgb(247,55,24)"/><text x="687.00" y="703.50"></text></g><g><title>std::panicking::panicking (302 samples, 0.31%)</title><rect x="684" y="677" width="3" height="15" fill="rgb(207,133,32)"/><text x="687.00" y="687.50"></text></g><g><title>std::panicking::update_panic_count (302 samples, 0.31%)</title><rect x="684" y="661" width="3" height="15" fill="rgb(236,163,19)"/><text x="687.00" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (302 samples, 0.31%)</title><rect x="684" y="645" width="3" height="15" fill="rgb(231,184,35)"/><text x="687.00" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (302 samples, 0.31%)</title><rect x="684" y="629" width="3" height="15" fill="rgb(226,214,28)"/><text x="687.00" y="639.50"></text></g><g><title>std::panicking::update_panic_count::_$u7b$$u7b$closure$u7d$$u7d$::hdd6811239ad811d8 (302 samples, 0.31%)</title><rect x="684" y="613" width="3" height="15" fill="rgb(249,125,28)"/><text x="687.00" y="623.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (45,811 samples, 46.46%)</title><rect x="229" y="821" width="548" height="15" fill="rgb(228,127,11)"/><text x="232.00" y="831.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (45,810 samples, 46.46%)</title><rect x="229" y="805" width="548" height="15" fill="rgb(240,220,1)"/><text x="232.00" y="815.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (45,234 samples, 45.87%)</title><rect x="236" y="789" width="541" height="15" fill="rgb(235,10,6)"/><text x="239.00" y="799.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_intern..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (17,255 samples, 17.50%)</title><rect x="570" y="773" width="207" height="15" fill="rgb(213,183,1)"/><text x="573.00" y="783.50">std::sync::mpsc::Receiver&lt;T..</text></g><g><title>std::sync::mpsc::sync::Packet&lt;T&gt;::try_recv (16,414 samples, 16.65%)</title><rect x="580" y="757" width="197" height="15" fill="rgb(234,212,12)"/><text x="583.00" y="767.50">std::sync::mpsc::sync::Pa..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (8,081 samples, 8.20%)</title><rect x="680" y="741" width="97" height="15" fill="rgb(237,65,24)"/><text x="683.00" y="751.50">std::sync::..</text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (7,484 samples, 7.59%)</title><rect x="687" y="725" width="90" height="15" fill="rgb(237,24,11)"/><text x="690.00" y="735.50">std::sys_c..</text></g><g><title>std::sys::unix::mutex::Mutex::lock (7,484 samples, 7.59%)</title><rect x="687" y="709" width="90" height="15" fill="rgb(205,190,20)"/><text x="690.00" y="719.50">std::sys::..</text></g><g><title>__GI___pthread_mutex_lock (7,484 samples, 7.59%)</title><rect x="687" y="693" width="90" height="15" fill="rgb(218,160,46)"/><text x="690.00" y="703.50">__GI___pth..</text></g><g><title>sched-2 (61,430 samples, 62.30%)</title><rect x="42" y="997" width="735" height="15" fill="rgb(250,19,18)"/><text x="45.00" y="1007.50">sched-2</text></g><g><title>__GI___clone (45,819 samples, 46.47%)</title><rect x="229" y="981" width="548" height="15" fill="rgb(239,30,35)"/><text x="232.00" y="991.50">__GI___clone</text></g><g><title>start_thread (45,819 samples, 46.47%)</title><rect x="229" y="965" width="548" height="15" fill="rgb(252,126,41)"/><text x="232.00" y="975.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (45,819 samples, 46.47%)</title><rect x="229" y="949" width="548" height="15" fill="rgb(251,77,2)"/><text x="232.00" y="959.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys_common::thread::start_thread (45,819 samples, 46.47%)</title><rect x="229" y="933" width="548" height="15" fill="rgb(225,150,45)"/><text x="232.00" y="943.50">std::sys_common::thread::start_thread</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (45,819 samples, 46.47%)</title><rect x="229" y="917" width="548" height="15" fill="rgb(209,160,10)"/><text x="232.00" y="927.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (45,819 samples, 46.47%)</title><rect x="229" y="901" width="548" height="15" fill="rgb(234,84,27)"/><text x="232.00" y="911.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f59d60f147d050 (45,819 samples, 46.47%)</title><rect x="229" y="885" width="548" height="15" fill="rgb(247,221,21)"/><text x="232.00" y="895.50">core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45,818 samples, 46.47%)</title><rect x="229" y="869" width="548" height="15" fill="rgb(244,77,5)"/><text x="232.00" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$closure$u7d$$u7d$::h008d40440c8a9600 (45,818 samples, 46.47%)</title><rect x="229" y="853" width="548" height="15" fill="rgb(233,182,10)"/><text x="232.00" y="863.50">e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$clo..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (45,818 samples, 46.47%)</title><rect x="229" y="837" width="548" height="15" fill="rgb(217,1,17)"/><text x="232.00" y="847.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests</text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (42 samples, 0.04%)</title><rect x="777" y="981" width="0" height="15" fill="rgb(229,69,46)"/><text x="780.00" y="991.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (42 samples, 0.04%)</title><rect x="777" y="981" width="1" height="15" fill="rgb(233,210,29)"/><text x="780.00" y="991.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (24 samples, 0.02%)</title><rect x="778" y="965" width="0" height="15" fill="rgb(229,43,50)"/><text x="781.00" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (24 samples, 0.02%)</title><rect x="778" y="949" width="0" height="15" fill="rgb(237,126,14)"/><text x="781.00" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (24 samples, 0.02%)</title><rect x="778" y="933" width="0" height="15" fill="rgb(229,123,32)"/><text x="781.00" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (24 samples, 0.02%)</title><rect x="778" y="917" width="0" height="15" fill="rgb(213,131,39)"/><text x="781.00" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="778" y="901" width="0" height="15" fill="rgb(213,86,43)"/><text x="781.00" y="911.50"></text></g><g><title>[pvn-tls] (9 samples, 0.01%)</title><rect x="778" y="981" width="0" height="15" fill="rgb(209,82,11)"/><text x="781.00" y="991.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (9 samples, 0.01%)</title><rect x="782" y="965" width="0" height="15" fill="rgb(225,57,38)"/><text x="785.00" y="975.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (39 samples, 0.04%)</title><rect x="782" y="965" width="0" height="15" fill="rgb(222,211,51)"/><text x="785.00" y="975.50"></text></g><g><title>&lt;rustls::msgs::enums::CipherSuite as rustls::msgs::codec::Codec&gt;::read (12 samples, 0.01%)</title><rect x="782" y="965" width="0" height="15" fill="rgb(241,214,19)"/><text x="785.00" y="975.50"></text></g><g><title>&lt;rustls::msgs::enums::SignatureScheme as rustls::msgs::codec::Codec&gt;::read (11 samples, 0.01%)</title><rect x="782" y="965" width="1" height="15" fill="rgb(223,220,36)"/><text x="785.00" y="975.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.04%)</title><rect x="783" y="965" width="0" height="15" fill="rgb(216,109,47)"/><text x="786.00" y="975.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (28 samples, 0.03%)</title><rect x="783" y="949" width="0" height="15" fill="rgb(247,197,39)"/><text x="786.00" y="959.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (28 samples, 0.03%)</title><rect x="783" y="933" width="0" height="15" fill="rgb(219,102,21)"/><text x="786.00" y="943.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (48 samples, 0.05%)</title><rect x="783" y="965" width="1" height="15" fill="rgb(240,53,7)"/><text x="786.00" y="975.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (76 samples, 0.08%)</title><rect x="784" y="965" width="1" height="15" fill="rgb(236,163,52)"/><text x="787.00" y="975.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (32 samples, 0.03%)</title><rect x="785" y="965" width="0" height="15" fill="rgb(215,11,21)"/><text x="788.00" y="975.50"></text></g><g><title>__GI___libc_free (51 samples, 0.05%)</title><rect x="785" y="965" width="1" height="15" fill="rgb(223,119,25)"/><text x="788.00" y="975.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.03%)</title><rect x="786" y="965" width="0" height="15" fill="rgb(209,163,11)"/><text x="789.00" y="975.50"></text></g><g><title>__GI___libc_realloc (34 samples, 0.03%)</title><rect x="786" y="965" width="0" height="15" fill="rgb(245,24,25)"/><text x="789.00" y="975.50"></text></g><g><title>__GI___pthread_mutex_lock (12 samples, 0.01%)</title><rect x="786" y="965" width="0" height="15" fill="rgb(247,52,5)"/><text x="789.00" y="975.50"></text></g><g><title>__libc_write (40 samples, 0.04%)</title><rect x="787" y="965" width="0" height="15" fill="rgb(243,64,2)"/><text x="790.00" y="975.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.01%)</title><rect x="787" y="965" width="0" height="15" fill="rgb(216,225,28)"/><text x="790.00" y="975.50"></text></g><g><title>_int_free (24 samples, 0.02%)</title><rect x="787" y="965" width="0" height="15" fill="rgb(249,200,18)"/><text x="790.00" y="975.50"></text></g><g><title>_int_malloc (25 samples, 0.03%)</title><rect x="787" y="965" width="1" height="15" fill="rgb(250,150,2)"/><text x="790.00" y="975.50"></text></g><g><title>_int_realloc (23 samples, 0.02%)</title><rect x="788" y="965" width="0" height="15" fill="rgb(222,13,9)"/><text x="791.00" y="975.50"></text></g><g><title>core::fmt::Formatter::pad_integral (21 samples, 0.02%)</title><rect x="788" y="965" width="0" height="15" fill="rgb(247,116,17)"/><text x="791.00" y="975.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (16 samples, 0.02%)</title><rect x="788" y="965" width="1" height="15" fill="rgb(236,106,14)"/><text x="791.00" y="975.50"></text></g><g><title>core::fmt::write (54 samples, 0.05%)</title><rect x="789" y="965" width="0" height="15" fill="rgb(223,6,16)"/><text x="792.00" y="975.50"></text></g><g><title>core::iter::adapters::Rev&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="789" y="965" width="0" height="15" fill="rgb(230,59,30)"/><text x="792.00" y="975.50"></text></g><g><title>core::ptr::real_drop_in_place (26 samples, 0.03%)</title><rect x="789" y="965" width="1" height="15" fill="rgb(208,19,34)"/><text x="792.00" y="975.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscProducer::enqueue_one (14 samples, 0.01%)</title><rect x="790" y="965" width="0" height="15" fill="rgb(237,18,5)"/><text x="793.00" y="975.50"></text></g><g><title>elem_mul_by_2 (13 samples, 0.01%)</title><rect x="791" y="693" width="0" height="15" fill="rgb(206,18,4)"/><text x="794.00" y="703.50"></text></g><g><title>LIMBS_shl_mod (13 samples, 0.01%)</title><rect x="791" y="677" width="0" height="15" fill="rgb(243,186,25)"/><text x="794.00" y="687.50"></text></g><g><title>elem_mul_by_3 (9 samples, 0.01%)</title><rect x="791" y="693" width="0" height="15" fill="rgb(210,63,15)"/><text x="794.00" y="703.50"></text></g><g><title>elem_add (9 samples, 0.01%)</title><rect x="791" y="677" width="0" height="15" fill="rgb(221,125,28)"/><text x="794.00" y="687.50"></text></g><g><title>LIMBS_add_mod (9 samples, 0.01%)</title><rect x="791" y="661" width="0" height="15" fill="rgb(240,179,46)"/><text x="794.00" y="671.50"></text></g><g><title>GFp_nistz384_point_double (59 samples, 0.06%)</title><rect x="790" y="709" width="1" height="15" fill="rgb(249,176,23)"/><text x="793.00" y="719.50"></text></g><g><title>elem_sub (20 samples, 0.02%)</title><rect x="791" y="693" width="0" height="15" fill="rgb(244,86,9)"/><text x="794.00" y="703.50"></text></g><g><title>LIMBS_sub_mod (20 samples, 0.02%)</title><rect x="791" y="677" width="0" height="15" fill="rgb(209,98,54)"/><text x="794.00" y="687.50"></text></g><g><title>limbs_sub (9 samples, 0.01%)</title><rect x="791" y="661" width="0" height="15" fill="rgb(249,23,13)"/><text x="794.00" y="671.50"></text></g><g><title>GFp_nistz384_point_add (10 samples, 0.01%)</title><rect x="791" y="693" width="0" height="15" fill="rgb(215,62,20)"/><text x="794.00" y="703.50"></text></g><g><title>GFp_nistz384_point_mul (80 samples, 0.08%)</title><rect x="790" y="725" width="1" height="15" fill="rgb(239,84,30)"/><text x="793.00" y="735.50"></text></g><g><title>add_precomputed_w5 (18 samples, 0.02%)</title><rect x="791" y="709" width="0" height="15" fill="rgb(216,1,9)"/><text x="794.00" y="719.50"></text></g><g><title>elem_mul_by_2 (12 samples, 0.01%)</title><rect x="792" y="661" width="0" height="15" fill="rgb(209,141,43)"/><text x="795.00" y="671.50"></text></g><g><title>LIMBS_shl_mod (12 samples, 0.01%)</title><rect x="792" y="645" width="0" height="15" fill="rgb(249,78,3)"/><text x="795.00" y="655.50"></text></g><g><title>elem_mul_by_3 (16 samples, 0.02%)</title><rect x="792" y="661" width="0" height="15" fill="rgb(213,39,4)"/><text x="795.00" y="671.50"></text></g><g><title>elem_add (16 samples, 0.02%)</title><rect x="792" y="645" width="0" height="15" fill="rgb(224,226,11)"/><text x="795.00" y="655.50"></text></g><g><title>LIMBS_add_mod (16 samples, 0.02%)</title><rect x="792" y="629" width="0" height="15" fill="rgb(236,151,42)"/><text x="795.00" y="639.50"></text></g><g><title>GFp_nistz384_point_double (51 samples, 0.05%)</title><rect x="791" y="677" width="1" height="15" fill="rgb(225,8,11)"/><text x="794.00" y="687.50"></text></g><g><title>elem_sub (12 samples, 0.01%)</title><rect x="792" y="661" width="0" height="15" fill="rgb(222,178,25)"/><text x="795.00" y="671.50"></text></g><g><title>LIMBS_sub_mod (12 samples, 0.01%)</title><rect x="792" y="645" width="0" height="15" fill="rgb(231,217,9)"/><text x="795.00" y="655.50"></text></g><g><title>GFp_nistz384_point_add (11 samples, 0.01%)</title><rect x="792" y="661" width="0" height="15" fill="rgb(209,10,34)"/><text x="795.00" y="671.50"></text></g><g><title>&lt;rustls::verify::WebPKIVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (151 samples, 0.15%)</title><rect x="790" y="933" width="2" height="15" fill="rgb(230,68,27)"/><text x="793.00" y="943.50"></text></g><g><title>webpki::EndEntityCert::verify_is_valid_tls_server_cert (151 samples, 0.15%)</title><rect x="790" y="917" width="2" height="15" fill="rgb(225,210,23)"/><text x="793.00" y="927.50"></text></g><g><title>webpki::verify_cert::build_chain (151 samples, 0.15%)</title><rect x="790" y="901" width="2" height="15" fill="rgb(247,134,41)"/><text x="793.00" y="911.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (151 samples, 0.15%)</title><rect x="790" y="885" width="2" height="15" fill="rgb(253,184,38)"/><text x="793.00" y="895.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h7d5a92fee08bd0a2 (151 samples, 0.15%)</title><rect x="790" y="869" width="2" height="15" fill="rgb(212,69,9)"/><text x="793.00" y="879.50"></text></g><g><title>webpki::verify_cert::build_chain (151 samples, 0.15%)</title><rect x="790" y="853" width="2" height="15" fill="rgb(250,57,22)"/><text x="793.00" y="863.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (151 samples, 0.15%)</title><rect x="790" y="837" width="2" height="15" fill="rgb(253,140,42)"/><text x="793.00" y="847.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h6844014f3662fae0 (151 samples, 0.15%)</title><rect x="790" y="821" width="2" height="15" fill="rgb(212,12,6)"/><text x="793.00" y="831.50"></text></g><g><title>webpki::verify_cert::check_signatures (151 samples, 0.15%)</title><rect x="790" y="805" width="2" height="15" fill="rgb(230,7,2)"/><text x="793.00" y="815.50"></text></g><g><title>webpki::signed_data::verify_signed_data (151 samples, 0.15%)</title><rect x="790" y="789" width="2" height="15" fill="rgb(209,21,32)"/><text x="793.00" y="799.50"></text></g><g><title>webpki::signed_data::verify_signature (151 samples, 0.15%)</title><rect x="790" y="773" width="2" height="15" fill="rgb(212,81,33)"/><text x="793.00" y="783.50"></text></g><g><title>ring::signature::verify (151 samples, 0.15%)</title><rect x="790" y="757" width="2" height="15" fill="rgb(217,224,22)"/><text x="793.00" y="767.50"></text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::Algorithm as ring::signature::VerificationAlgorithm&gt;::verify (151 samples, 0.15%)</title><rect x="790" y="741" width="2" height="15" fill="rgb(217,62,46)"/><text x="793.00" y="751.50"></text></g><g><title>ring::ec::suite_b::ops::p384::p384_point_mul_base_impl (71 samples, 0.07%)</title><rect x="791" y="725" width="1" height="15" fill="rgb(208,86,20)"/><text x="794.00" y="735.50"></text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul (71 samples, 0.07%)</title><rect x="791" y="709" width="1" height="15" fill="rgb(249,61,52)"/><text x="794.00" y="719.50"></text></g><g><title>GFp_nistz384_point_mul (70 samples, 0.07%)</title><rect x="791" y="693" width="1" height="15" fill="rgb(235,229,12)"/><text x="794.00" y="703.50"></text></g><g><title>add_precomputed_w5 (17 samples, 0.02%)</title><rect x="792" y="677" width="0" height="15" fill="rgb(250,188,14)"/><text x="795.00" y="687.50"></text></g><g><title>pvn_tls::utils::test_extracted_cert (154 samples, 0.16%)</title><rect x="790" y="949" width="2" height="15" fill="rgb(223,144,53)"/><text x="793.00" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (9 samples, 0.01%)</title><rect x="792" y="837" width="1" height="15" fill="rgb(235,145,3)"/><text x="795.00" y="847.50"></text></g><g><title>core::hash::Hasher::write_u16 (9 samples, 0.01%)</title><rect x="792" y="821" width="1" height="15" fill="rgb(208,153,26)"/><text x="795.00" y="831.50"></text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h98ce98c98d7b80a2 (209 samples, 0.21%)</title><rect x="790" y="965" width="3" height="15" fill="rgb(208,207,48)"/><text x="793.00" y="975.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (20 samples, 0.02%)</title><rect x="792" y="949" width="1" height="15" fill="rgb(234,131,3)"/><text x="795.00" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (20 samples, 0.02%)</title><rect x="792" y="933" width="1" height="15" fill="rgb(244,211,26)"/><text x="795.00" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (20 samples, 0.02%)</title><rect x="792" y="917" width="1" height="15" fill="rgb(223,225,4)"/><text x="795.00" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (20 samples, 0.02%)</title><rect x="792" y="901" width="1" height="15" fill="rgb(237,77,23)"/><text x="795.00" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (20 samples, 0.02%)</title><rect x="792" y="885" width="1" height="15" fill="rgb(243,213,53)"/><text x="795.00" y="895.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.02%)</title><rect x="792" y="869" width="1" height="15" fill="rgb(243,144,28)"/><text x="795.00" y="879.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (20 samples, 0.02%)</title><rect x="792" y="853" width="1" height="15" fill="rgb(223,81,15)"/><text x="795.00" y="863.50"></text></g><g><title>pvn_tls::utils::on_frame (46 samples, 0.05%)</title><rect x="793" y="965" width="0" height="15" fill="rgb(217,91,12)"/><text x="796.00" y="975.50"></text></g><g><title>rustls::msgs::codec::Codec::read_bytes (75 samples, 0.08%)</title><rect x="793" y="965" width="1" height="15" fill="rgb(230,73,45)"/><text x="796.00" y="975.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (16 samples, 0.02%)</title><rect x="794" y="965" width="0" height="15" fill="rgb(244,224,13)"/><text x="797.00" y="975.50"></text></g><g><title>std::io::Write::write_all (88 samples, 0.09%)</title><rect x="795" y="965" width="1" height="15" fill="rgb(229,84,32)"/><text x="798.00" y="975.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (27 samples, 0.03%)</title><rect x="795" y="949" width="1" height="15" fill="rgb(235,57,9)"/><text x="798.00" y="959.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (27 samples, 0.03%)</title><rect x="795" y="933" width="1" height="15" fill="rgb(218,147,18)"/><text x="798.00" y="943.50"></text></g><g><title>std::memchr::memrchr (16 samples, 0.02%)</title><rect x="795" y="917" width="1" height="15" fill="rgb(217,25,3)"/><text x="798.00" y="927.50"></text></g><g><title>std::sys::unix::memchr::memrchr (16 samples, 0.02%)</title><rect x="795" y="901" width="1" height="15" fill="rgb(230,45,50)"/><text x="798.00" y="911.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (16 samples, 0.02%)</title><rect x="795" y="885" width="1" height="15" fill="rgb(209,139,36)"/><text x="798.00" y="895.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (15 samples, 0.02%)</title><rect x="796" y="965" width="0" height="15" fill="rgb(221,26,47)"/><text x="799.00" y="975.50"></text></g><g><title>std::io::stdio::_print (33 samples, 0.03%)</title><rect x="796" y="965" width="0" height="15" fill="rgb(226,94,29)"/><text x="799.00" y="975.50"></text></g><g><title>std::io::stdio::stdout (18 samples, 0.02%)</title><rect x="796" y="965" width="0" height="15" fill="rgb(245,81,24)"/><text x="799.00" y="975.50"></text></g><g><title>std::io::lazy::Lazy&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="796" y="949" width="0" height="15" fill="rgb(207,55,10)"/><text x="799.00" y="959.50"></text></g><g><title>std::sys_common::mutex::Mutex::lock (11 samples, 0.01%)</title><rect x="796" y="933" width="0" height="15" fill="rgb(213,19,35)"/><text x="799.00" y="943.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (11 samples, 0.01%)</title><rect x="796" y="917" width="0" height="15" fill="rgb(214,206,20)"/><text x="799.00" y="927.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (11 samples, 0.01%)</title><rect x="796" y="901" width="0" height="15" fill="rgb(246,37,26)"/><text x="799.00" y="911.50"></text></g><g><title>ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont::sqr_mul (9 samples, 0.01%)</title><rect x="796" y="421" width="0" height="15" fill="rgb(238,91,19)"/><text x="799.00" y="431.50"></text></g><g><title>ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont::sqr_mut (9 samples, 0.01%)</title><rect x="796" y="405" width="0" height="15" fill="rgb(225,159,6)"/><text x="799.00" y="415.50"></text></g><g><title>ring::ec::suite_b::ops::elem::unary_op_from_binary_op_assign (9 samples, 0.01%)</title><rect x="796" y="389" width="0" height="15" fill="rgb(207,219,25)"/><text x="799.00" y="399.50"></text></g><g><title>GFp_bn_mul_mont (9 samples, 0.01%)</title><rect x="796" y="373" width="0" height="15" fill="rgb(217,155,15)"/><text x="799.00" y="383.50"></text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::Algorithm as ring::signature::VerificationAlgorithm&gt;::verify (19 samples, 0.02%)</title><rect x="796" y="453" width="1" height="15" fill="rgb(248,125,47)"/><text x="799.00" y="463.50"></text></g><g><title>ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont (18 samples, 0.02%)</title><rect x="796" y="437" width="1" height="15" fill="rgb(217,131,13)"/><text x="799.00" y="447.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22 samples, 0.02%)</title><rect x="796" y="965" width="1" height="15" fill="rgb(241,101,30)"/><text x="799.00" y="975.50"></text></g><g><title>std::sys_common::thread::start_thread (22 samples, 0.02%)</title><rect x="796" y="949" width="1" height="15" fill="rgb(211,34,4)"/><text x="799.00" y="959.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (22 samples, 0.02%)</title><rect x="796" y="933" width="1" height="15" fill="rgb(224,131,50)"/><text x="799.00" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (22 samples, 0.02%)</title><rect x="796" y="917" width="1" height="15" fill="rgb(245,30,48)"/><text x="799.00" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f59d60f147d050 (22 samples, 0.02%)</title><rect x="796" y="901" width="1" height="15" fill="rgb(248,132,50)"/><text x="799.00" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 0.02%)</title><rect x="796" y="885" width="1" height="15" fill="rgb(206,154,5)"/><text x="799.00" y="895.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$closure$u7d$$u7d$::h008d40440c8a9600 (22 samples, 0.02%)</title><rect x="796" y="869" width="1" height="15" fill="rgb(251,166,37)"/><text x="799.00" y="879.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (22 samples, 0.02%)</title><rect x="796" y="853" width="1" height="15" fill="rgb(236,38,30)"/><text x="799.00" y="863.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (22 samples, 0.02%)</title><rect x="796" y="837" width="1" height="15" fill="rgb(249,49,11)"/><text x="799.00" y="847.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (22 samples, 0.02%)</title><rect x="796" y="821" width="1" height="15" fill="rgb(219,99,20)"/><text x="799.00" y="831.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (22 samples, 0.02%)</title><rect x="796" y="805" width="1" height="15" fill="rgb(233,168,32)"/><text x="799.00" y="815.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (22 samples, 0.02%)</title><rect x="796" y="789" width="1" height="15" fill="rgb(250,197,29)"/><text x="799.00" y="799.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (22 samples, 0.02%)</title><rect x="796" y="773" width="1" height="15" fill="rgb(230,68,3)"/><text x="799.00" y="783.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (22 samples, 0.02%)</title><rect x="796" y="757" width="1" height="15" fill="rgb(223,216,19)"/><text x="799.00" y="767.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (22 samples, 0.02%)</title><rect x="796" y="741" width="1" height="15" fill="rgb(216,228,44)"/><text x="799.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (22 samples, 0.02%)</title><rect x="796" y="725" width="1" height="15" fill="rgb(254,100,53)"/><text x="799.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (22 samples, 0.02%)</title><rect x="796" y="709" width="1" height="15" fill="rgb(217,142,38)"/><text x="799.00" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (22 samples, 0.02%)</title><rect x="796" y="693" width="1" height="15" fill="rgb(230,191,32)"/><text x="799.00" y="703.50"></text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h98ce98c98d7b80a2 (22 samples, 0.02%)</title><rect x="796" y="677" width="1" height="15" fill="rgb(253,205,42)"/><text x="799.00" y="687.50"></text></g><g><title>pvn_tls::utils::test_extracted_cert (22 samples, 0.02%)</title><rect x="796" y="661" width="1" height="15" fill="rgb(241,165,44)"/><text x="799.00" y="671.50"></text></g><g><title>&lt;rustls::verify::WebPKIVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (22 samples, 0.02%)</title><rect x="796" y="645" width="1" height="15" fill="rgb(223,119,45)"/><text x="799.00" y="655.50"></text></g><g><title>webpki::EndEntityCert::verify_is_valid_tls_server_cert (22 samples, 0.02%)</title><rect x="796" y="629" width="1" height="15" fill="rgb(221,130,41)"/><text x="799.00" y="639.50"></text></g><g><title>webpki::verify_cert::build_chain (22 samples, 0.02%)</title><rect x="796" y="613" width="1" height="15" fill="rgb(229,55,14)"/><text x="799.00" y="623.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (22 samples, 0.02%)</title><rect x="796" y="597" width="1" height="15" fill="rgb(247,82,2)"/><text x="799.00" y="607.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h7d5a92fee08bd0a2 (22 samples, 0.02%)</title><rect x="796" y="581" width="1" height="15" fill="rgb(254,161,30)"/><text x="799.00" y="591.50"></text></g><g><title>webpki::verify_cert::build_chain (22 samples, 0.02%)</title><rect x="796" y="565" width="1" height="15" fill="rgb(206,124,0)"/><text x="799.00" y="575.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (22 samples, 0.02%)</title><rect x="796" y="549" width="1" height="15" fill="rgb(249,123,52)"/><text x="799.00" y="559.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h6844014f3662fae0 (22 samples, 0.02%)</title><rect x="796" y="533" width="1" height="15" fill="rgb(247,174,32)"/><text x="799.00" y="543.50"></text></g><g><title>webpki::verify_cert::check_signatures (22 samples, 0.02%)</title><rect x="796" y="517" width="1" height="15" fill="rgb(210,110,16)"/><text x="799.00" y="527.50"></text></g><g><title>webpki::signed_data::verify_signed_data (22 samples, 0.02%)</title><rect x="796" y="501" width="1" height="15" fill="rgb(246,201,17)"/><text x="799.00" y="511.50"></text></g><g><title>webpki::signed_data::verify_signature (22 samples, 0.02%)</title><rect x="796" y="485" width="1" height="15" fill="rgb(243,80,32)"/><text x="799.00" y="495.50"></text></g><g><title>ring::signature::verify (22 samples, 0.02%)</title><rect x="796" y="469" width="1" height="15" fill="rgb(228,181,29)"/><text x="799.00" y="479.50"></text></g><g><title>GFp_nistz256_point_doublex (9 samples, 0.01%)</title><rect x="797" y="501" width="0" height="15" fill="rgb(212,219,15)"/><text x="800.00" y="511.50"></text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::Algorithm as ring::signature::VerificationAlgorithm&gt;::verify (10 samples, 0.01%)</title><rect x="797" y="533" width="0" height="15" fill="rgb(218,147,34)"/><text x="800.00" y="543.50"></text></g><g><title>GFp_nistz256_point_mul (10 samples, 0.01%)</title><rect x="797" y="517" width="0" height="15" fill="rgb(242,167,49)"/><text x="800.00" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.01%)</title><rect x="797" y="965" width="0" height="15" fill="rgb(253,130,22)"/><text x="800.00" y="975.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$closure$u7d$$u7d$::h008d40440c8a9600 (13 samples, 0.01%)</title><rect x="797" y="949" width="0" height="15" fill="rgb(228,60,36)"/><text x="800.00" y="959.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (13 samples, 0.01%)</title><rect x="797" y="933" width="0" height="15" fill="rgb(240,166,44)"/><text x="800.00" y="943.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (13 samples, 0.01%)</title><rect x="797" y="917" width="0" height="15" fill="rgb(252,3,20)"/><text x="800.00" y="927.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (13 samples, 0.01%)</title><rect x="797" y="901" width="0" height="15" fill="rgb(214,4,21)"/><text x="800.00" y="911.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (13 samples, 0.01%)</title><rect x="797" y="885" width="0" height="15" fill="rgb(224,36,10)"/><text x="800.00" y="895.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (13 samples, 0.01%)</title><rect x="797" y="869" width="0" height="15" fill="rgb(236,156,26)"/><text x="800.00" y="879.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (13 samples, 0.01%)</title><rect x="797" y="853" width="0" height="15" fill="rgb(243,155,9)"/><text x="800.00" y="863.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (13 samples, 0.01%)</title><rect x="797" y="837" width="0" height="15" fill="rgb(229,23,11)"/><text x="800.00" y="847.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (13 samples, 0.01%)</title><rect x="797" y="821" width="0" height="15" fill="rgb(240,94,31)"/><text x="800.00" y="831.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (13 samples, 0.01%)</title><rect x="797" y="805" width="0" height="15" fill="rgb(220,10,35)"/><text x="800.00" y="815.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (13 samples, 0.01%)</title><rect x="797" y="789" width="0" height="15" fill="rgb(223,225,3)"/><text x="800.00" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (13 samples, 0.01%)</title><rect x="797" y="773" width="0" height="15" fill="rgb(216,169,11)"/><text x="800.00" y="783.50"></text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h98ce98c98d7b80a2 (13 samples, 0.01%)</title><rect x="797" y="757" width="0" height="15" fill="rgb(205,65,51)"/><text x="800.00" y="767.50"></text></g><g><title>pvn_tls::utils::test_extracted_cert (13 samples, 0.01%)</title><rect x="797" y="741" width="0" height="15" fill="rgb(253,188,12)"/><text x="800.00" y="751.50"></text></g><g><title>&lt;rustls::verify::WebPKIVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (13 samples, 0.01%)</title><rect x="797" y="725" width="0" height="15" fill="rgb(208,101,36)"/><text x="800.00" y="735.50"></text></g><g><title>webpki::EndEntityCert::verify_is_valid_tls_server_cert (13 samples, 0.01%)</title><rect x="797" y="709" width="0" height="15" fill="rgb(225,16,40)"/><text x="800.00" y="719.50"></text></g><g><title>webpki::verify_cert::build_chain (13 samples, 0.01%)</title><rect x="797" y="693" width="0" height="15" fill="rgb(224,94,2)"/><text x="800.00" y="703.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (13 samples, 0.01%)</title><rect x="797" y="677" width="0" height="15" fill="rgb(216,158,28)"/><text x="800.00" y="687.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h7d5a92fee08bd0a2 (13 samples, 0.01%)</title><rect x="797" y="661" width="0" height="15" fill="rgb(208,98,17)"/><text x="800.00" y="671.50"></text></g><g><title>webpki::verify_cert::build_chain (13 samples, 0.01%)</title><rect x="797" y="645" width="0" height="15" fill="rgb(239,119,2)"/><text x="800.00" y="655.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (13 samples, 0.01%)</title><rect x="797" y="629" width="0" height="15" fill="rgb(209,17,25)"/><text x="800.00" y="639.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h6844014f3662fae0 (13 samples, 0.01%)</title><rect x="797" y="613" width="0" height="15" fill="rgb(251,9,19)"/><text x="800.00" y="623.50"></text></g><g><title>webpki::verify_cert::check_signatures (13 samples, 0.01%)</title><rect x="797" y="597" width="0" height="15" fill="rgb(221,48,45)"/><text x="800.00" y="607.50"></text></g><g><title>webpki::signed_data::verify_signed_data (13 samples, 0.01%)</title><rect x="797" y="581" width="0" height="15" fill="rgb(254,124,6)"/><text x="800.00" y="591.50"></text></g><g><title>webpki::signed_data::verify_signature (13 samples, 0.01%)</title><rect x="797" y="565" width="0" height="15" fill="rgb(210,2,48)"/><text x="800.00" y="575.50"></text></g><g><title>ring::signature::verify (13 samples, 0.01%)</title><rect x="797" y="549" width="0" height="15" fill="rgb(243,92,19)"/><text x="800.00" y="559.50"></text></g><g><title>elem_mul_mont (69 samples, 0.07%)</title><rect x="797" y="757" width="1" height="15" fill="rgb(244,105,45)"/><text x="800.00" y="767.50"></text></g><g><title>GFp_bn_mul_mont (69 samples, 0.07%)</title><rect x="797" y="741" width="1" height="15" fill="rgb(242,214,10)"/><text x="800.00" y="751.50"></text></g><g><title>GFp_nistz384_point_double (128 samples, 0.13%)</title><rect x="797" y="773" width="1" height="15" fill="rgb(205,31,4)"/><text x="800.00" y="783.50"></text></g><g><title>elem_sqr_mont (59 samples, 0.06%)</title><rect x="798" y="757" width="0" height="15" fill="rgb(244,75,19)"/><text x="801.00" y="767.50"></text></g><g><title>elem_mul_mont (59 samples, 0.06%)</title><rect x="798" y="741" width="0" height="15" fill="rgb(219,95,53)"/><text x="801.00" y="751.50"></text></g><g><title>GFp_bn_mul_mont (59 samples, 0.06%)</title><rect x="798" y="725" width="0" height="15" fill="rgb(237,53,0)"/><text x="801.00" y="735.50"></text></g><g><title>elem_mul_mont (30 samples, 0.03%)</title><rect x="798" y="741" width="1" height="15" fill="rgb(211,69,45)"/><text x="801.00" y="751.50"></text></g><g><title>GFp_bn_mul_mont (30 samples, 0.03%)</title><rect x="798" y="725" width="1" height="15" fill="rgb(205,162,48)"/><text x="801.00" y="735.50"></text></g><g><title>GFp_nistz384_point_mul (174 samples, 0.18%)</title><rect x="797" y="789" width="2" height="15" fill="rgb(229,166,35)"/><text x="800.00" y="799.50"></text></g><g><title>add_precomputed_w5 (43 samples, 0.04%)</title><rect x="798" y="773" width="1" height="15" fill="rgb(246,37,34)"/><text x="801.00" y="783.50"></text></g><g><title>GFp_nistz384_point_add (43 samples, 0.04%)</title><rect x="798" y="757" width="1" height="15" fill="rgb(211,213,15)"/><text x="801.00" y="767.50"></text></g><g><title>elem_sqr_mont (13 samples, 0.01%)</title><rect x="799" y="741" width="0" height="15" fill="rgb(210,127,29)"/><text x="802.00" y="751.50"></text></g><g><title>elem_mul_mont (13 samples, 0.01%)</title><rect x="799" y="725" width="0" height="15" fill="rgb(244,96,14)"/><text x="802.00" y="735.50"></text></g><g><title>GFp_bn_mul_mont (13 samples, 0.01%)</title><rect x="799" y="709" width="0" height="15" fill="rgb(250,188,39)"/><text x="802.00" y="719.50"></text></g><g><title>elem_mul_mont (61 samples, 0.06%)</title><rect x="799" y="725" width="1" height="15" fill="rgb(252,79,28)"/><text x="802.00" y="735.50"></text></g><g><title>GFp_bn_mul_mont (61 samples, 0.06%)</title><rect x="799" y="709" width="1" height="15" fill="rgb(242,101,12)"/><text x="802.00" y="719.50"></text></g><g><title>GFp_nistz384_point_double (128 samples, 0.13%)</title><rect x="799" y="741" width="1" height="15" fill="rgb(251,14,3)"/><text x="802.00" y="751.50"></text></g><g><title>elem_sqr_mont (67 samples, 0.07%)</title><rect x="800" y="725" width="0" height="15" fill="rgb(216,38,26)"/><text x="803.00" y="735.50"></text></g><g><title>elem_mul_mont (67 samples, 0.07%)</title><rect x="800" y="709" width="0" height="15" fill="rgb(205,164,9)"/><text x="803.00" y="719.50"></text></g><g><title>GFp_bn_mul_mont (67 samples, 0.07%)</title><rect x="800" y="693" width="0" height="15" fill="rgb(220,174,22)"/><text x="803.00" y="703.50"></text></g><g><title>elem_mul_mont (27 samples, 0.03%)</title><rect x="800" y="709" width="1" height="15" fill="rgb(215,100,8)"/><text x="803.00" y="719.50"></text></g><g><title>GFp_bn_mul_mont (27 samples, 0.03%)</title><rect x="800" y="693" width="1" height="15" fill="rgb(242,160,15)"/><text x="803.00" y="703.50"></text></g><g><title>[unknown] (1,908 samples, 1.94%)</title><rect x="778" y="981" width="23" height="15" fill="rgb(254,62,11)"/><text x="781.00" y="991.50">[..</text></g><g><title>webpki::verify_cert::build_chain (348 samples, 0.35%)</title><rect x="797" y="965" width="4" height="15" fill="rgb(234,117,19)"/><text x="800.00" y="975.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (347 samples, 0.35%)</title><rect x="797" y="949" width="4" height="15" fill="rgb(221,228,47)"/><text x="800.00" y="959.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h7d5a92fee08bd0a2 (347 samples, 0.35%)</title><rect x="797" y="933" width="4" height="15" fill="rgb(227,93,4)"/><text x="800.00" y="943.50"></text></g><g><title>webpki::verify_cert::build_chain (347 samples, 0.35%)</title><rect x="797" y="917" width="4" height="15" fill="rgb(223,150,52)"/><text x="800.00" y="927.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (347 samples, 0.35%)</title><rect x="797" y="901" width="4" height="15" fill="rgb(226,181,47)"/><text x="800.00" y="911.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h6844014f3662fae0 (347 samples, 0.35%)</title><rect x="797" y="885" width="4" height="15" fill="rgb(252,11,32)"/><text x="800.00" y="895.50"></text></g><g><title>webpki::verify_cert::check_signatures (347 samples, 0.35%)</title><rect x="797" y="869" width="4" height="15" fill="rgb(254,102,44)"/><text x="800.00" y="879.50"></text></g><g><title>webpki::signed_data::verify_signed_data (347 samples, 0.35%)</title><rect x="797" y="853" width="4" height="15" fill="rgb(210,202,34)"/><text x="800.00" y="863.50"></text></g><g><title>webpki::signed_data::verify_signature (347 samples, 0.35%)</title><rect x="797" y="837" width="4" height="15" fill="rgb(206,216,46)"/><text x="800.00" y="847.50"></text></g><g><title>ring::signature::verify (347 samples, 0.35%)</title><rect x="797" y="821" width="4" height="15" fill="rgb(249,57,50)"/><text x="800.00" y="831.50"></text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::Algorithm as ring::signature::VerificationAlgorithm&gt;::verify (347 samples, 0.35%)</title><rect x="797" y="805" width="4" height="15" fill="rgb(207,76,33)"/><text x="800.00" y="815.50"></text></g><g><title>ring::ec::suite_b::ops::p384::p384_point_mul_base_impl (173 samples, 0.18%)</title><rect x="799" y="789" width="2" height="15" fill="rgb(222,170,1)"/><text x="802.00" y="799.50"></text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul (173 samples, 0.18%)</title><rect x="799" y="773" width="2" height="15" fill="rgb(242,132,11)"/><text x="802.00" y="783.50"></text></g><g><title>GFp_nistz384_point_mul (173 samples, 0.18%)</title><rect x="799" y="757" width="2" height="15" fill="rgb(206,206,13)"/><text x="802.00" y="767.50"></text></g><g><title>add_precomputed_w5 (40 samples, 0.04%)</title><rect x="800" y="741" width="1" height="15" fill="rgb(220,125,40)"/><text x="803.00" y="751.50"></text></g><g><title>GFp_nistz384_point_add (40 samples, 0.04%)</title><rect x="800" y="725" width="1" height="15" fill="rgb(214,204,38)"/><text x="803.00" y="735.50"></text></g><g><title>elem_sqr_mont (13 samples, 0.01%)</title><rect x="801" y="709" width="0" height="15" fill="rgb(213,93,50)"/><text x="804.00" y="719.50"></text></g><g><title>elem_mul_mont (13 samples, 0.01%)</title><rect x="801" y="693" width="0" height="15" fill="rgb(248,83,6)"/><text x="804.00" y="703.50"></text></g><g><title>GFp_bn_mul_mont (13 samples, 0.01%)</title><rect x="801" y="677" width="0" height="15" fill="rgb(238,37,27)"/><text x="804.00" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (410 samples, 0.42%)</title><rect x="801" y="725" width="5" height="15" fill="rgb(229,147,35)"/><text x="804.00" y="735.50"></text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h556eb85796d41702 (406 samples, 0.41%)</title><rect x="801" y="709" width="5" height="15" fill="rgb(243,173,38)"/><text x="804.00" y="719.50"></text></g><g><title>e2d2::headers::mac::MacHeader::swap_addresses (401 samples, 0.41%)</title><rect x="801" y="693" width="5" height="15" fill="rgb(250,152,7)"/><text x="804.00" y="703.50"></text></g><g><title>e2d2::headers::mac::MacAddress::copy_address (401 samples, 0.41%)</title><rect x="801" y="677" width="5" height="15" fill="rgb(210,126,47)"/><text x="804.00" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (401 samples, 0.41%)</title><rect x="801" y="661" width="5" height="15" fill="rgb(212,57,8)"/><text x="804.00" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (401 samples, 0.41%)</title><rect x="801" y="645" width="5" height="15" fill="rgb(232,191,28)"/><text x="804.00" y="655.50"></text></g><g><title>_mm_add_epi16 (20 samples, 0.02%)</title><rect x="807" y="549" width="0" height="15" fill="rgb(205,65,50)"/><text x="810.00" y="559.50"></text></g><g><title>_mm_loadu_si128 (34 samples, 0.03%)</title><rect x="807" y="549" width="1" height="15" fill="rgb(228,50,18)"/><text x="810.00" y="559.50"></text></g><g><title>desc_to_olflags_v (15 samples, 0.02%)</title><rect x="808" y="549" width="0" height="15" fill="rgb(207,58,5)"/><text x="811.00" y="559.50"></text></g><g><title>desc_to_ptype_v (20 samples, 0.02%)</title><rect x="808" y="549" width="0" height="15" fill="rgb(223,50,39)"/><text x="811.00" y="559.50"></text></g><g><title>_mm_loadu_si128 (9 samples, 0.01%)</title><rect x="808" y="533" width="0" height="15" fill="rgb(224,144,25)"/><text x="811.00" y="543.50"></text></g><g><title>rte_mempool_get_bulk (15 samples, 0.02%)</title><rect x="808" y="533" width="1" height="15" fill="rgb(234,193,19)"/><text x="811.00" y="543.50"></text></g><g><title>rte_mempool_generic_get (15 samples, 0.02%)</title><rect x="808" y="517" width="1" height="15" fill="rgb(228,30,36)"/><text x="811.00" y="527.50"></text></g><g><title>__mempool_generic_get (15 samples, 0.02%)</title><rect x="808" y="501" width="1" height="15" fill="rgb(209,49,42)"/><text x="811.00" y="511.50"></text></g><g><title>rte_mempool_ops_dequeue_bulk (11 samples, 0.01%)</title><rect x="808" y="485" width="1" height="15" fill="rgb(213,27,22)"/><text x="811.00" y="495.50"></text></g><g><title>common_ring_mc_dequeue (10 samples, 0.01%)</title><rect x="808" y="469" width="1" height="15" fill="rgb(235,36,21)"/><text x="811.00" y="479.50"></text></g><g><title>i40e_rxq_rearm (37 samples, 0.04%)</title><rect x="808" y="549" width="1" height="15" fill="rgb(219,227,22)"/><text x="811.00" y="559.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (190 samples, 0.19%)</title><rect x="806" y="725" width="3" height="15" fill="rgb(207,77,39)"/><text x="809.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (190 samples, 0.19%)</title><rect x="806" y="709" width="3" height="15" fill="rgb(210,206,25)"/><text x="809.00" y="719.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (190 samples, 0.19%)</title><rect x="806" y="693" width="3" height="15" fill="rgb(238,186,39)"/><text x="809.00" y="703.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (190 samples, 0.19%)</title><rect x="806" y="677" width="3" height="15" fill="rgb(220,97,40)"/><text x="809.00" y="687.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (188 samples, 0.19%)</title><rect x="806" y="661" width="3" height="15" fill="rgb(242,87,37)"/><text x="809.00" y="671.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (188 samples, 0.19%)</title><rect x="806" y="645" width="3" height="15" fill="rgb(232,213,51)"/><text x="809.00" y="655.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (188 samples, 0.19%)</title><rect x="806" y="629" width="3" height="15" fill="rgb(246,18,20)"/><text x="809.00" y="639.50"></text></g><g><title>recv_pkts (185 samples, 0.19%)</title><rect x="806" y="613" width="3" height="15" fill="rgb(252,106,28)"/><text x="809.00" y="623.50"></text></g><g><title>rte_eth_rx_burst (185 samples, 0.19%)</title><rect x="806" y="597" width="3" height="15" fill="rgb(235,64,18)"/><text x="809.00" y="607.50"></text></g><g><title>i40e_recv_pkts_vec (178 samples, 0.18%)</title><rect x="806" y="581" width="3" height="15" fill="rgb(216,223,44)"/><text x="809.00" y="591.50"></text></g><g><title>_recv_raw_pkts_vec (178 samples, 0.18%)</title><rect x="806" y="565" width="3" height="15" fill="rgb(220,47,14)"/><text x="809.00" y="575.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (12 samples, 0.01%)</title><rect x="809" y="693" width="0" height="15" fill="rgb(231,27,22)"/><text x="812.00" y="703.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (12 samples, 0.01%)</title><rect x="809" y="677" width="0" height="15" fill="rgb(239,13,36)"/><text x="812.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (620 samples, 0.63%)</title><rect x="801" y="757" width="8" height="15" fill="rgb(241,208,31)"/><text x="804.00" y="767.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (620 samples, 0.63%)</title><rect x="801" y="741" width="8" height="15" fill="rgb(249,104,10)"/><text x="804.00" y="751.50"></text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (16 samples, 0.02%)</title><rect x="809" y="725" width="0" height="15" fill="rgb(213,138,37)"/><text x="812.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (16 samples, 0.02%)</title><rect x="809" y="709" width="0" height="15" fill="rgb(229,56,5)"/><text x="812.00" y="719.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::header_u8 (80 samples, 0.08%)</title><rect x="809" y="741" width="1" height="15" fill="rgb(208,70,19)"/><text x="812.00" y="751.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::save_header_and_offset (98 samples, 0.10%)</title><rect x="809" y="757" width="1" height="15" fill="rgb(237,144,31)"/><text x="812.00" y="767.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::update_ptrs (18 samples, 0.02%)</title><rect x="810" y="741" width="0" height="15" fill="rgb(235,99,2)"/><text x="813.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (13 samples, 0.01%)</title><rect x="810" y="725" width="0" height="15" fill="rgb(212,163,54)"/><text x="813.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (13 samples, 0.01%)</title><rect x="810" y="709" width="0" height="15" fill="rgb(239,77,20)"/><text x="813.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (13 samples, 0.01%)</title><rect x="810" y="693" width="0" height="15" fill="rgb(247,177,51)"/><text x="813.00" y="703.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (13 samples, 0.01%)</title><rect x="810" y="677" width="0" height="15" fill="rgb(235,98,31)"/><text x="813.00" y="687.50"></text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (19 samples, 0.02%)</title><rect x="810" y="757" width="0" height="15" fill="rgb(213,159,22)"/><text x="813.00" y="767.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (15 samples, 0.02%)</title><rect x="810" y="741" width="0" height="15" fill="rgb(235,149,9)"/><text x="813.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (797 samples, 0.81%)</title><rect x="801" y="773" width="10" height="15" fill="rgb(254,180,15)"/><text x="804.00" y="783.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscProducer::enqueue_one (42 samples, 0.04%)</title><rect x="810" y="757" width="1" height="15" fill="rgb(240,197,21)"/><text x="813.00" y="767.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::enqueue_mbufs (27 samples, 0.03%)</title><rect x="810" y="741" width="1" height="15" fill="rgb(211,33,36)"/><text x="813.00" y="751.50"></text></g><g><title>core::fmt::Arguments::new_v1 (10 samples, 0.01%)</title><rect x="812" y="645" width="0" height="15" fill="rgb(224,116,46)"/><text x="815.00" y="655.50"></text></g><g><title>e2d2::headers::tcp::TcpHeader::seq_num (26 samples, 0.03%)</title><rect x="813" y="645" width="0" height="15" fill="rgb(205,216,34)"/><text x="816.00" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (26 samples, 0.03%)</title><rect x="813" y="629" width="0" height="15" fill="rgb(221,53,39)"/><text x="816.00" y="639.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (26 samples, 0.03%)</title><rect x="813" y="613" width="0" height="15" fill="rgb(207,67,45)"/><text x="816.00" y="623.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::data_len (36 samples, 0.04%)</title><rect x="813" y="613" width="0" height="15" fill="rgb(222,153,42)"/><text x="816.00" y="623.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::get_payload (58 samples, 0.06%)</title><rect x="813" y="645" width="1" height="15" fill="rgb(231,28,19)"/><text x="816.00" y="655.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::payload_size (58 samples, 0.06%)</title><rect x="813" y="629" width="1" height="15" fill="rgb(245,207,34)"/><text x="816.00" y="639.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::fast_path_insert (29 samples, 0.03%)</title><rect x="814" y="629" width="0" height="15" fill="rgb(223,214,11)"/><text x="817.00" y="639.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::write_at_tail (29 samples, 0.03%)</title><rect x="814" y="613" width="0" height="15" fill="rgb(247,190,43)"/><text x="817.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_write (25 samples, 0.03%)</title><rect x="814" y="597" width="0" height="15" fill="rgb(251,225,29)"/><text x="817.00" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut [u8]&gt;::write (22 samples, 0.02%)</title><rect x="814" y="581" width="0" height="15" fill="rgb(247,180,44)"/><text x="817.00" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (22 samples, 0.02%)</title><rect x="814" y="565" width="0" height="15" fill="rgb(251,139,3)"/><text x="817.00" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="814" y="549" width="0" height="15" fill="rgb(233,197,31)"/><text x="817.00" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.02%)</title><rect x="814" y="533" width="0" height="15" fill="rgb(247,53,44)"/><text x="817.00" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,959 samples, 1.99%)</title><rect x="858" y="581" width="24" height="15" fill="rgb(244,116,53)"/><text x="861.00" y="591.50">&lt;..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,959 samples, 1.99%)</title><rect x="858" y="565" width="24" height="15" fill="rgb(228,92,49)"/><text x="861.00" y="575.50">c..</text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1,959 samples, 1.99%)</title><rect x="858" y="549" width="24" height="15" fill="rgb(211,228,49)"/><text x="861.00" y="559.50">&lt;..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::SegmentList::insert_segment (5,661 samples, 5.74%)</title><rect x="814" y="613" width="68" height="15" fill="rgb(230,106,51)"/><text x="817.00" y="623.50">e2d2::s..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::SegmentList::merge_at_idx (5,659 samples, 5.74%)</title><rect x="814" y="597" width="68" height="15" fill="rgb(217,10,31)"/><text x="817.00" y="607.50">e2d2::s..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::out_of_order_insert (5,676 samples, 5.76%)</title><rect x="814" y="629" width="68" height="15" fill="rgb(215,93,29)"/><text x="817.00" y="639.50">e2d2::s..</text></g><g><title>e2d2::state::ring_buffer::RingBuffer::write_at_offset_from_tail (12 samples, 0.01%)</title><rect x="882" y="613" width="0" height="15" fill="rgb(248,36,19)"/><text x="885.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_write (11 samples, 0.01%)</title><rect x="882" y="597" width="0" height="15" fill="rgb(221,111,20)"/><text x="885.00" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut [u8]&gt;::write (10 samples, 0.01%)</title><rect x="882" y="581" width="0" height="15" fill="rgb(245,112,11)"/><text x="885.00" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (10 samples, 0.01%)</title><rect x="882" y="565" width="0" height="15" fill="rgb(233,229,26)"/><text x="885.00" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="882" y="549" width="0" height="15" fill="rgb(208,198,46)"/><text x="885.00" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.01%)</title><rect x="882" y="533" width="0" height="15" fill="rgb(232,206,44)"/><text x="885.00" y="543.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::add_data (5,729 samples, 5.81%)</title><rect x="814" y="645" width="68" height="15" fill="rgb(215,3,20)"/><text x="817.00" y="655.50">e2d2::s..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::slow_path_insert (18 samples, 0.02%)</title><rect x="882" y="629" width="0" height="15" fill="rgb(214,91,27)"/><text x="885.00" y="639.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::out_of_order_insert (12 samples, 0.01%)</title><rect x="882" y="613" width="0" height="15" fill="rgb(215,167,2)"/><text x="885.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::write_at_offset_from_tail (10 samples, 0.01%)</title><rect x="882" y="597" width="0" height="15" fill="rgb(237,175,36)"/><text x="885.00" y="607.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_write (10 samples, 0.01%)</title><rect x="882" y="581" width="0" height="15" fill="rgb(235,175,5)"/><text x="885.00" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut [u8]&gt;::write (10 samples, 0.01%)</title><rect x="882" y="565" width="0" height="15" fill="rgb(251,158,38)"/><text x="885.00" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (10 samples, 0.01%)</title><rect x="882" y="549" width="0" height="15" fill="rgb(207,38,9)"/><text x="885.00" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="882" y="533" width="0" height="15" fill="rgb(239,155,14)"/><text x="885.00" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.01%)</title><rect x="882" y="517" width="0" height="15" fill="rgb(221,64,1)"/><text x="885.00" y="527.50"></text></g><g><title>_int_malloc (14 samples, 0.01%)</title><rect x="882" y="405" width="0" height="15" fill="rgb(239,18,39)"/><text x="885.00" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (19 samples, 0.02%)</title><rect x="882" y="533" width="0" height="15" fill="rgb(241,151,6)"/><text x="885.00" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="882" y="517" width="0" height="15" fill="rgb(213,111,40)"/><text x="885.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (19 samples, 0.02%)</title><rect x="882" y="501" width="0" height="15" fill="rgb(234,165,0)"/><text x="885.00" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (19 samples, 0.02%)</title><rect x="882" y="485" width="0" height="15" fill="rgb(207,213,3)"/><text x="885.00" y="495.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="882" y="469" width="0" height="15" fill="rgb(205,16,29)"/><text x="885.00" y="479.50"></text></g><g><title>__rdl_alloc (19 samples, 0.02%)</title><rect x="882" y="453" width="0" height="15" fill="rgb(222,90,51)"/><text x="885.00" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.02%)</title><rect x="882" y="437" width="0" height="15" fill="rgb(232,66,48)"/><text x="885.00" y="447.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.02%)</title><rect x="882" y="421" width="0" height="15" fill="rgb(225,75,35)"/><text x="885.00" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.02%)</title><rect x="882" y="517" width="1" height="15" fill="rgb(241,11,50)"/><text x="885.00" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (23 samples, 0.02%)</title><rect x="882" y="501" width="1" height="15" fill="rgb(216,121,19)"/><text x="885.00" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (23 samples, 0.02%)</title><rect x="882" y="485" width="1" height="15" fill="rgb(214,85,10)"/><text x="885.00" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::_$u7b$$u7b$closure$u7d$$u7d$::hb5bc9d6f7857d54f (23 samples, 0.02%)</title><rect x="882" y="469" width="1" height="15" fill="rgb(207,20,46)"/><text x="885.00" y="479.50"></text></g><g><title>_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::_$u7b$$u7b$closure$u7d$$u7d$::h35451921c9c52909 (23 samples, 0.02%)</title><rect x="882" y="453" width="1" height="15" fill="rgb(253,135,44)"/><text x="885.00" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::_$u7b$$u7b$closure$u7d$$u7d$::h27e6d60b27e9e0ec (23 samples, 0.02%)</title><rect x="882" y="437" width="1" height="15" fill="rgb(235,192,45)"/><text x="885.00" y="447.50"></text></g><g><title>_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$T$C$I$GT$$GT$::spec_extend::_$u7b$$u7b$closure$u7d$$u7d$::had323fd0df070fea (23 samples, 0.02%)</title><rect x="882" y="421" width="1" height="15" fill="rgb(220,112,2)"/><text x="885.00" y="431.50"></text></g><g><title>core::ptr::write (23 samples, 0.02%)</title><rect x="882" y="405" width="1" height="15" fill="rgb(245,178,27)"/><text x="885.00" y="415.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::SegmentList::new (47 samples, 0.05%)</title><rect x="882" y="613" width="1" height="15" fill="rgb(207,128,33)"/><text x="885.00" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (47 samples, 0.05%)</title><rect x="882" y="597" width="1" height="15" fill="rgb(229,185,16)"/><text x="885.00" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (47 samples, 0.05%)</title><rect x="882" y="581" width="1" height="15" fill="rgb(235,47,25)"/><text x="885.00" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (47 samples, 0.05%)</title><rect x="882" y="565" width="1" height="15" fill="rgb(219,65,20)"/><text x="885.00" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (47 samples, 0.05%)</title><rect x="882" y="549" width="1" height="15" fill="rgb(235,182,10)"/><text x="885.00" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (28 samples, 0.03%)</title><rect x="882" y="533" width="1" height="15" fill="rgb(212,199,46)"/><text x="885.00" y="543.50"></text></g><g><title>__memset_avx2_erms (24 samples, 0.02%)</title><rect x="883" y="453" width="0" height="15" fill="rgb(243,157,34)"/><text x="886.00" y="463.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::new (99 samples, 0.10%)</title><rect x="882" y="645" width="1" height="15" fill="rgb(222,124,12)"/><text x="885.00" y="655.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::new_with_segments (99 samples, 0.10%)</title><rect x="882" y="629" width="1" height="15" fill="rgb(207,72,18)"/><text x="885.00" y="639.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::new (52 samples, 0.05%)</title><rect x="883" y="613" width="0" height="15" fill="rgb(208,4,35)"/><text x="886.00" y="623.50"></text></g><g><title>alloc::vec::from_elem (52 samples, 0.05%)</title><rect x="883" y="597" width="0" height="15" fill="rgb(223,160,35)"/><text x="886.00" y="607.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (52 samples, 0.05%)</title><rect x="883" y="581" width="0" height="15" fill="rgb(219,206,51)"/><text x="886.00" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (52 samples, 0.05%)</title><rect x="883" y="565" width="0" height="15" fill="rgb(238,115,33)"/><text x="886.00" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (52 samples, 0.05%)</title><rect x="883" y="549" width="0" height="15" fill="rgb(232,226,22)"/><text x="886.00" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc_zeroed (52 samples, 0.05%)</title><rect x="883" y="533" width="0" height="15" fill="rgb(240,201,18)"/><text x="886.00" y="543.50"></text></g><g><title>alloc::alloc::alloc_zeroed (52 samples, 0.05%)</title><rect x="883" y="517" width="0" height="15" fill="rgb(234,81,20)"/><text x="886.00" y="527.50"></text></g><g><title>__rdl_alloc_zeroed (52 samples, 0.05%)</title><rect x="883" y="501" width="0" height="15" fill="rgb(244,94,8)"/><text x="886.00" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (52 samples, 0.05%)</title><rect x="883" y="485" width="0" height="15" fill="rgb(226,22,8)"/><text x="886.00" y="495.50"></text></g><g><title>__libc_calloc (52 samples, 0.05%)</title><rect x="883" y="469" width="0" height="15" fill="rgb(216,66,20)"/><text x="886.00" y="479.50"></text></g><g><title>_int_malloc (20 samples, 0.02%)</title><rect x="883" y="453" width="0" height="15" fill="rgb(249,70,22)"/><text x="886.00" y="463.50"></text></g><g><title>malloc_consolidate (10 samples, 0.01%)</title><rect x="883" y="437" width="0" height="15" fill="rgb(209,51,8)"/><text x="886.00" y="447.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::seq (24 samples, 0.02%)</title><rect x="883" y="645" width="1" height="15" fill="rgb(244,139,14)"/><text x="886.00" y="655.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::fast_path_insert (24 samples, 0.02%)</title><rect x="883" y="629" width="1" height="15" fill="rgb(225,75,46)"/><text x="886.00" y="639.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::write_at_tail (23 samples, 0.02%)</title><rect x="883" y="613" width="1" height="15" fill="rgb(223,29,2)"/><text x="886.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_write (22 samples, 0.02%)</title><rect x="883" y="597" width="1" height="15" fill="rgb(240,80,3)"/><text x="886.00" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut [u8]&gt;::write (22 samples, 0.02%)</title><rect x="883" y="581" width="1" height="15" fill="rgb(225,129,8)"/><text x="886.00" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (22 samples, 0.02%)</title><rect x="883" y="565" width="1" height="15" fill="rgb(247,124,6)"/><text x="886.00" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="883" y="549" width="1" height="15" fill="rgb(244,143,42)"/><text x="886.00" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.02%)</title><rect x="883" y="533" width="1" height="15" fill="rgb(238,220,30)"/><text x="886.00" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="884" y="597" width="0" height="15" fill="rgb(212,94,47)"/><text x="887.00" y="607.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.01%)</title><rect x="884" y="581" width="0" height="15" fill="rgb(229,114,34)"/><text x="887.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (9 samples, 0.01%)</title><rect x="884" y="565" width="0" height="15" fill="rgb(210,226,26)"/><text x="887.00" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="884" y="549" width="0" height="15" fill="rgb(221,54,51)"/><text x="887.00" y="559.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.01%)</title><rect x="884" y="533" width="0" height="15" fill="rgb(228,72,21)"/><text x="887.00" y="543.50"></text></g><g><title>core::ptr::real_drop_in_place (11 samples, 0.01%)</title><rect x="884" y="517" width="0" height="15" fill="rgb(243,63,44)"/><text x="887.00" y="527.50"></text></g><g><title>core::ptr::real_drop_in_place (28 samples, 0.03%)</title><rect x="884" y="629" width="0" height="15" fill="rgb(208,16,17)"/><text x="887.00" y="639.50"></text></g><g><title>core::ptr::real_drop_in_place (28 samples, 0.03%)</title><rect x="884" y="613" width="0" height="15" fill="rgb(219,79,53)"/><text x="887.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (19 samples, 0.02%)</title><rect x="884" y="597" width="0" height="15" fill="rgb(213,156,4)"/><text x="887.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (14 samples, 0.01%)</title><rect x="884" y="581" width="0" height="15" fill="rgb(243,194,8)"/><text x="887.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (13 samples, 0.01%)</title><rect x="884" y="565" width="0" height="15" fill="rgb(249,131,1)"/><text x="887.00" y="575.50"></text></g><g><title>&lt;rustls::msgs::enums::CipherSuite as rustls::msgs::codec::Codec&gt;::read (17 samples, 0.02%)</title><rect x="885" y="533" width="0" height="15" fill="rgb(208,159,21)"/><text x="888.00" y="543.50"></text></g><g><title>&lt;rustls::msgs::enums::ExtensionType as rustls::msgs::codec::Codec&gt;::read (9 samples, 0.01%)</title><rect x="885" y="517" width="0" height="15" fill="rgb(225,127,10)"/><text x="888.00" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (15 samples, 0.02%)</title><rect x="885" y="421" width="0" height="15" fill="rgb(218,93,19)"/><text x="888.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.02%)</title><rect x="885" y="405" width="0" height="15" fill="rgb(231,171,37)"/><text x="888.00" y="415.50"></text></g><g><title>__rdl_realloc (15 samples, 0.02%)</title><rect x="885" y="389" width="0" height="15" fill="rgb(229,109,16)"/><text x="888.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (15 samples, 0.02%)</title><rect x="885" y="373" width="0" height="15" fill="rgb(213,213,15)"/><text x="888.00" y="383.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.02%)</title><rect x="885" y="357" width="0" height="15" fill="rgb(226,80,9)"/><text x="888.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (16 samples, 0.02%)</title><rect x="885" y="485" width="1" height="15" fill="rgb(232,34,27)"/><text x="888.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (16 samples, 0.02%)</title><rect x="885" y="469" width="1" height="15" fill="rgb(209,177,39)"/><text x="888.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.02%)</title><rect x="885" y="453" width="1" height="15" fill="rgb(245,146,38)"/><text x="888.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (16 samples, 0.02%)</title><rect x="885" y="437" width="1" height="15" fill="rgb(216,40,9)"/><text x="888.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ECPointFormat&gt;&gt;::read (20 samples, 0.02%)</title><rect x="885" y="517" width="1" height="15" fill="rgb(235,116,26)"/><text x="888.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (20 samples, 0.02%)</title><rect x="885" y="501" width="1" height="15" fill="rgb(244,72,15)"/><text x="888.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (21 samples, 0.02%)</title><rect x="886" y="469" width="0" height="15" fill="rgb(215,53,37)"/><text x="889.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="886" y="453" width="0" height="15" fill="rgb(224,149,0)"/><text x="889.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (21 samples, 0.02%)</title><rect x="886" y="437" width="0" height="15" fill="rgb(251,161,6)"/><text x="889.00" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (17 samples, 0.02%)</title><rect x="886" y="421" width="0" height="15" fill="rgb(245,174,29)"/><text x="889.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.02%)</title><rect x="886" y="405" width="0" height="15" fill="rgb(238,44,48)"/><text x="889.00" y="415.50"></text></g><g><title>__rdl_realloc (17 samples, 0.02%)</title><rect x="886" y="389" width="0" height="15" fill="rgb(242,140,9)"/><text x="889.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (17 samples, 0.02%)</title><rect x="886" y="373" width="0" height="15" fill="rgb(205,191,26)"/><text x="889.00" y="383.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.02%)</title><rect x="886" y="357" width="0" height="15" fill="rgb(241,31,40)"/><text x="889.00" y="367.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::NamedGroup&gt;&gt;::read (25 samples, 0.03%)</title><rect x="886" y="517" width="0" height="15" fill="rgb(243,193,13)"/><text x="889.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (25 samples, 0.03%)</title><rect x="886" y="501" width="0" height="15" fill="rgb(222,92,0)"/><text x="889.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (24 samples, 0.02%)</title><rect x="886" y="485" width="0" height="15" fill="rgb(205,173,20)"/><text x="889.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ProtocolVersion&gt;&gt;::read (10 samples, 0.01%)</title><rect x="886" y="517" width="0" height="15" fill="rgb(208,52,31)"/><text x="889.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (10 samples, 0.01%)</title><rect x="886" y="501" width="0" height="15" fill="rgb(227,153,14)"/><text x="889.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (9 samples, 0.01%)</title><rect x="886" y="485" width="0" height="15" fill="rgb(248,220,6)"/><text x="889.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (9 samples, 0.01%)</title><rect x="886" y="469" width="0" height="15" fill="rgb(227,154,25)"/><text x="889.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="886" y="453" width="0" height="15" fill="rgb(214,96,48)"/><text x="889.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (9 samples, 0.01%)</title><rect x="886" y="437" width="0" height="15" fill="rgb(228,113,31)"/><text x="889.00" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (45 samples, 0.05%)</title><rect x="886" y="421" width="1" height="15" fill="rgb(225,218,46)"/><text x="889.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (45 samples, 0.05%)</title><rect x="886" y="405" width="1" height="15" fill="rgb(248,126,3)"/><text x="889.00" y="415.50"></text></g><g><title>__rdl_realloc (45 samples, 0.05%)</title><rect x="886" y="389" width="1" height="15" fill="rgb(241,91,25)"/><text x="889.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (45 samples, 0.05%)</title><rect x="886" y="373" width="1" height="15" fill="rgb(225,223,52)"/><text x="889.00" y="383.50"></text></g><g><title>__GI___libc_realloc (45 samples, 0.05%)</title><rect x="886" y="357" width="1" height="15" fill="rgb(221,195,6)"/><text x="889.00" y="367.50"></text></g><g><title>_int_realloc (28 samples, 0.03%)</title><rect x="886" y="341" width="1" height="15" fill="rgb(245,4,44)"/><text x="889.00" y="351.50"></text></g><g><title>_int_malloc (12 samples, 0.01%)</title><rect x="887" y="325" width="0" height="15" fill="rgb(238,119,37)"/><text x="890.00" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (53 samples, 0.05%)</title><rect x="886" y="469" width="1" height="15" fill="rgb(248,138,48)"/><text x="889.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (53 samples, 0.05%)</title><rect x="886" y="453" width="1" height="15" fill="rgb(218,165,7)"/><text x="889.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (53 samples, 0.05%)</title><rect x="886" y="437" width="1" height="15" fill="rgb(215,162,14)"/><text x="889.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::SignatureScheme&gt;&gt;::read (73 samples, 0.07%)</title><rect x="886" y="517" width="1" height="15" fill="rgb(219,158,49)"/><text x="889.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (72 samples, 0.07%)</title><rect x="886" y="501" width="1" height="15" fill="rgb(228,8,4)"/><text x="889.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (60 samples, 0.06%)</title><rect x="886" y="485" width="1" height="15" fill="rgb(208,91,9)"/><text x="889.00" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (11 samples, 0.01%)</title><rect x="887" y="453" width="0" height="15" fill="rgb(230,13,46)"/><text x="890.00" y="463.50"></text></g><g><title>&lt;webpki::name::DNSName as core::convert::From&lt;webpki::name::DNSNameRef&gt;&gt;::from (11 samples, 0.01%)</title><rect x="887" y="437" width="0" height="15" fill="rgb(254,72,3)"/><text x="890.00" y="447.50"></text></g><g><title>webpki::name::DNSNameRef::to_owned (11 samples, 0.01%)</title><rect x="887" y="421" width="0" height="15" fill="rgb(235,27,50)"/><text x="890.00" y="431.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerName as rustls::msgs::codec::Codec&gt;::read (17 samples, 0.02%)</title><rect x="887" y="485" width="0" height="15" fill="rgb(234,156,3)"/><text x="890.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::ServerNamePayload::read_hostname (17 samples, 0.02%)</title><rect x="887" y="469" width="0" height="15" fill="rgb(242,1,52)"/><text x="890.00" y="479.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientExtension as rustls::msgs::codec::Codec&gt;::read (190 samples, 0.19%)</title><rect x="885" y="533" width="2" height="15" fill="rgb(243,161,45)"/><text x="888.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::handshake::ServerName&gt;&gt;::read (20 samples, 0.02%)</title><rect x="887" y="517" width="0" height="15" fill="rgb(216,188,29)"/><text x="890.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (20 samples, 0.02%)</title><rect x="887" y="501" width="0" height="15" fill="rgb(220,39,43)"/><text x="890.00" y="511.50"></text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="888" y="373" width="0" height="15" fill="rgb(218,3,45)"/><text x="891.00" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (113 samples, 0.11%)</title><rect x="887" y="469" width="2" height="15" fill="rgb(247,214,47)"/><text x="890.00" y="479.50"></text></g><g><title>alloc::alloc::realloc (113 samples, 0.11%)</title><rect x="887" y="453" width="2" height="15" fill="rgb(252,44,50)"/><text x="890.00" y="463.50"></text></g><g><title>__rdl_realloc (113 samples, 0.11%)</title><rect x="887" y="437" width="2" height="15" fill="rgb(221,200,21)"/><text x="890.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (113 samples, 0.11%)</title><rect x="887" y="421" width="2" height="15" fill="rgb(243,51,26)"/><text x="890.00" y="431.50"></text></g><g><title>__GI___libc_realloc (112 samples, 0.11%)</title><rect x="887" y="405" width="2" height="15" fill="rgb(238,34,52)"/><text x="890.00" y="415.50"></text></g><g><title>_int_realloc (79 samples, 0.08%)</title><rect x="888" y="389" width="1" height="15" fill="rgb(251,147,31)"/><text x="891.00" y="399.50"></text></g><g><title>_int_malloc (50 samples, 0.05%)</title><rect x="888" y="373" width="1" height="15" fill="rgb(237,26,23)"/><text x="891.00" y="383.50"></text></g><g><title>malloc_consolidate (18 samples, 0.02%)</title><rect x="888" y="357" width="1" height="15" fill="rgb(254,40,4)"/><text x="891.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (119 samples, 0.12%)</title><rect x="887" y="517" width="2" height="15" fill="rgb(224,222,9)"/><text x="890.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (119 samples, 0.12%)</title><rect x="887" y="501" width="2" height="15" fill="rgb(254,46,15)"/><text x="890.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (119 samples, 0.12%)</title><rect x="887" y="485" width="2" height="15" fill="rgb(211,165,43)"/><text x="890.00" y="495.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (350 samples, 0.35%)</title><rect x="885" y="549" width="4" height="15" fill="rgb(214,14,25)"/><text x="888.00" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (129 samples, 0.13%)</title><rect x="887" y="533" width="2" height="15" fill="rgb(234,91,30)"/><text x="890.00" y="543.50"></text></g><g><title>core::ptr::write (9 samples, 0.01%)</title><rect x="889" y="517" width="0" height="15" fill="rgb(216,203,26)"/><text x="892.00" y="527.50"></text></g><g><title>pvn_tls::utils::on_frame (385 samples, 0.39%)</title><rect x="884" y="629" width="5" height="15" fill="rgb(242,81,28)"/><text x="887.00" y="639.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (377 samples, 0.38%)</title><rect x="884" y="613" width="5" height="15" fill="rgb(237,27,42)"/><text x="887.00" y="623.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (375 samples, 0.38%)</title><rect x="884" y="597" width="5" height="15" fill="rgb(244,170,53)"/><text x="887.00" y="607.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (370 samples, 0.38%)</title><rect x="884" y="581" width="5" height="15" fill="rgb(217,132,14)"/><text x="887.00" y="591.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (358 samples, 0.36%)</title><rect x="884" y="565" width="5" height="15" fill="rgb(218,27,49)"/><text x="887.00" y="575.50"></text></g><g><title>pvn_tls::utils::get_server_name (430 samples, 0.44%)</title><rect x="884" y="645" width="5" height="15" fill="rgb(214,151,30)"/><text x="887.00" y="655.50"></text></g><g><title>__GI___libc_free (10 samples, 0.01%)</title><rect x="889" y="533" width="0" height="15" fill="rgb(252,178,18)"/><text x="892.00" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="889" y="581" width="0" height="15" fill="rgb(205,99,5)"/><text x="892.00" y="591.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.02%)</title><rect x="889" y="565" width="0" height="15" fill="rgb(246,136,15)"/><text x="892.00" y="575.50"></text></g><g><title>core::ptr::real_drop_in_place (17 samples, 0.02%)</title><rect x="889" y="549" width="0" height="15" fill="rgb(243,129,18)"/><text x="892.00" y="559.50"></text></g><g><title>__GI___libc_free (9 samples, 0.01%)</title><rect x="889" y="501" width="0" height="15" fill="rgb(245,52,36)"/><text x="892.00" y="511.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="889" y="485" width="0" height="15" fill="rgb(227,139,20)"/><text x="892.00" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="889" y="549" width="1" height="15" fill="rgb(216,31,11)"/><text x="892.00" y="559.50"></text></g><g><title>core::ptr::drop_in_place (19 samples, 0.02%)</title><rect x="889" y="533" width="1" height="15" fill="rgb(210,148,18)"/><text x="892.00" y="543.50"></text></g><g><title>core::ptr::real_drop_in_place (19 samples, 0.02%)</title><rect x="889" y="517" width="1" height="15" fill="rgb(223,144,49)"/><text x="892.00" y="527.50"></text></g><g><title>core::ptr::real_drop_in_place (10 samples, 0.01%)</title><rect x="889" y="501" width="1" height="15" fill="rgb(215,15,16)"/><text x="892.00" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="890" y="533" width="0" height="15" fill="rgb(252,174,53)"/><text x="893.00" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (10 samples, 0.01%)</title><rect x="890" y="517" width="0" height="15" fill="rgb(247,36,15)"/><text x="893.00" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (10 samples, 0.01%)</title><rect x="890" y="501" width="0" height="15" fill="rgb(238,30,21)"/><text x="893.00" y="511.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.01%)</title><rect x="890" y="485" width="0" height="15" fill="rgb(211,103,2)"/><text x="893.00" y="495.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.01%)</title><rect x="890" y="469" width="0" height="15" fill="rgb(233,60,44)"/><text x="893.00" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.01%)</title><rect x="890" y="453" width="0" height="15" fill="rgb(236,155,34)"/><text x="893.00" y="463.50"></text></g><g><title>__GI___libc_free (10 samples, 0.01%)</title><rect x="890" y="437" width="0" height="15" fill="rgb(233,118,41)"/><text x="893.00" y="447.50"></text></g><g><title>_int_free (10 samples, 0.01%)</title><rect x="890" y="421" width="0" height="15" fill="rgb(239,203,39)"/><text x="893.00" y="431.50"></text></g><g><title>core::ptr::real_drop_in_place (66 samples, 0.07%)</title><rect x="889" y="629" width="1" height="15" fill="rgb(238,104,29)"/><text x="892.00" y="639.50"></text></g><g><title>core::ptr::real_drop_in_place (63 samples, 0.06%)</title><rect x="889" y="613" width="1" height="15" fill="rgb(212,220,23)"/><text x="892.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (61 samples, 0.06%)</title><rect x="889" y="597" width="1" height="15" fill="rgb(215,100,5)"/><text x="892.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (40 samples, 0.04%)</title><rect x="889" y="581" width="1" height="15" fill="rgb(214,140,49)"/><text x="892.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (31 samples, 0.03%)</title><rect x="889" y="565" width="1" height="15" fill="rgb(229,4,5)"/><text x="892.00" y="575.50"></text></g><g><title>core::ptr::real_drop_in_place (11 samples, 0.01%)</title><rect x="890" y="549" width="0" height="15" fill="rgb(244,85,21)"/><text x="893.00" y="559.50"></text></g><g><title>core::ptr::real_drop_in_place (9 samples, 0.01%)</title><rect x="890" y="613" width="0" height="15" fill="rgb(224,204,6)"/><text x="893.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (9 samples, 0.01%)</title><rect x="890" y="597" width="0" height="15" fill="rgb(214,113,38)"/><text x="893.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (9 samples, 0.01%)</title><rect x="890" y="581" width="0" height="15" fill="rgb(236,173,11)"/><text x="893.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (9 samples, 0.01%)</title><rect x="890" y="565" width="0" height="15" fill="rgb(248,155,1)"/><text x="893.00" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="890" y="549" width="0" height="15" fill="rgb(219,43,1)"/><text x="893.00" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (9 samples, 0.01%)</title><rect x="890" y="533" width="0" height="15" fill="rgb(242,12,50)"/><text x="893.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (39 samples, 0.04%)</title><rect x="890" y="533" width="1" height="15" fill="rgb(241,140,5)"/><text x="893.00" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (39 samples, 0.04%)</title><rect x="890" y="517" width="1" height="15" fill="rgb(239,150,10)"/><text x="893.00" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (39 samples, 0.04%)</title><rect x="890" y="501" width="1" height="15" fill="rgb(244,193,54)"/><text x="893.00" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.04%)</title><rect x="890" y="485" width="1" height="15" fill="rgb(235,57,46)"/><text x="893.00" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (38 samples, 0.04%)</title><rect x="890" y="469" width="1" height="15" fill="rgb(228,18,26)"/><text x="893.00" y="479.50"></text></g><g><title>_int_malloc (19 samples, 0.02%)</title><rect x="891" y="405" width="0" height="15" fill="rgb(212,221,5)"/><text x="894.00" y="415.50"></text></g><g><title>&lt;rustls::msgs::base::Payload as rustls::msgs::codec::Codec&gt;::read (82 samples, 0.08%)</title><rect x="890" y="581" width="1" height="15" fill="rgb(207,63,47)"/><text x="893.00" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (82 samples, 0.08%)</title><rect x="890" y="565" width="1" height="15" fill="rgb(219,148,41)"/><text x="893.00" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (82 samples, 0.08%)</title><rect x="890" y="549" width="1" height="15" fill="rgb(208,178,3)"/><text x="893.00" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43 samples, 0.04%)</title><rect x="891" y="533" width="0" height="15" fill="rgb(233,72,16)"/><text x="894.00" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (43 samples, 0.04%)</title><rect x="891" y="517" width="0" height="15" fill="rgb(251,95,51)"/><text x="894.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.04%)</title><rect x="891" y="501" width="0" height="15" fill="rgb(250,162,12)"/><text x="894.00" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (43 samples, 0.04%)</title><rect x="891" y="485" width="0" height="15" fill="rgb(235,132,37)"/><text x="894.00" y="495.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.04%)</title><rect x="891" y="469" width="0" height="15" fill="rgb(228,216,35)"/><text x="894.00" y="479.50"></text></g><g><title>__rdl_alloc (43 samples, 0.04%)</title><rect x="891" y="453" width="0" height="15" fill="rgb(223,69,0)"/><text x="894.00" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (43 samples, 0.04%)</title><rect x="891" y="437" width="0" height="15" fill="rgb(247,166,14)"/><text x="894.00" y="447.50"></text></g><g><title>__GI___libc_malloc (43 samples, 0.04%)</title><rect x="891" y="421" width="0" height="15" fill="rgb(242,142,29)"/><text x="894.00" y="431.50"></text></g><g><title>rustls::msgs::codec::Codec::read_bytes (115 samples, 0.12%)</title><rect x="890" y="613" width="2" height="15" fill="rgb(226,76,26)"/><text x="893.00" y="623.50"></text></g><g><title>&lt;rustls::msgs::message::Message as rustls::msgs::codec::Codec&gt;::read (113 samples, 0.11%)</title><rect x="890" y="597" width="2" height="15" fill="rgb(210,182,18)"/><text x="893.00" y="607.50"></text></g><g><title>&lt;rustls::msgs::enums::CipherSuite as rustls::msgs::codec::Codec&gt;::read (40 samples, 0.04%)</title><rect x="892" y="533" width="1" height="15" fill="rgb(230,66,23)"/><text x="895.00" y="543.50"></text></g><g><title>&lt;u16 as rustls::msgs::codec::Codec&gt;::read (9 samples, 0.01%)</title><rect x="893" y="517" width="0" height="15" fill="rgb(206,118,0)"/><text x="896.00" y="527.50"></text></g><g><title>&lt;rustls::msgs::enums::ExtensionType as rustls::msgs::codec::Codec&gt;::read (19 samples, 0.02%)</title><rect x="893" y="517" width="0" height="15" fill="rgb(219,77,45)"/><text x="896.00" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (21 samples, 0.02%)</title><rect x="894" y="421" width="0" height="15" fill="rgb(237,207,34)"/><text x="897.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.02%)</title><rect x="894" y="405" width="0" height="15" fill="rgb(219,150,15)"/><text x="897.00" y="415.50"></text></g><g><title>__rdl_realloc (21 samples, 0.02%)</title><rect x="894" y="389" width="0" height="15" fill="rgb(232,126,11)"/><text x="897.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (21 samples, 0.02%)</title><rect x="894" y="373" width="0" height="15" fill="rgb(229,150,29)"/><text x="897.00" y="383.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.02%)</title><rect x="894" y="357" width="0" height="15" fill="rgb(243,108,39)"/><text x="897.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (29 samples, 0.03%)</title><rect x="894" y="469" width="0" height="15" fill="rgb(249,31,54)"/><text x="897.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (29 samples, 0.03%)</title><rect x="894" y="453" width="0" height="15" fill="rgb(224,229,50)"/><text x="897.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (29 samples, 0.03%)</title><rect x="894" y="437" width="0" height="15" fill="rgb(211,158,43)"/><text x="897.00" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (33 samples, 0.03%)</title><rect x="894" y="485" width="0" height="15" fill="rgb(221,95,13)"/><text x="897.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::NamedGroup&gt;&gt;::read (38 samples, 0.04%)</title><rect x="894" y="517" width="0" height="15" fill="rgb(248,96,18)"/><text x="897.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (38 samples, 0.04%)</title><rect x="894" y="501" width="0" height="15" fill="rgb(227,131,37)"/><text x="897.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (9 samples, 0.01%)</title><rect x="894" y="469" width="0" height="15" fill="rgb(234,173,48)"/><text x="897.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="894" y="453" width="0" height="15" fill="rgb(252,53,46)"/><text x="897.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (9 samples, 0.01%)</title><rect x="894" y="437" width="0" height="15" fill="rgb(234,151,34)"/><text x="897.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ProtocolVersion&gt;&gt;::read (14 samples, 0.01%)</title><rect x="894" y="517" width="0" height="15" fill="rgb(223,2,20)"/><text x="897.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (14 samples, 0.01%)</title><rect x="894" y="501" width="0" height="15" fill="rgb(216,5,0)"/><text x="897.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (10 samples, 0.01%)</title><rect x="894" y="485" width="0" height="15" fill="rgb(247,145,12)"/><text x="897.00" y="495.50"></text></g><g><title>&lt;rustls::msgs::enums::SignatureScheme as rustls::msgs::codec::Codec&gt;::read (23 samples, 0.02%)</title><rect x="894" y="485" width="1" height="15" fill="rgb(218,8,13)"/><text x="897.00" y="495.50"></text></g><g><title>&lt;u16 as rustls::msgs::codec::Codec&gt;::read (9 samples, 0.01%)</title><rect x="894" y="469" width="1" height="15" fill="rgb(250,137,3)"/><text x="897.00" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (66 samples, 0.07%)</title><rect x="895" y="421" width="0" height="15" fill="rgb(220,31,8)"/><text x="898.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (66 samples, 0.07%)</title><rect x="895" y="405" width="0" height="15" fill="rgb(219,84,10)"/><text x="898.00" y="415.50"></text></g><g><title>__rdl_realloc (66 samples, 0.07%)</title><rect x="895" y="389" width="0" height="15" fill="rgb(238,185,7)"/><text x="898.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (66 samples, 0.07%)</title><rect x="895" y="373" width="0" height="15" fill="rgb(221,28,46)"/><text x="898.00" y="383.50"></text></g><g><title>__GI___libc_realloc (66 samples, 0.07%)</title><rect x="895" y="357" width="0" height="15" fill="rgb(210,172,31)"/><text x="898.00" y="367.50"></text></g><g><title>_int_realloc (42 samples, 0.04%)</title><rect x="895" y="341" width="0" height="15" fill="rgb(232,133,17)"/><text x="898.00" y="351.50"></text></g><g><title>_int_malloc (21 samples, 0.02%)</title><rect x="895" y="325" width="0" height="15" fill="rgb(210,135,45)"/><text x="898.00" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (74 samples, 0.08%)</title><rect x="895" y="469" width="1" height="15" fill="rgb(224,70,5)"/><text x="898.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (74 samples, 0.08%)</title><rect x="895" y="453" width="1" height="15" fill="rgb(226,57,11)"/><text x="898.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (74 samples, 0.08%)</title><rect x="895" y="437" width="1" height="15" fill="rgb(246,52,12)"/><text x="898.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::SignatureScheme&gt;&gt;::read (110 samples, 0.11%)</title><rect x="894" y="517" width="2" height="15" fill="rgb(237,45,38)"/><text x="897.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (110 samples, 0.11%)</title><rect x="894" y="501" width="2" height="15" fill="rgb(228,10,37)"/><text x="897.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (85 samples, 0.09%)</title><rect x="895" y="485" width="1" height="15" fill="rgb(213,19,27)"/><text x="898.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::handshake::KeyShareEntry&gt;&gt;::read (12 samples, 0.01%)</title><rect x="896" y="517" width="0" height="15" fill="rgb(228,21,41)"/><text x="899.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (12 samples, 0.01%)</title><rect x="896" y="501" width="0" height="15" fill="rgb(211,104,31)"/><text x="899.00" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="896" y="453" width="0" height="15" fill="rgb(239,150,37)"/><text x="899.00" y="463.50"></text></g><g><title>&lt;webpki::name::DNSName as core::convert::From&lt;webpki::name::DNSNameRef&gt;&gt;::from (13 samples, 0.01%)</title><rect x="896" y="437" width="0" height="15" fill="rgb(238,145,13)"/><text x="899.00" y="447.50"></text></g><g><title>webpki::name::DNSNameRef::to_owned (13 samples, 0.01%)</title><rect x="896" y="421" width="0" height="15" fill="rgb(205,157,38)"/><text x="899.00" y="431.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerName as rustls::msgs::codec::Codec&gt;::read (33 samples, 0.03%)</title><rect x="896" y="485" width="0" height="15" fill="rgb(252,55,54)"/><text x="899.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::ServerNamePayload::read_hostname (32 samples, 0.03%)</title><rect x="896" y="469" width="0" height="15" fill="rgb(233,98,25)"/><text x="899.00" y="479.50"></text></g><g><title>webpki::name::DNSNameRef::try_from_ascii (16 samples, 0.02%)</title><rect x="896" y="453" width="0" height="15" fill="rgb(231,202,53)"/><text x="899.00" y="463.50"></text></g><g><title>webpki::name::is_valid_reference_dns_id (16 samples, 0.02%)</title><rect x="896" y="437" width="0" height="15" fill="rgb(224,203,20)"/><text x="899.00" y="447.50"></text></g><g><title>webpki::name::is_valid_dns_id (16 samples, 0.02%)</title><rect x="896" y="421" width="0" height="15" fill="rgb(229,206,21)"/><text x="899.00" y="431.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientExtension as rustls::msgs::codec::Codec&gt;::read (269 samples, 0.27%)</title><rect x="893" y="533" width="3" height="15" fill="rgb(241,106,18)"/><text x="896.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::handshake::ServerName&gt;&gt;::read (36 samples, 0.04%)</title><rect x="896" y="517" width="0" height="15" fill="rgb(206,109,8)"/><text x="899.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (36 samples, 0.04%)</title><rect x="896" y="501" width="0" height="15" fill="rgb(206,153,32)"/><text x="899.00" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (9 samples, 0.01%)</title><rect x="896" y="469" width="0" height="15" fill="rgb(225,228,27)"/><text x="899.00" y="479.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.01%)</title><rect x="896" y="453" width="0" height="15" fill="rgb(221,216,36)"/><text x="899.00" y="463.50"></text></g><g><title>__rdl_alloc (9 samples, 0.01%)</title><rect x="896" y="437" width="0" height="15" fill="rgb(244,24,38)"/><text x="899.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.01%)</title><rect x="896" y="421" width="0" height="15" fill="rgb(217,157,9)"/><text x="899.00" y="431.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.01%)</title><rect x="896" y="405" width="0" height="15" fill="rgb(211,23,3)"/><text x="899.00" y="415.50"></text></g><g><title>_int_free (12 samples, 0.01%)</title><rect x="897" y="373" width="0" height="15" fill="rgb(243,93,40)"/><text x="900.00" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (158 samples, 0.16%)</title><rect x="896" y="469" width="2" height="15" fill="rgb(223,98,50)"/><text x="899.00" y="479.50"></text></g><g><title>alloc::alloc::realloc (158 samples, 0.16%)</title><rect x="896" y="453" width="2" height="15" fill="rgb(249,6,27)"/><text x="899.00" y="463.50"></text></g><g><title>__rdl_realloc (158 samples, 0.16%)</title><rect x="896" y="437" width="2" height="15" fill="rgb(205,136,8)"/><text x="899.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (158 samples, 0.16%)</title><rect x="896" y="421" width="2" height="15" fill="rgb(227,152,9)"/><text x="899.00" y="431.50"></text></g><g><title>__GI___libc_realloc (156 samples, 0.16%)</title><rect x="896" y="405" width="2" height="15" fill="rgb(241,118,33)"/><text x="899.00" y="415.50"></text></g><g><title>_int_realloc (121 samples, 0.12%)</title><rect x="897" y="389" width="1" height="15" fill="rgb(212,39,41)"/><text x="900.00" y="399.50"></text></g><g><title>_int_malloc (77 samples, 0.08%)</title><rect x="897" y="373" width="1" height="15" fill="rgb(221,34,10)"/><text x="900.00" y="383.50"></text></g><g><title>malloc_consolidate (22 samples, 0.02%)</title><rect x="898" y="357" width="0" height="15" fill="rgb(211,15,8)"/><text x="901.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (168 samples, 0.17%)</title><rect x="896" y="517" width="2" height="15" fill="rgb(232,117,49)"/><text x="899.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (168 samples, 0.17%)</title><rect x="896" y="501" width="2" height="15" fill="rgb(219,81,2)"/><text x="899.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (168 samples, 0.17%)</title><rect x="896" y="485" width="2" height="15" fill="rgb(245,161,37)"/><text x="899.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (181 samples, 0.18%)</title><rect x="896" y="533" width="2" height="15" fill="rgb(247,121,45)"/><text x="899.00" y="543.50"></text></g><g><title>core::ptr::write (13 samples, 0.01%)</title><rect x="898" y="517" width="0" height="15" fill="rgb(237,36,47)"/><text x="901.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (512 samples, 0.52%)</title><rect x="892" y="549" width="6" height="15" fill="rgb(247,138,50)"/><text x="895.00" y="559.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (526 samples, 0.53%)</title><rect x="892" y="565" width="6" height="15" fill="rgb(242,94,42)"/><text x="895.00" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (9 samples, 0.01%)</title><rect x="899" y="485" width="0" height="15" fill="rgb(236,25,45)"/><text x="902.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (9 samples, 0.01%)</title><rect x="899" y="469" width="0" height="15" fill="rgb(232,12,9)"/><text x="902.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="899" y="453" width="0" height="15" fill="rgb(216,26,48)"/><text x="902.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (9 samples, 0.01%)</title><rect x="899" y="437" width="0" height="15" fill="rgb(250,137,41)"/><text x="902.00" y="447.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerExtension as rustls::msgs::codec::Codec&gt;::read (24 samples, 0.02%)</title><rect x="899" y="533" width="0" height="15" fill="rgb(244,49,25)"/><text x="902.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ECPointFormat&gt;&gt;::read (11 samples, 0.01%)</title><rect x="899" y="517" width="0" height="15" fill="rgb(243,151,32)"/><text x="902.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (11 samples, 0.01%)</title><rect x="899" y="501" width="0" height="15" fill="rgb(248,64,41)"/><text x="902.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (40 samples, 0.04%)</title><rect x="899" y="517" width="0" height="15" fill="rgb(248,145,31)"/><text x="902.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (40 samples, 0.04%)</title><rect x="899" y="501" width="0" height="15" fill="rgb(211,69,29)"/><text x="902.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (40 samples, 0.04%)</title><rect x="899" y="485" width="0" height="15" fill="rgb(254,11,33)"/><text x="902.00" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (39 samples, 0.04%)</title><rect x="899" y="469" width="0" height="15" fill="rgb(253,11,32)"/><text x="902.00" y="479.50"></text></g><g><title>alloc::alloc::realloc (39 samples, 0.04%)</title><rect x="899" y="453" width="0" height="15" fill="rgb(237,31,7)"/><text x="902.00" y="463.50"></text></g><g><title>__rdl_realloc (39 samples, 0.04%)</title><rect x="899" y="437" width="0" height="15" fill="rgb(249,91,2)"/><text x="902.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (39 samples, 0.04%)</title><rect x="899" y="421" width="0" height="15" fill="rgb(212,30,39)"/><text x="902.00" y="431.50"></text></g><g><title>__GI___libc_realloc (39 samples, 0.04%)</title><rect x="899" y="405" width="0" height="15" fill="rgb(222,46,28)"/><text x="902.00" y="415.50"></text></g><g><title>_int_realloc (31 samples, 0.03%)</title><rect x="899" y="389" width="0" height="15" fill="rgb(237,50,27)"/><text x="902.00" y="399.50"></text></g><g><title>_int_malloc (23 samples, 0.02%)</title><rect x="899" y="373" width="0" height="15" fill="rgb(235,158,19)"/><text x="902.00" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (42 samples, 0.04%)</title><rect x="899" y="533" width="0" height="15" fill="rgb(216,210,53)"/><text x="902.00" y="543.50"></text></g><g><title>pvn_tls::utils::is_client_hello (881 samples, 0.89%)</title><rect x="889" y="645" width="10" height="15" fill="rgb(250,111,4)"/><text x="892.00" y="655.50"></text></g><g><title>pvn_tls::utils::on_frame (810 samples, 0.82%)</title><rect x="890" y="629" width="9" height="15" fill="rgb(240,83,47)"/><text x="893.00" y="639.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (650 samples, 0.66%)</title><rect x="892" y="613" width="7" height="15" fill="rgb(218,14,23)"/><text x="895.00" y="623.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (636 samples, 0.65%)</title><rect x="892" y="597" width="7" height="15" fill="rgb(232,12,34)"/><text x="895.00" y="607.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (620 samples, 0.63%)</title><rect x="892" y="581" width="7" height="15" fill="rgb(247,113,46)"/><text x="895.00" y="591.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerHelloPayload as rustls::msgs::codec::Codec&gt;::read (75 samples, 0.08%)</title><rect x="898" y="565" width="1" height="15" fill="rgb(248,162,12)"/><text x="901.00" y="575.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (70 samples, 0.07%)</title><rect x="898" y="549" width="1" height="15" fill="rgb(244,136,36)"/><text x="901.00" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="900" y="549" width="0" height="15" fill="rgb(242,89,54)"/><text x="903.00" y="559.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.01%)</title><rect x="900" y="533" width="0" height="15" fill="rgb(216,202,33)"/><text x="903.00" y="543.50"></text></g><g><title>core::ptr::real_drop_in_place (9 samples, 0.01%)</title><rect x="900" y="517" width="0" height="15" fill="rgb(223,214,31)"/><text x="903.00" y="527.50"></text></g><g><title>core::ptr::real_drop_in_place (38 samples, 0.04%)</title><rect x="899" y="629" width="1" height="15" fill="rgb(235,166,51)"/><text x="902.00" y="639.50"></text></g><g><title>core::ptr::real_drop_in_place (30 samples, 0.03%)</title><rect x="900" y="613" width="0" height="15" fill="rgb(252,139,39)"/><text x="903.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (30 samples, 0.03%)</title><rect x="900" y="597" width="0" height="15" fill="rgb(217,137,14)"/><text x="903.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (20 samples, 0.02%)</title><rect x="900" y="581" width="0" height="15" fill="rgb(237,102,0)"/><text x="903.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (17 samples, 0.02%)</title><rect x="900" y="565" width="0" height="15" fill="rgb(205,142,33)"/><text x="903.00" y="575.50"></text></g><g><title>core::ptr::real_drop_in_place (14 samples, 0.01%)</title><rect x="900" y="613" width="0" height="15" fill="rgb(209,99,43)"/><text x="903.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (14 samples, 0.01%)</title><rect x="900" y="597" width="0" height="15" fill="rgb(214,63,39)"/><text x="903.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (14 samples, 0.01%)</title><rect x="900" y="581" width="0" height="15" fill="rgb(218,135,49)"/><text x="903.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (14 samples, 0.01%)</title><rect x="900" y="565" width="0" height="15" fill="rgb(247,202,8)"/><text x="903.00" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="900" y="549" width="0" height="15" fill="rgb(211,111,20)"/><text x="903.00" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (14 samples, 0.01%)</title><rect x="900" y="533" width="0" height="15" fill="rgb(245,209,48)"/><text x="903.00" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="900" y="517" width="0" height="15" fill="rgb(218,56,40)"/><text x="903.00" y="527.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="900" y="501" width="0" height="15" fill="rgb(211,39,53)"/><text x="903.00" y="511.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.01%)</title><rect x="900" y="485" width="0" height="15" fill="rgb(240,5,31)"/><text x="903.00" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.01%)</title><rect x="900" y="469" width="0" height="15" fill="rgb(207,25,25)"/><text x="903.00" y="479.50"></text></g><g><title>__GI___libc_free (12 samples, 0.01%)</title><rect x="900" y="453" width="0" height="15" fill="rgb(212,13,1)"/><text x="903.00" y="463.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="900" y="437" width="0" height="15" fill="rgb(230,5,21)"/><text x="903.00" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (12 samples, 0.01%)</title><rect x="900" y="533" width="1" height="15" fill="rgb(241,81,26)"/><text x="903.00" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.01%)</title><rect x="900" y="517" width="1" height="15" fill="rgb(207,146,54)"/><text x="903.00" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (12 samples, 0.01%)</title><rect x="900" y="501" width="1" height="15" fill="rgb(208,9,22)"/><text x="903.00" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="900" y="485" width="1" height="15" fill="rgb(228,110,18)"/><text x="903.00" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.01%)</title><rect x="900" y="469" width="1" height="15" fill="rgb(240,90,42)"/><text x="903.00" y="479.50"></text></g><g><title>&lt;rustls::msgs::base::Payload as rustls::msgs::codec::Codec&gt;::read (30 samples, 0.03%)</title><rect x="900" y="581" width="1" height="15" fill="rgb(209,133,45)"/><text x="903.00" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.03%)</title><rect x="900" y="565" width="1" height="15" fill="rgb(251,85,53)"/><text x="903.00" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.03%)</title><rect x="900" y="549" width="1" height="15" fill="rgb(249,201,37)"/><text x="903.00" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 0.02%)</title><rect x="901" y="533" width="0" height="15" fill="rgb(206,199,11)"/><text x="904.00" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (18 samples, 0.02%)</title><rect x="901" y="517" width="0" height="15" fill="rgb(254,161,25)"/><text x="904.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.02%)</title><rect x="901" y="501" width="0" height="15" fill="rgb(224,212,1)"/><text x="904.00" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (18 samples, 0.02%)</title><rect x="901" y="485" width="0" height="15" fill="rgb(208,124,33)"/><text x="904.00" y="495.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="901" y="469" width="0" height="15" fill="rgb(227,31,17)"/><text x="904.00" y="479.50"></text></g><g><title>__rdl_alloc (18 samples, 0.02%)</title><rect x="901" y="453" width="0" height="15" fill="rgb(209,50,24)"/><text x="904.00" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.02%)</title><rect x="901" y="437" width="0" height="15" fill="rgb(252,73,35)"/><text x="904.00" y="447.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.02%)</title><rect x="901" y="421" width="0" height="15" fill="rgb(254,164,53)"/><text x="904.00" y="431.50"></text></g><g><title>&lt;rustls::msgs::enums::ProtocolVersion as rustls::msgs::codec::Codec&gt;::read (10 samples, 0.01%)</title><rect x="901" y="581" width="0" height="15" fill="rgb(248,166,3)"/><text x="904.00" y="591.50"></text></g><g><title>rustls::msgs::codec::Codec::read_bytes (64 samples, 0.06%)</title><rect x="900" y="613" width="1" height="15" fill="rgb(223,17,36)"/><text x="903.00" y="623.50"></text></g><g><title>&lt;rustls::msgs::message::Message as rustls::msgs::codec::Codec&gt;::read (64 samples, 0.06%)</title><rect x="900" y="597" width="1" height="15" fill="rgb(239,90,22)"/><text x="903.00" y="607.50"></text></g><g><title>&lt;rustls::msgs::enums::CipherSuite as rustls::msgs::codec::Codec&gt;::read (14 samples, 0.01%)</title><rect x="902" y="533" width="0" height="15" fill="rgb(237,88,18)"/><text x="905.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ECPointFormat&gt;&gt;::read (11 samples, 0.01%)</title><rect x="902" y="517" width="0" height="15" fill="rgb(242,82,52)"/><text x="905.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (11 samples, 0.01%)</title><rect x="902" y="501" width="0" height="15" fill="rgb(206,183,42)"/><text x="905.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (11 samples, 0.01%)</title><rect x="902" y="485" width="0" height="15" fill="rgb(231,86,20)"/><text x="905.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (10 samples, 0.01%)</title><rect x="902" y="469" width="0" height="15" fill="rgb(232,199,39)"/><text x="905.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.01%)</title><rect x="902" y="453" width="0" height="15" fill="rgb(251,101,23)"/><text x="905.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (10 samples, 0.01%)</title><rect x="902" y="437" width="0" height="15" fill="rgb(223,52,9)"/><text x="905.00" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (9 samples, 0.01%)</title><rect x="902" y="421" width="0" height="15" fill="rgb(232,42,48)"/><text x="905.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.01%)</title><rect x="902" y="405" width="0" height="15" fill="rgb(238,18,5)"/><text x="905.00" y="415.50"></text></g><g><title>__rdl_realloc (9 samples, 0.01%)</title><rect x="902" y="389" width="0" height="15" fill="rgb(239,104,32)"/><text x="905.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (9 samples, 0.01%)</title><rect x="902" y="373" width="0" height="15" fill="rgb(225,151,13)"/><text x="905.00" y="383.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.01%)</title><rect x="902" y="357" width="0" height="15" fill="rgb(222,223,49)"/><text x="905.00" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (9 samples, 0.01%)</title><rect x="902" y="421" width="0" height="15" fill="rgb(247,136,47)"/><text x="905.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.01%)</title><rect x="902" y="405" width="0" height="15" fill="rgb(232,3,46)"/><text x="905.00" y="415.50"></text></g><g><title>__rdl_realloc (9 samples, 0.01%)</title><rect x="902" y="389" width="0" height="15" fill="rgb(217,108,12)"/><text x="905.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (9 samples, 0.01%)</title><rect x="902" y="373" width="0" height="15" fill="rgb(222,206,22)"/><text x="905.00" y="383.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.01%)</title><rect x="902" y="357" width="0" height="15" fill="rgb(233,17,0)"/><text x="905.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (16 samples, 0.02%)</title><rect x="902" y="485" width="0" height="15" fill="rgb(222,212,7)"/><text x="905.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (14 samples, 0.01%)</title><rect x="902" y="469" width="0" height="15" fill="rgb(246,66,15)"/><text x="905.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="902" y="453" width="0" height="15" fill="rgb(218,54,48)"/><text x="905.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (14 samples, 0.01%)</title><rect x="902" y="437" width="0" height="15" fill="rgb(207,31,0)"/><text x="905.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::NamedGroup&gt;&gt;::read (18 samples, 0.02%)</title><rect x="902" y="517" width="0" height="15" fill="rgb(248,73,7)"/><text x="905.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (18 samples, 0.02%)</title><rect x="902" y="501" width="0" height="15" fill="rgb(205,142,8)"/><text x="905.00" y="511.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ProtocolVersion&gt;&gt;::read (17 samples, 0.02%)</title><rect x="902" y="517" width="1" height="15" fill="rgb(221,123,6)"/><text x="905.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (17 samples, 0.02%)</title><rect x="902" y="501" width="1" height="15" fill="rgb(218,80,28)"/><text x="905.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (13 samples, 0.01%)</title><rect x="902" y="485" width="1" height="15" fill="rgb(246,120,52)"/><text x="905.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (12 samples, 0.01%)</title><rect x="903" y="469" width="0" height="15" fill="rgb(232,46,35)"/><text x="906.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.01%)</title><rect x="903" y="453" width="0" height="15" fill="rgb(210,157,39)"/><text x="906.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (12 samples, 0.01%)</title><rect x="903" y="437" width="0" height="15" fill="rgb(237,23,12)"/><text x="906.00" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (32 samples, 0.03%)</title><rect x="903" y="421" width="0" height="15" fill="rgb(208,43,3)"/><text x="906.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (32 samples, 0.03%)</title><rect x="903" y="405" width="0" height="15" fill="rgb(230,33,0)"/><text x="906.00" y="415.50"></text></g><g><title>__rdl_realloc (32 samples, 0.03%)</title><rect x="903" y="389" width="0" height="15" fill="rgb(225,72,27)"/><text x="906.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (32 samples, 0.03%)</title><rect x="903" y="373" width="0" height="15" fill="rgb(219,75,52)"/><text x="906.00" y="383.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.03%)</title><rect x="903" y="357" width="0" height="15" fill="rgb(210,110,31)"/><text x="906.00" y="367.50"></text></g><g><title>_int_realloc (18 samples, 0.02%)</title><rect x="903" y="341" width="0" height="15" fill="rgb(210,85,23)"/><text x="906.00" y="351.50"></text></g><g><title>_int_malloc (10 samples, 0.01%)</title><rect x="903" y="325" width="0" height="15" fill="rgb(238,163,7)"/><text x="906.00" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (34 samples, 0.03%)</title><rect x="903" y="469" width="0" height="15" fill="rgb(232,56,5)"/><text x="906.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.03%)</title><rect x="903" y="453" width="0" height="15" fill="rgb(243,73,42)"/><text x="906.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (34 samples, 0.03%)</title><rect x="903" y="437" width="0" height="15" fill="rgb(239,123,12)"/><text x="906.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::SignatureScheme&gt;&gt;::read (43 samples, 0.04%)</title><rect x="903" y="517" width="0" height="15" fill="rgb(205,214,0)"/><text x="906.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (43 samples, 0.04%)</title><rect x="903" y="501" width="0" height="15" fill="rgb(216,63,40)"/><text x="906.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (37 samples, 0.04%)</title><rect x="903" y="485" width="0" height="15" fill="rgb(234,58,20)"/><text x="906.00" y="495.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerName as rustls::msgs::codec::Codec&gt;::read (11 samples, 0.01%)</title><rect x="903" y="485" width="0" height="15" fill="rgb(225,148,32)"/><text x="906.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::ServerNamePayload::read_hostname (11 samples, 0.01%)</title><rect x="903" y="469" width="0" height="15" fill="rgb(221,164,27)"/><text x="906.00" y="479.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientExtension as rustls::msgs::codec::Codec&gt;::read (130 samples, 0.13%)</title><rect x="902" y="533" width="1" height="15" fill="rgb(231,34,11)"/><text x="905.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::handshake::ServerName&gt;&gt;::read (14 samples, 0.01%)</title><rect x="903" y="517" width="0" height="15" fill="rgb(240,14,28)"/><text x="906.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (14 samples, 0.01%)</title><rect x="903" y="501" width="0" height="15" fill="rgb(253,86,13)"/><text x="906.00" y="511.50"></text></g><g><title>_int_free (13 samples, 0.01%)</title><rect x="904" y="373" width="0" height="15" fill="rgb(238,58,25)"/><text x="907.00" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (87 samples, 0.09%)</title><rect x="903" y="517" width="1" height="15" fill="rgb(224,157,9)"/><text x="906.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (87 samples, 0.09%)</title><rect x="903" y="501" width="1" height="15" fill="rgb(206,193,45)"/><text x="906.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (87 samples, 0.09%)</title><rect x="903" y="485" width="1" height="15" fill="rgb(237,28,8)"/><text x="906.00" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (87 samples, 0.09%)</title><rect x="903" y="469" width="1" height="15" fill="rgb(232,195,44)"/><text x="906.00" y="479.50"></text></g><g><title>alloc::alloc::realloc (87 samples, 0.09%)</title><rect x="903" y="453" width="1" height="15" fill="rgb(231,19,5)"/><text x="906.00" y="463.50"></text></g><g><title>__rdl_realloc (87 samples, 0.09%)</title><rect x="903" y="437" width="1" height="15" fill="rgb(235,124,13)"/><text x="906.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (87 samples, 0.09%)</title><rect x="903" y="421" width="1" height="15" fill="rgb(210,174,51)"/><text x="906.00" y="431.50"></text></g><g><title>__GI___libc_realloc (84 samples, 0.09%)</title><rect x="903" y="405" width="1" height="15" fill="rgb(244,150,32)"/><text x="906.00" y="415.50"></text></g><g><title>_int_realloc (52 samples, 0.05%)</title><rect x="904" y="389" width="0" height="15" fill="rgb(252,196,1)"/><text x="907.00" y="399.50"></text></g><g><title>_int_malloc (25 samples, 0.03%)</title><rect x="904" y="373" width="0" height="15" fill="rgb(247,183,36)"/><text x="907.00" y="383.50"></text></g><g><title>malloc_consolidate (13 samples, 0.01%)</title><rect x="904" y="357" width="0" height="15" fill="rgb(250,208,12)"/><text x="907.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (98 samples, 0.10%)</title><rect x="903" y="533" width="2" height="15" fill="rgb(241,185,47)"/><text x="906.00" y="543.50"></text></g><g><title>core::ptr::write (9 samples, 0.01%)</title><rect x="904" y="517" width="1" height="15" fill="rgb(225,110,19)"/><text x="907.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (256 samples, 0.26%)</title><rect x="902" y="549" width="3" height="15" fill="rgb(237,121,28)"/><text x="905.00" y="559.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (263 samples, 0.27%)</title><rect x="901" y="565" width="4" height="15" fill="rgb(232,107,28)"/><text x="904.00" y="575.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerExtension as rustls::msgs::codec::Codec&gt;::read (21 samples, 0.02%)</title><rect x="905" y="533" width="0" height="15" fill="rgb(220,205,37)"/><text x="908.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (16 samples, 0.02%)</title><rect x="905" y="517" width="0" height="15" fill="rgb(244,134,10)"/><text x="908.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.02%)</title><rect x="905" y="501" width="0" height="15" fill="rgb(212,117,52)"/><text x="908.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (16 samples, 0.02%)</title><rect x="905" y="485" width="0" height="15" fill="rgb(251,189,26)"/><text x="908.00" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (14 samples, 0.01%)</title><rect x="905" y="469" width="0" height="15" fill="rgb(205,229,1)"/><text x="908.00" y="479.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.01%)</title><rect x="905" y="453" width="0" height="15" fill="rgb(212,101,42)"/><text x="908.00" y="463.50"></text></g><g><title>__rdl_realloc (14 samples, 0.01%)</title><rect x="905" y="437" width="0" height="15" fill="rgb(227,113,22)"/><text x="908.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (14 samples, 0.01%)</title><rect x="905" y="421" width="0" height="15" fill="rgb(224,18,26)"/><text x="908.00" y="431.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.01%)</title><rect x="905" y="405" width="0" height="15" fill="rgb(205,139,7)"/><text x="908.00" y="415.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerHelloPayload as rustls::msgs::codec::Codec&gt;::read (48 samples, 0.05%)</title><rect x="905" y="565" width="0" height="15" fill="rgb(230,45,4)"/><text x="908.00" y="575.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (41 samples, 0.04%)</title><rect x="905" y="549" width="0" height="15" fill="rgb(252,86,38)"/><text x="908.00" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (17 samples, 0.02%)</title><rect x="905" y="533" width="0" height="15" fill="rgb(248,167,31)"/><text x="908.00" y="543.50"></text></g><g><title>pvn_tls::utils::is_client_key_exchange (494 samples, 0.50%)</title><rect x="899" y="645" width="6" height="15" fill="rgb(251,44,27)"/><text x="902.00" y="655.50"></text></g><g><title>pvn_tls::utils::on_frame (446 samples, 0.45%)</title><rect x="900" y="629" width="5" height="15" fill="rgb(207,33,43)"/><text x="903.00" y="639.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (346 samples, 0.35%)</title><rect x="901" y="613" width="4" height="15" fill="rgb(232,147,37)"/><text x="904.00" y="623.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (342 samples, 0.35%)</title><rect x="901" y="597" width="4" height="15" fill="rgb(218,126,43)"/><text x="904.00" y="607.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (325 samples, 0.33%)</title><rect x="901" y="581" width="4" height="15" fill="rgb(238,125,40)"/><text x="904.00" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (10 samples, 0.01%)</title><rect x="905" y="629" width="0" height="15" fill="rgb(226,206,9)"/><text x="908.00" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (10 samples, 0.01%)</title><rect x="905" y="613" width="0" height="15" fill="rgb(244,35,32)"/><text x="908.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (28 samples, 0.03%)</title><rect x="905" y="629" width="1" height="15" fill="rgb(229,183,19)"/><text x="908.00" y="639.50"></text></g><g><title>core::ptr::real_drop_in_place (22 samples, 0.02%)</title><rect x="906" y="613" width="0" height="15" fill="rgb(243,19,41)"/><text x="909.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (22 samples, 0.02%)</title><rect x="906" y="597" width="0" height="15" fill="rgb(243,85,23)"/><text x="909.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (12 samples, 0.01%)</title><rect x="906" y="581" width="0" height="15" fill="rgb(231,178,43)"/><text x="909.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (10 samples, 0.01%)</title><rect x="906" y="565" width="0" height="15" fill="rgb(221,11,36)"/><text x="909.00" y="575.50"></text></g><g><title>core::ptr::real_drop_in_place (10 samples, 0.01%)</title><rect x="906" y="613" width="0" height="15" fill="rgb(228,68,0)"/><text x="909.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (10 samples, 0.01%)</title><rect x="906" y="597" width="0" height="15" fill="rgb(219,212,43)"/><text x="909.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (10 samples, 0.01%)</title><rect x="906" y="581" width="0" height="15" fill="rgb(235,223,5)"/><text x="909.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (10 samples, 0.01%)</title><rect x="906" y="565" width="0" height="15" fill="rgb(205,203,23)"/><text x="909.00" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="906" y="549" width="0" height="15" fill="rgb(226,185,23)"/><text x="909.00" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (10 samples, 0.01%)</title><rect x="906" y="533" width="0" height="15" fill="rgb(206,161,42)"/><text x="909.00" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (10 samples, 0.01%)</title><rect x="906" y="517" width="0" height="15" fill="rgb(219,114,41)"/><text x="909.00" y="527.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.01%)</title><rect x="906" y="501" width="0" height="15" fill="rgb(218,218,54)"/><text x="909.00" y="511.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.01%)</title><rect x="906" y="485" width="0" height="15" fill="rgb(247,212,44)"/><text x="909.00" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.01%)</title><rect x="906" y="469" width="0" height="15" fill="rgb(254,153,24)"/><text x="909.00" y="479.50"></text></g><g><title>__GI___libc_free (10 samples, 0.01%)</title><rect x="906" y="453" width="0" height="15" fill="rgb(221,104,21)"/><text x="909.00" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (12 samples, 0.01%)</title><rect x="906" y="533" width="0" height="15" fill="rgb(242,66,32)"/><text x="909.00" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.01%)</title><rect x="906" y="517" width="0" height="15" fill="rgb(211,91,37)"/><text x="909.00" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (12 samples, 0.01%)</title><rect x="906" y="501" width="0" height="15" fill="rgb(240,225,15)"/><text x="909.00" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="906" y="485" width="0" height="15" fill="rgb(214,70,2)"/><text x="909.00" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.01%)</title><rect x="906" y="469" width="0" height="15" fill="rgb(215,47,34)"/><text x="909.00" y="479.50"></text></g><g><title>&lt;rustls::msgs::base::Payload as rustls::msgs::codec::Codec&gt;::read (25 samples, 0.03%)</title><rect x="906" y="581" width="1" height="15" fill="rgb(228,214,41)"/><text x="909.00" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (25 samples, 0.03%)</title><rect x="906" y="565" width="1" height="15" fill="rgb(248,56,49)"/><text x="909.00" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.03%)</title><rect x="906" y="549" width="1" height="15" fill="rgb(220,22,32)"/><text x="909.00" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13 samples, 0.01%)</title><rect x="906" y="533" width="1" height="15" fill="rgb(247,223,8)"/><text x="909.00" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (13 samples, 0.01%)</title><rect x="906" y="517" width="1" height="15" fill="rgb(244,193,18)"/><text x="909.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.01%)</title><rect x="906" y="501" width="1" height="15" fill="rgb(221,42,48)"/><text x="909.00" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (12 samples, 0.01%)</title><rect x="906" y="485" width="1" height="15" fill="rgb(229,220,36)"/><text x="909.00" y="495.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="906" y="469" width="1" height="15" fill="rgb(223,120,0)"/><text x="909.00" y="479.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="906" y="453" width="1" height="15" fill="rgb(253,26,17)"/><text x="909.00" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.01%)</title><rect x="906" y="437" width="1" height="15" fill="rgb(213,98,31)"/><text x="909.00" y="447.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.01%)</title><rect x="906" y="421" width="1" height="15" fill="rgb(226,65,20)"/><text x="909.00" y="431.50"></text></g><g><title>&lt;rustls::msgs::enums::ProtocolVersion as rustls::msgs::codec::Codec&gt;::read (9 samples, 0.01%)</title><rect x="907" y="581" width="0" height="15" fill="rgb(221,48,52)"/><text x="910.00" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (10 samples, 0.01%)</title><rect x="907" y="565" width="0" height="15" fill="rgb(247,115,24)"/><text x="910.00" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.01%)</title><rect x="907" y="549" width="0" height="15" fill="rgb(210,200,23)"/><text x="910.00" y="559.50"></text></g><g><title>rustls::msgs::codec::decode_u16 (10 samples, 0.01%)</title><rect x="907" y="533" width="0" height="15" fill="rgb(223,195,28)"/><text x="910.00" y="543.50"></text></g><g><title>&lt;u16 as rustls::msgs::codec::Codec&gt;::read (16 samples, 0.02%)</title><rect x="907" y="581" width="0" height="15" fill="rgb(233,169,35)"/><text x="910.00" y="591.50"></text></g><g><title>rustls::msgs::codec::Codec::read_bytes (67 samples, 0.07%)</title><rect x="906" y="613" width="1" height="15" fill="rgb(209,120,36)"/><text x="909.00" y="623.50"></text></g><g><title>&lt;rustls::msgs::message::Message as rustls::msgs::codec::Codec&gt;::read (66 samples, 0.07%)</title><rect x="906" y="597" width="1" height="15" fill="rgb(225,0,1)"/><text x="909.00" y="607.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (11 samples, 0.01%)</title><rect x="907" y="581" width="0" height="15" fill="rgb(216,77,40)"/><text x="910.00" y="591.50"></text></g><g><title>&lt;rustls::msgs::enums::CipherSuite as rustls::msgs::codec::Codec&gt;::read (19 samples, 0.02%)</title><rect x="908" y="533" width="0" height="15" fill="rgb(244,205,54)"/><text x="911.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ECPointFormat&gt;&gt;::read (9 samples, 0.01%)</title><rect x="908" y="517" width="0" height="15" fill="rgb(221,129,53)"/><text x="911.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (9 samples, 0.01%)</title><rect x="908" y="501" width="0" height="15" fill="rgb(236,32,38)"/><text x="911.00" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (18 samples, 0.02%)</title><rect x="908" y="421" width="0" height="15" fill="rgb(247,134,8)"/><text x="911.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.02%)</title><rect x="908" y="405" width="0" height="15" fill="rgb(242,149,44)"/><text x="911.00" y="415.50"></text></g><g><title>__rdl_realloc (18 samples, 0.02%)</title><rect x="908" y="389" width="0" height="15" fill="rgb(250,192,33)"/><text x="911.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (18 samples, 0.02%)</title><rect x="908" y="373" width="0" height="15" fill="rgb(221,141,17)"/><text x="911.00" y="383.50"></text></g><g><title>__GI___libc_realloc (18 samples, 0.02%)</title><rect x="908" y="357" width="0" height="15" fill="rgb(252,36,51)"/><text x="911.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (20 samples, 0.02%)</title><rect x="908" y="469" width="0" height="15" fill="rgb(249,221,32)"/><text x="911.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.02%)</title><rect x="908" y="453" width="0" height="15" fill="rgb(219,45,12)"/><text x="911.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (20 samples, 0.02%)</title><rect x="908" y="437" width="0" height="15" fill="rgb(238,80,17)"/><text x="911.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::NamedGroup&gt;&gt;::read (22 samples, 0.02%)</title><rect x="908" y="517" width="0" height="15" fill="rgb(241,23,1)"/><text x="911.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (22 samples, 0.02%)</title><rect x="908" y="501" width="0" height="15" fill="rgb(207,105,31)"/><text x="911.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (22 samples, 0.02%)</title><rect x="908" y="485" width="0" height="15" fill="rgb(225,163,8)"/><text x="911.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (10 samples, 0.01%)</title><rect x="908" y="469" width="1" height="15" fill="rgb(247,24,54)"/><text x="911.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.01%)</title><rect x="908" y="453" width="1" height="15" fill="rgb(218,201,40)"/><text x="911.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (10 samples, 0.01%)</title><rect x="908" y="437" width="1" height="15" fill="rgb(229,15,24)"/><text x="911.00" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (13 samples, 0.01%)</title><rect x="908" y="485" width="1" height="15" fill="rgb(221,26,39)"/><text x="911.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ProtocolVersion&gt;&gt;::read (16 samples, 0.02%)</title><rect x="908" y="517" width="1" height="15" fill="rgb(220,229,37)"/><text x="911.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (16 samples, 0.02%)</title><rect x="908" y="501" width="1" height="15" fill="rgb(235,225,10)"/><text x="911.00" y="511.50"></text></g><g><title>&lt;rustls::msgs::enums::SignatureScheme as rustls::msgs::codec::Codec&gt;::read (12 samples, 0.01%)</title><rect x="909" y="485" width="0" height="15" fill="rgb(233,58,31)"/><text x="912.00" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (26 samples, 0.03%)</title><rect x="909" y="421" width="0" height="15" fill="rgb(227,23,14)"/><text x="912.00" y="431.50"></text></g><g><title>alloc::alloc::realloc (26 samples, 0.03%)</title><rect x="909" y="405" width="0" height="15" fill="rgb(216,168,39)"/><text x="912.00" y="415.50"></text></g><g><title>__rdl_realloc (26 samples, 0.03%)</title><rect x="909" y="389" width="0" height="15" fill="rgb(213,71,33)"/><text x="912.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (26 samples, 0.03%)</title><rect x="909" y="373" width="0" height="15" fill="rgb(216,2,23)"/><text x="912.00" y="383.50"></text></g><g><title>__GI___libc_realloc (26 samples, 0.03%)</title><rect x="909" y="357" width="0" height="15" fill="rgb(245,32,54)"/><text x="912.00" y="367.50"></text></g><g><title>_int_realloc (15 samples, 0.02%)</title><rect x="909" y="341" width="0" height="15" fill="rgb(230,32,31)"/><text x="912.00" y="351.50"></text></g><g><title>_int_malloc (9 samples, 0.01%)</title><rect x="909" y="325" width="0" height="15" fill="rgb(206,140,23)"/><text x="912.00" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (28 samples, 0.03%)</title><rect x="909" y="469" width="0" height="15" fill="rgb(237,107,6)"/><text x="912.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.03%)</title><rect x="909" y="453" width="0" height="15" fill="rgb(218,165,33)"/><text x="912.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (28 samples, 0.03%)</title><rect x="909" y="437" width="0" height="15" fill="rgb(232,12,20)"/><text x="912.00" y="447.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::SignatureScheme&gt;&gt;::read (44 samples, 0.04%)</title><rect x="909" y="517" width="0" height="15" fill="rgb(216,50,45)"/><text x="912.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (44 samples, 0.04%)</title><rect x="909" y="501" width="0" height="15" fill="rgb(224,205,54)"/><text x="912.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (30 samples, 0.03%)</title><rect x="909" y="485" width="0" height="15" fill="rgb(216,122,39)"/><text x="912.00" y="495.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::handshake::KeyShareEntry&gt;&gt;::read (9 samples, 0.01%)</title><rect x="909" y="517" width="0" height="15" fill="rgb(224,104,52)"/><text x="912.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (9 samples, 0.01%)</title><rect x="909" y="501" width="0" height="15" fill="rgb(233,6,39)"/><text x="912.00" y="511.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientExtension as rustls::msgs::codec::Codec&gt;::read (119 samples, 0.12%)</title><rect x="908" y="533" width="1" height="15" fill="rgb(205,144,36)"/><text x="911.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::handshake::ServerName&gt;&gt;::read (9 samples, 0.01%)</title><rect x="909" y="517" width="0" height="15" fill="rgb(234,82,49)"/><text x="912.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (9 samples, 0.01%)</title><rect x="909" y="501" width="0" height="15" fill="rgb(235,30,24)"/><text x="912.00" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (77 samples, 0.08%)</title><rect x="909" y="469" width="1" height="15" fill="rgb(238,185,16)"/><text x="912.00" y="479.50"></text></g><g><title>alloc::alloc::realloc (77 samples, 0.08%)</title><rect x="909" y="453" width="1" height="15" fill="rgb(248,173,10)"/><text x="912.00" y="463.50"></text></g><g><title>__rdl_realloc (77 samples, 0.08%)</title><rect x="909" y="437" width="1" height="15" fill="rgb(245,67,54)"/><text x="912.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (77 samples, 0.08%)</title><rect x="909" y="421" width="1" height="15" fill="rgb(217,76,47)"/><text x="912.00" y="431.50"></text></g><g><title>__GI___libc_realloc (77 samples, 0.08%)</title><rect x="909" y="405" width="1" height="15" fill="rgb(226,73,13)"/><text x="912.00" y="415.50"></text></g><g><title>_int_realloc (47 samples, 0.05%)</title><rect x="910" y="389" width="0" height="15" fill="rgb(219,121,38)"/><text x="913.00" y="399.50"></text></g><g><title>_int_malloc (34 samples, 0.03%)</title><rect x="910" y="373" width="0" height="15" fill="rgb(224,131,37)"/><text x="913.00" y="383.50"></text></g><g><title>malloc_consolidate (11 samples, 0.01%)</title><rect x="910" y="357" width="0" height="15" fill="rgb(225,0,41)"/><text x="913.00" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (81 samples, 0.08%)</title><rect x="909" y="517" width="1" height="15" fill="rgb(253,140,43)"/><text x="912.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (81 samples, 0.08%)</title><rect x="909" y="501" width="1" height="15" fill="rgb(232,136,39)"/><text x="912.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (81 samples, 0.08%)</title><rect x="909" y="485" width="1" height="15" fill="rgb(211,215,22)"/><text x="912.00" y="495.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (241 samples, 0.24%)</title><rect x="908" y="549" width="2" height="15" fill="rgb(222,25,30)"/><text x="911.00" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (90 samples, 0.09%)</title><rect x="909" y="533" width="1" height="15" fill="rgb(211,62,52)"/><text x="912.00" y="543.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (247 samples, 0.25%)</title><rect x="908" y="565" width="2" height="15" fill="rgb(222,174,41)"/><text x="911.00" y="575.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerExtension as rustls::msgs::codec::Codec&gt;::read (16 samples, 0.02%)</title><rect x="911" y="533" width="0" height="15" fill="rgb(250,215,3)"/><text x="914.00" y="543.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ECPointFormat&gt;&gt;::read (9 samples, 0.01%)</title><rect x="911" y="517" width="0" height="15" fill="rgb(205,182,44)"/><text x="914.00" y="527.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (9 samples, 0.01%)</title><rect x="911" y="501" width="0" height="15" fill="rgb(215,18,28)"/><text x="914.00" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (9 samples, 0.01%)</title><rect x="911" y="485" width="0" height="15" fill="rgb(211,73,10)"/><text x="914.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (9 samples, 0.01%)</title><rect x="911" y="469" width="0" height="15" fill="rgb(215,24,49)"/><text x="914.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.01%)</title><rect x="911" y="453" width="0" height="15" fill="rgb(214,119,47)"/><text x="914.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (9 samples, 0.01%)</title><rect x="911" y="437" width="0" height="15" fill="rgb(233,31,26)"/><text x="914.00" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (18 samples, 0.02%)</title><rect x="911" y="517" width="0" height="15" fill="rgb(252,209,35)"/><text x="914.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.02%)</title><rect x="911" y="501" width="0" height="15" fill="rgb(221,11,7)"/><text x="914.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (18 samples, 0.02%)</title><rect x="911" y="485" width="0" height="15" fill="rgb(236,66,22)"/><text x="914.00" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (17 samples, 0.02%)</title><rect x="911" y="469" width="0" height="15" fill="rgb(224,106,26)"/><text x="914.00" y="479.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.02%)</title><rect x="911" y="453" width="0" height="15" fill="rgb(210,32,16)"/><text x="914.00" y="463.50"></text></g><g><title>__rdl_realloc (17 samples, 0.02%)</title><rect x="911" y="437" width="0" height="15" fill="rgb(243,111,40)"/><text x="914.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (17 samples, 0.02%)</title><rect x="911" y="421" width="0" height="15" fill="rgb(250,125,20)"/><text x="914.00" y="431.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.02%)</title><rect x="911" y="405" width="0" height="15" fill="rgb(248,47,5)"/><text x="914.00" y="415.50"></text></g><g><title>_int_realloc (13 samples, 0.01%)</title><rect x="911" y="389" width="0" height="15" fill="rgb(242,202,20)"/><text x="914.00" y="399.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (341 samples, 0.35%)</title><rect x="907" y="613" width="4" height="15" fill="rgb(241,39,40)"/><text x="910.00" y="623.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (333 samples, 0.34%)</title><rect x="907" y="597" width="4" height="15" fill="rgb(221,207,54)"/><text x="910.00" y="607.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (318 samples, 0.32%)</title><rect x="907" y="581" width="4" height="15" fill="rgb(250,45,52)"/><text x="910.00" y="591.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerHelloPayload as rustls::msgs::codec::Codec&gt;::read (47 samples, 0.05%)</title><rect x="911" y="565" width="0" height="15" fill="rgb(229,150,16)"/><text x="914.00" y="575.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (39 samples, 0.04%)</title><rect x="911" y="549" width="0" height="15" fill="rgb(232,45,16)"/><text x="914.00" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (21 samples, 0.02%)</title><rect x="911" y="533" width="0" height="15" fill="rgb(253,13,31)"/><text x="914.00" y="543.50"></text></g><g><title>pvn_tls::utils::is_server_hello (489 samples, 0.50%)</title><rect x="905" y="645" width="6" height="15" fill="rgb(225,173,39)"/><text x="908.00" y="655.50"></text></g><g><title>pvn_tls::utils::on_frame (445 samples, 0.45%)</title><rect x="906" y="629" width="5" height="15" fill="rgb(236,36,1)"/><text x="909.00" y="639.50"></text></g><g><title>rustls::msgs::codec::Codec::read_bytes (9 samples, 0.01%)</title><rect x="911" y="613" width="0" height="15" fill="rgb(241,164,39)"/><text x="914.00" y="623.50"></text></g><g><title>&lt;rustls::msgs::message::Message as rustls::msgs::codec::Codec&gt;::read (9 samples, 0.01%)</title><rect x="911" y="597" width="0" height="15" fill="rgb(218,158,1)"/><text x="914.00" y="607.50"></text></g><g><title>&lt;rustls::msgs::handshake::ServerHelloPayload as rustls::msgs::codec::Codec&gt;::read (15 samples, 0.02%)</title><rect x="911" y="565" width="0" height="15" fill="rgb(220,117,42)"/><text x="914.00" y="575.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (14 samples, 0.01%)</title><rect x="911" y="549" width="0" height="15" fill="rgb(213,0,0)"/><text x="914.00" y="559.50"></text></g><g><title>pvn_tls::utils::parse_tls_frame (37 samples, 0.04%)</title><rect x="911" y="645" width="1" height="15" fill="rgb(251,33,13)"/><text x="914.00" y="655.50"></text></g><g><title>pvn_tls::utils::on_frame (36 samples, 0.04%)</title><rect x="911" y="629" width="1" height="15" fill="rgb(208,0,43)"/><text x="914.00" y="639.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (26 samples, 0.03%)</title><rect x="911" y="613" width="1" height="15" fill="rgb(231,4,39)"/><text x="914.00" y="623.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (26 samples, 0.03%)</title><rect x="911" y="597" width="1" height="15" fill="rgb(208,216,34)"/><text x="914.00" y="607.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (24 samples, 0.02%)</title><rect x="911" y="581" width="1" height="15" fill="rgb(220,154,48)"/><text x="914.00" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.01%)</title><rect x="912" y="453" width="0" height="15" fill="rgb(219,160,26)"/><text x="915.00" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (59 samples, 0.06%)</title><rect x="912" y="597" width="0" height="15" fill="rgb(219,48,41)"/><text x="915.00" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (59 samples, 0.06%)</title><rect x="912" y="581" width="0" height="15" fill="rgb(250,66,29)"/><text x="915.00" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (59 samples, 0.06%)</title><rect x="912" y="565" width="0" height="15" fill="rgb(210,104,39)"/><text x="915.00" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (56 samples, 0.06%)</title><rect x="912" y="549" width="0" height="15" fill="rgb(225,60,17)"/><text x="915.00" y="559.50"></text></g><g><title>alloc::alloc::realloc (56 samples, 0.06%)</title><rect x="912" y="533" width="0" height="15" fill="rgb(239,26,31)"/><text x="915.00" y="543.50"></text></g><g><title>__rdl_realloc (56 samples, 0.06%)</title><rect x="912" y="517" width="0" height="15" fill="rgb(208,214,11)"/><text x="915.00" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (56 samples, 0.06%)</title><rect x="912" y="501" width="0" height="15" fill="rgb(250,4,11)"/><text x="915.00" y="511.50"></text></g><g><title>__GI___libc_realloc (55 samples, 0.06%)</title><rect x="912" y="485" width="0" height="15" fill="rgb(236,137,45)"/><text x="915.00" y="495.50"></text></g><g><title>_int_realloc (47 samples, 0.05%)</title><rect x="912" y="469" width="0" height="15" fill="rgb(246,145,1)"/><text x="915.00" y="479.50"></text></g><g><title>_int_malloc (26 samples, 0.03%)</title><rect x="912" y="453" width="0" height="15" fill="rgb(209,94,26)"/><text x="915.00" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (77 samples, 0.08%)</title><rect x="912" y="629" width="0" height="15" fill="rgb(209,41,47)"/><text x="915.00" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (77 samples, 0.08%)</title><rect x="912" y="613" width="0" height="15" fill="rgb(234,213,15)"/><text x="915.00" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (18 samples, 0.02%)</title><rect x="912" y="597" width="0" height="15" fill="rgb(246,52,19)"/><text x="915.00" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="912" y="581" width="0" height="15" fill="rgb(229,100,13)"/><text x="915.00" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.02%)</title><rect x="912" y="565" width="0" height="15" fill="rgb(254,6,45)"/><text x="915.00" y="575.50"></text></g><g><title>__memset_avx2_unaligned_erms (10 samples, 0.01%)</title><rect x="912" y="629" width="1" height="15" fill="rgb(247,9,0)"/><text x="915.00" y="639.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::read_data (13 samples, 0.01%)</title><rect x="913" y="629" width="0" height="15" fill="rgb(241,23,51)"/><text x="916.00" y="639.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::read_data_common (13 samples, 0.01%)</title><rect x="913" y="613" width="0" height="15" fill="rgb(205,100,10)"/><text x="916.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::read_from_head (13 samples, 0.01%)</title><rect x="913" y="597" width="0" height="15" fill="rgb(219,28,0)"/><text x="916.00" y="607.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::read_from_head_with_increment (13 samples, 0.01%)</title><rect x="913" y="581" width="0" height="15" fill="rgb(248,119,16)"/><text x="916.00" y="591.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_read (12 samples, 0.01%)</title><rect x="913" y="565" width="0" height="15" fill="rgb(244,57,29)"/><text x="916.00" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (10 samples, 0.01%)</title><rect x="913" y="549" width="0" height="15" fill="rgb(240,166,30)"/><text x="916.00" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (10 samples, 0.01%)</title><rect x="913" y="533" width="0" height="15" fill="rgb(213,2,18)"/><text x="916.00" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="913" y="517" width="0" height="15" fill="rgb(236,110,49)"/><text x="916.00" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.01%)</title><rect x="913" y="501" width="0" height="15" fill="rgb(238,104,18)"/><text x="916.00" y="511.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (13 samples, 0.01%)</title><rect x="913" y="581" width="0" height="15" fill="rgb(215,5,10)"/><text x="916.00" y="591.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.02%)</title><rect x="913" y="597" width="0" height="15" fill="rgb(241,33,10)"/><text x="916.00" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (27 samples, 0.03%)</title><rect x="913" y="613" width="0" height="15" fill="rgb(227,90,29)"/><text x="916.00" y="623.50"></text></g><g><title>pvn_tls::utils::read_payload (133 samples, 0.13%)</title><rect x="912" y="645" width="1" height="15" fill="rgb(229,96,26)"/><text x="915.00" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (31 samples, 0.03%)</title><rect x="913" y="629" width="0" height="15" fill="rgb(206,222,49)"/><text x="916.00" y="639.50"></text></g><g><title>rustls::verify::prepare (10 samples, 0.01%)</title><rect x="913" y="613" width="0" height="15" fill="rgb(215,151,49)"/><text x="916.00" y="623.50"></text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::Algorithm as ring::signature::VerificationAlgorithm&gt;::verify (12 samples, 0.01%)</title><rect x="913" y="437" width="1" height="15" fill="rgb(246,173,48)"/><text x="916.00" y="447.50"></text></g><g><title>GFp_sha256_block_data_order_avx (39 samples, 0.04%)</title><rect x="914" y="373" width="0" height="15" fill="rgb(212,8,8)"/><text x="917.00" y="383.50"></text></g><g><title>ring::digest::digest (46 samples, 0.05%)</title><rect x="914" y="405" width="0" height="15" fill="rgb(220,29,32)"/><text x="917.00" y="415.50"></text></g><g><title>ring::digest::Context::update (43 samples, 0.04%)</title><rect x="914" y="389" width="0" height="15" fill="rgb(239,211,53)"/><text x="917.00" y="399.50"></text></g><g><title>ring::rsa::bigint::Elem&lt;M,ring::arithmetic::montgomery::R&gt;::into_unencoded (12 samples, 0.01%)</title><rect x="914" y="405" width="0" height="15" fill="rgb(230,92,2)"/><text x="917.00" y="415.50"></text></g><g><title>ring::rsa::bigint::Elem&lt;M,E&gt;::decode_once (12 samples, 0.01%)</title><rect x="914" y="389" width="0" height="15" fill="rgb(233,64,23)"/><text x="917.00" y="399.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_mul (11 samples, 0.01%)</title><rect x="914" y="373" width="0" height="15" fill="rgb(238,191,46)"/><text x="917.00" y="383.50"></text></g><g><title>bn_mulx4x_mont (11 samples, 0.01%)</title><rect x="914" y="357" width="0" height="15" fill="rgb(224,24,49)"/><text x="917.00" y="367.50"></text></g><g><title>ring::rsa::bigint::elem_mul_ (13 samples, 0.01%)</title><rect x="914" y="373" width="1" height="15" fill="rgb(228,197,15)"/><text x="917.00" y="383.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_mul (13 samples, 0.01%)</title><rect x="914" y="357" width="1" height="15" fill="rgb(232,1,14)"/><text x="917.00" y="367.50"></text></g><g><title>bn_mulx4x_mont (13 samples, 0.01%)</title><rect x="914" y="341" width="1" height="15" fill="rgb(239,176,31)"/><text x="917.00" y="351.50"></text></g><g><title>GFp_bn_sqrx8x_internal (53 samples, 0.05%)</title><rect x="915" y="325" width="0" height="15" fill="rgb(249,87,15)"/><text x="918.00" y="335.50"></text></g><g><title>ring::rsa::bigint::elem_exp_vartime_ (175 samples, 0.18%)</title><rect x="914" y="389" width="2" height="15" fill="rgb(238,47,10)"/><text x="917.00" y="399.50"></text></g><g><title>ring::rsa::bigint::elem_squared (162 samples, 0.16%)</title><rect x="915" y="373" width="1" height="15" fill="rgb(238,126,2)"/><text x="918.00" y="383.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_square (162 samples, 0.16%)</title><rect x="915" y="357" width="1" height="15" fill="rgb(219,191,34)"/><text x="918.00" y="367.50"></text></g><g><title>bn_sqr8x_mont (162 samples, 0.16%)</title><rect x="915" y="341" width="1" height="15" fill="rgb(235,78,32)"/><text x="918.00" y="351.50"></text></g><g><title>__bn_sqrx8x_reduction (108 samples, 0.11%)</title><rect x="915" y="325" width="1" height="15" fill="rgb(216,87,0)"/><text x="918.00" y="335.50"></text></g><g><title>ring::rsa::bigint::elem_exp_vartime (199 samples, 0.20%)</title><rect x="914" y="405" width="3" height="15" fill="rgb(233,128,12)"/><text x="917.00" y="415.50"></text></g><g><title>ring::rsa::bigint::elem_mul (24 samples, 0.02%)</title><rect x="916" y="389" width="1" height="15" fill="rgb(250,136,6)"/><text x="919.00" y="399.50"></text></g><g><title>ring::rsa::bigint::elem_mul_ (24 samples, 0.02%)</title><rect x="916" y="373" width="1" height="15" fill="rgb(230,117,2)"/><text x="919.00" y="383.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_mul (24 samples, 0.02%)</title><rect x="916" y="357" width="1" height="15" fill="rgb(229,13,12)"/><text x="919.00" y="367.50"></text></g><g><title>bn_mulx4x_mont (24 samples, 0.02%)</title><rect x="916" y="341" width="1" height="15" fill="rgb(227,150,20)"/><text x="919.00" y="351.50"></text></g><g><title>GFp_bn_sqrx8x_internal (34 samples, 0.03%)</title><rect x="917" y="277" width="0" height="15" fill="rgb(212,175,25)"/><text x="920.00" y="287.50"></text></g><g><title>ring::rsa::bigint::elem_exp_vartime_ (114 samples, 0.12%)</title><rect x="917" y="341" width="1" height="15" fill="rgb(214,179,51)"/><text x="920.00" y="351.50"></text></g><g><title>ring::rsa::bigint::elem_squared (114 samples, 0.12%)</title><rect x="917" y="325" width="1" height="15" fill="rgb(233,27,27)"/><text x="920.00" y="335.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_square (114 samples, 0.12%)</title><rect x="917" y="309" width="1" height="15" fill="rgb(247,207,48)"/><text x="920.00" y="319.50"></text></g><g><title>bn_sqr8x_mont (114 samples, 0.12%)</title><rect x="917" y="293" width="1" height="15" fill="rgb(229,202,29)"/><text x="920.00" y="303.50"></text></g><g><title>__bn_sqrx8x_reduction (74 samples, 0.08%)</title><rect x="917" y="277" width="1" height="15" fill="rgb(250,162,2)"/><text x="920.00" y="287.50"></text></g><g><title>ring::rsa::verification::Key::from_modulus_and_exponent (131 samples, 0.13%)</title><rect x="917" y="405" width="1" height="15" fill="rgb(250,39,44)"/><text x="920.00" y="415.50"></text></g><g><title>ring::rsa::bigint::Modulus&lt;M&gt;::from_be_bytes_with_bit_length (129 samples, 0.13%)</title><rect x="917" y="389" width="1" height="15" fill="rgb(247,44,37)"/><text x="920.00" y="399.50"></text></g><g><title>ring::rsa::bigint::Modulus&lt;M&gt;::from_boxed_limbs (126 samples, 0.13%)</title><rect x="917" y="373" width="1" height="15" fill="rgb(238,177,13)"/><text x="920.00" y="383.50"></text></g><g><title>ring::rsa::bigint::One&lt;M,ring::arithmetic::montgomery::RR&gt;::newRR (121 samples, 0.12%)</title><rect x="917" y="357" width="1" height="15" fill="rgb(227,192,33)"/><text x="920.00" y="367.50"></text></g><g><title>&lt;rustls::verify::WebPKIVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (435 samples, 0.44%)</title><rect x="913" y="629" width="5" height="15" fill="rgb(217,91,10)"/><text x="916.00" y="639.50"></text></g><g><title>webpki::EndEntityCert::verify_is_valid_tls_server_cert (415 samples, 0.42%)</title><rect x="913" y="613" width="5" height="15" fill="rgb(222,206,11)"/><text x="916.00" y="623.50"></text></g><g><title>webpki::verify_cert::build_chain (415 samples, 0.42%)</title><rect x="913" y="597" width="5" height="15" fill="rgb(253,82,24)"/><text x="916.00" y="607.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (413 samples, 0.42%)</title><rect x="913" y="581" width="5" height="15" fill="rgb(231,174,10)"/><text x="916.00" y="591.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h7d5a92fee08bd0a2 (413 samples, 0.42%)</title><rect x="913" y="565" width="5" height="15" fill="rgb(243,33,40)"/><text x="916.00" y="575.50"></text></g><g><title>webpki::verify_cert::build_chain (411 samples, 0.42%)</title><rect x="913" y="549" width="5" height="15" fill="rgb(215,195,13)"/><text x="916.00" y="559.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (409 samples, 0.41%)</title><rect x="913" y="533" width="5" height="15" fill="rgb(243,179,50)"/><text x="916.00" y="543.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h6844014f3662fae0 (409 samples, 0.41%)</title><rect x="913" y="517" width="5" height="15" fill="rgb(234,160,5)"/><text x="916.00" y="527.50"></text></g><g><title>webpki::verify_cert::check_signatures (409 samples, 0.41%)</title><rect x="913" y="501" width="5" height="15" fill="rgb(215,63,17)"/><text x="916.00" y="511.50"></text></g><g><title>webpki::signed_data::verify_signed_data (409 samples, 0.41%)</title><rect x="913" y="485" width="5" height="15" fill="rgb(249,45,46)"/><text x="916.00" y="495.50"></text></g><g><title>webpki::signed_data::verify_signature (409 samples, 0.41%)</title><rect x="913" y="469" width="5" height="15" fill="rgb(242,139,42)"/><text x="916.00" y="479.50"></text></g><g><title>ring::signature::verify (409 samples, 0.41%)</title><rect x="913" y="453" width="5" height="15" fill="rgb(249,199,9)"/><text x="916.00" y="463.50"></text></g><g><title>ring::rsa::verification::&lt;impl ring::signature::VerificationAlgorithm for ring::rsa::Parameters&gt;::verify (397 samples, 0.40%)</title><rect x="914" y="437" width="4" height="15" fill="rgb(222,56,19)"/><text x="917.00" y="447.50"></text></g><g><title>ring::rsa::verification::verify_rsa_ (397 samples, 0.40%)</title><rect x="914" y="421" width="4" height="15" fill="rgb(245,34,13)"/><text x="917.00" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (31 samples, 0.03%)</title><rect x="918" y="469" width="1" height="15" fill="rgb(208,91,15)"/><text x="921.00" y="479.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.03%)</title><rect x="918" y="453" width="1" height="15" fill="rgb(232,112,34)"/><text x="921.00" y="463.50"></text></g><g><title>__rdl_dealloc (31 samples, 0.03%)</title><rect x="918" y="437" width="1" height="15" fill="rgb(241,16,25)"/><text x="921.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (31 samples, 0.03%)</title><rect x="918" y="421" width="1" height="15" fill="rgb(236,69,21)"/><text x="921.00" y="431.50"></text></g><g><title>__GI___libc_free (31 samples, 0.03%)</title><rect x="918" y="405" width="1" height="15" fill="rgb(207,106,53)"/><text x="921.00" y="415.50"></text></g><g><title>_int_free (27 samples, 0.03%)</title><rect x="918" y="389" width="1" height="15" fill="rgb(243,143,3)"/><text x="921.00" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="918" y="597" width="1" height="15" fill="rgb(242,42,9)"/><text x="921.00" y="607.50"></text></g><g><title>core::ptr::drop_in_place (34 samples, 0.03%)</title><rect x="918" y="581" width="1" height="15" fill="rgb(249,91,1)"/><text x="921.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (34 samples, 0.03%)</title><rect x="918" y="565" width="1" height="15" fill="rgb(235,114,25)"/><text x="921.00" y="575.50"></text></g><g><title>core::ptr::real_drop_in_place (34 samples, 0.03%)</title><rect x="918" y="549" width="1" height="15" fill="rgb(221,84,11)"/><text x="921.00" y="559.50"></text></g><g><title>core::ptr::real_drop_in_place (34 samples, 0.03%)</title><rect x="918" y="533" width="1" height="15" fill="rgb(216,72,44)"/><text x="921.00" y="543.50"></text></g><g><title>core::ptr::real_drop_in_place (34 samples, 0.03%)</title><rect x="918" y="517" width="1" height="15" fill="rgb(227,85,4)"/><text x="921.00" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="918" y="501" width="1" height="15" fill="rgb(245,149,54)"/><text x="921.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (34 samples, 0.03%)</title><rect x="918" y="485" width="1" height="15" fill="rgb(231,94,47)"/><text x="921.00" y="495.50"></text></g><g><title>core::ptr::real_drop_in_place (41 samples, 0.04%)</title><rect x="918" y="629" width="1" height="15" fill="rgb(217,184,10)"/><text x="921.00" y="639.50"></text></g><g><title>core::ptr::real_drop_in_place (41 samples, 0.04%)</title><rect x="918" y="613" width="1" height="15" fill="rgb(232,224,43)"/><text x="921.00" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (14 samples, 0.01%)</title><rect x="919" y="549" width="0" height="15" fill="rgb(254,154,8)"/><text x="922.00" y="559.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.01%)</title><rect x="919" y="533" width="0" height="15" fill="rgb(235,107,10)"/><text x="922.00" y="543.50"></text></g><g><title>__rdl_realloc (14 samples, 0.01%)</title><rect x="919" y="517" width="0" height="15" fill="rgb(223,11,8)"/><text x="922.00" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (14 samples, 0.01%)</title><rect x="919" y="501" width="0" height="15" fill="rgb(219,35,7)"/><text x="922.00" y="511.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.01%)</title><rect x="919" y="485" width="0" height="15" fill="rgb(207,182,4)"/><text x="922.00" y="495.50"></text></g><g><title>_int_realloc (11 samples, 0.01%)</title><rect x="919" y="469" width="0" height="15" fill="rgb(228,111,49)"/><text x="922.00" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (17 samples, 0.02%)</title><rect x="919" y="597" width="0" height="15" fill="rgb(235,2,45)"/><text x="922.00" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.02%)</title><rect x="919" y="581" width="0" height="15" fill="rgb(223,12,32)"/><text x="922.00" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (17 samples, 0.02%)</title><rect x="919" y="565" width="0" height="15" fill="rgb(244,130,4)"/><text x="922.00" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (32 samples, 0.03%)</title><rect x="919" y="613" width="0" height="15" fill="rgb(208,224,26)"/><text x="922.00" y="623.50"></text></g><g><title>core::ptr::write (14 samples, 0.01%)</title><rect x="919" y="597" width="0" height="15" fill="rgb(226,50,7)"/><text x="922.00" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (23 samples, 0.02%)</title><rect x="919" y="565" width="1" height="15" fill="rgb(249,143,41)"/><text x="922.00" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.02%)</title><rect x="919" y="549" width="1" height="15" fill="rgb(246,9,21)"/><text x="922.00" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (23 samples, 0.02%)</title><rect x="919" y="533" width="1" height="15" fill="rgb(232,18,44)"/><text x="922.00" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="919" y="517" width="1" height="15" fill="rgb(218,98,41)"/><text x="922.00" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.02%)</title><rect x="919" y="501" width="1" height="15" fill="rgb(242,134,23)"/><text x="922.00" y="511.50"></text></g><g><title>_int_malloc (43 samples, 0.04%)</title><rect x="920" y="437" width="1" height="15" fill="rgb(254,189,21)"/><text x="923.00" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (116 samples, 0.12%)</title><rect x="919" y="597" width="2" height="15" fill="rgb(218,26,35)"/><text x="922.00" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (116 samples, 0.12%)</title><rect x="919" y="581" width="2" height="15" fill="rgb(209,204,51)"/><text x="922.00" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (93 samples, 0.09%)</title><rect x="920" y="565" width="1" height="15" fill="rgb(235,50,53)"/><text x="923.00" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (93 samples, 0.09%)</title><rect x="920" y="549" width="1" height="15" fill="rgb(210,206,14)"/><text x="923.00" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (93 samples, 0.09%)</title><rect x="920" y="533" width="1" height="15" fill="rgb(228,200,53)"/><text x="923.00" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (92 samples, 0.09%)</title><rect x="920" y="517" width="1" height="15" fill="rgb(247,105,41)"/><text x="923.00" y="527.50"></text></g><g><title>alloc::alloc::alloc (92 samples, 0.09%)</title><rect x="920" y="501" width="1" height="15" fill="rgb(243,165,27)"/><text x="923.00" y="511.50"></text></g><g><title>__rdl_alloc (92 samples, 0.09%)</title><rect x="920" y="485" width="1" height="15" fill="rgb(235,89,33)"/><text x="923.00" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (92 samples, 0.09%)</title><rect x="920" y="469" width="1" height="15" fill="rgb(215,45,39)"/><text x="923.00" y="479.50"></text></g><g><title>__GI___libc_malloc (91 samples, 0.09%)</title><rect x="920" y="453" width="1" height="15" fill="rgb(205,192,36)"/><text x="923.00" y="463.50"></text></g><g><title>tcache_get (10 samples, 0.01%)</title><rect x="921" y="437" width="0" height="15" fill="rgb(248,192,45)"/><text x="924.00" y="447.50"></text></g><g><title>pvn_tls::utils::test_extracted_cert (628 samples, 0.64%)</title><rect x="913" y="645" width="8" height="15" fill="rgb(220,199,15)"/><text x="916.00" y="655.50"></text></g><g><title>rustls::anchors::RootCertStore::add_server_trust_anchors (152 samples, 0.15%)</title><rect x="919" y="629" width="2" height="15" fill="rgb(239,165,15)"/><text x="922.00" y="639.50"></text></g><g><title>rustls::anchors::OwnedTrustAnchor::from_trust_anchor (118 samples, 0.12%)</title><rect x="919" y="613" width="2" height="15" fill="rgb(254,228,23)"/><text x="922.00" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (13 samples, 0.01%)</title><rect x="921" y="565" width="0" height="15" fill="rgb(246,193,30)"/><text x="924.00" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (13 samples, 0.01%)</title><rect x="921" y="549" width="0" height="15" fill="rgb(214,154,27)"/><text x="924.00" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (13 samples, 0.01%)</title><rect x="921" y="533" width="0" height="15" fill="rgb(240,190,44)"/><text x="924.00" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="921" y="517" width="0" height="15" fill="rgb(230,121,50)"/><text x="924.00" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.01%)</title><rect x="921" y="501" width="0" height="15" fill="rgb(210,229,50)"/><text x="924.00" y="511.50"></text></g><g><title>&lt;rustls::msgs::base::Payload as rustls::msgs::codec::Codec&gt;::read (25 samples, 0.03%)</title><rect x="921" y="613" width="0" height="15" fill="rgb(228,44,52)"/><text x="924.00" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (25 samples, 0.03%)</title><rect x="921" y="597" width="0" height="15" fill="rgb(215,95,28)"/><text x="924.00" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.03%)</title><rect x="921" y="581" width="0" height="15" fill="rgb(246,122,27)"/><text x="924.00" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12 samples, 0.01%)</title><rect x="921" y="565" width="0" height="15" fill="rgb(230,175,42)"/><text x="924.00" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (12 samples, 0.01%)</title><rect x="921" y="549" width="0" height="15" fill="rgb(250,100,26)"/><text x="924.00" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.01%)</title><rect x="921" y="533" width="0" height="15" fill="rgb(216,188,4)"/><text x="924.00" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (12 samples, 0.01%)</title><rect x="921" y="517" width="0" height="15" fill="rgb(251,159,24)"/><text x="924.00" y="527.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="921" y="501" width="0" height="15" fill="rgb(239,162,44)"/><text x="924.00" y="511.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="921" y="485" width="0" height="15" fill="rgb(214,179,29)"/><text x="924.00" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.01%)</title><rect x="921" y="469" width="0" height="15" fill="rgb(227,150,36)"/><text x="924.00" y="479.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.01%)</title><rect x="921" y="453" width="0" height="15" fill="rgb(216,123,52)"/><text x="924.00" y="463.50"></text></g><g><title>rustls::msgs::codec::Codec::read_bytes (34 samples, 0.03%)</title><rect x="921" y="645" width="0" height="15" fill="rgb(229,5,12)"/><text x="924.00" y="655.50"></text></g><g><title>&lt;rustls::msgs::message::Message as rustls::msgs::codec::Codec&gt;::read (34 samples, 0.03%)</title><rect x="921" y="629" width="0" height="15" fill="rgb(213,142,4)"/><text x="924.00" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="921" y="437" width="0" height="15" fill="rgb(221,94,21)"/><text x="924.00" y="447.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="921" y="421" width="0" height="15" fill="rgb(235,198,52)"/><text x="924.00" y="431.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.01%)</title><rect x="921" y="405" width="0" height="15" fill="rgb(242,86,10)"/><text x="924.00" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.01%)</title><rect x="921" y="389" width="0" height="15" fill="rgb(208,89,24)"/><text x="924.00" y="399.50"></text></g><g><title>__GI___libc_free (14 samples, 0.01%)</title><rect x="921" y="373" width="0" height="15" fill="rgb(254,211,27)"/><text x="924.00" y="383.50"></text></g><g><title>_int_free (10 samples, 0.01%)</title><rect x="921" y="357" width="0" height="15" fill="rgb(242,67,52)"/><text x="924.00" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (16 samples, 0.02%)</title><rect x="921" y="597" width="0" height="15" fill="rgb(212,6,33)"/><text x="924.00" y="607.50"></text></g><g><title>core::ptr::&lt;impl *mut T&gt;::drop_in_place (16 samples, 0.02%)</title><rect x="921" y="581" width="0" height="15" fill="rgb(252,118,21)"/><text x="924.00" y="591.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.02%)</title><rect x="921" y="565" width="0" height="15" fill="rgb(239,47,12)"/><text x="924.00" y="575.50"></text></g><g><title>core::ptr::real_drop_in_place (16 samples, 0.02%)</title><rect x="921" y="549" width="0" height="15" fill="rgb(216,88,54)"/><text x="924.00" y="559.50"></text></g><g><title>core::ptr::real_drop_in_place (16 samples, 0.02%)</title><rect x="921" y="533" width="0" height="15" fill="rgb(249,207,0)"/><text x="924.00" y="543.50"></text></g><g><title>core::ptr::real_drop_in_place (16 samples, 0.02%)</title><rect x="921" y="517" width="0" height="15" fill="rgb(223,136,44)"/><text x="924.00" y="527.50"></text></g><g><title>core::ptr::real_drop_in_place (15 samples, 0.02%)</title><rect x="921" y="501" width="0" height="15" fill="rgb(215,25,5)"/><text x="924.00" y="511.50"></text></g><g><title>core::ptr::real_drop_in_place (15 samples, 0.02%)</title><rect x="921" y="485" width="0" height="15" fill="rgb(237,105,38)"/><text x="924.00" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="921" y="469" width="0" height="15" fill="rgb(243,158,33)"/><text x="924.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (15 samples, 0.02%)</title><rect x="921" y="453" width="0" height="15" fill="rgb(207,152,7)"/><text x="924.00" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::clear (17 samples, 0.02%)</title><rect x="921" y="645" width="0" height="15" fill="rgb(227,110,38)"/><text x="924.00" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::clear (17 samples, 0.02%)</title><rect x="921" y="629" width="0" height="15" fill="rgb(245,20,3)"/><text x="924.00" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::clear (17 samples, 0.02%)</title><rect x="921" y="613" width="0" height="15" fill="rgb(234,217,28)"/><text x="924.00" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (20 samples, 0.02%)</title><rect x="922" y="533" width="0" height="15" fill="rgb(242,209,30)"/><text x="925.00" y="543.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (61 samples, 0.06%)</title><rect x="922" y="549" width="0" height="15" fill="rgb(212,152,49)"/><text x="925.00" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (70 samples, 0.07%)</title><rect x="922" y="581" width="0" height="15" fill="rgb(215,182,49)"/><text x="925.00" y="591.50"></text></g><g><title>core::hash::Hasher::write_u16 (70 samples, 0.07%)</title><rect x="922" y="565" width="0" height="15" fill="rgb(215,174,44)"/><text x="925.00" y="575.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="923" y="533" width="0" height="15" fill="rgb(254,104,40)"/><text x="926.00" y="543.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (17 samples, 0.02%)</title><rect x="923" y="517" width="0" height="15" fill="rgb(243,15,31)"/><text x="926.00" y="527.50"></text></g><g><title>core::ptr::&lt;impl *const T&gt;::offset (17 samples, 0.02%)</title><rect x="923" y="501" width="0" height="15" fill="rgb(237,122,39)"/><text x="926.00" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (41 samples, 0.04%)</title><rect x="923" y="533" width="1" height="15" fill="rgb(227,13,12)"/><text x="926.00" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (96 samples, 0.10%)</title><rect x="922" y="581" width="2" height="15" fill="rgb(246,182,11)"/><text x="925.00" y="591.50"></text></g><g><title>core::hash::Hasher::write_u32 (96 samples, 0.10%)</title><rect x="922" y="565" width="2" height="15" fill="rgb(235,117,33)"/><text x="925.00" y="575.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (91 samples, 0.09%)</title><rect x="922" y="549" width="2" height="15" fill="rgb(254,111,32)"/><text x="925.00" y="559.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (200 samples, 0.20%)</title><rect x="921" y="597" width="3" height="15" fill="rgb(225,99,10)"/><text x="924.00" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (22 samples, 0.02%)</title><rect x="924" y="581" width="0" height="15" fill="rgb(230,156,52)"/><text x="927.00" y="591.50"></text></g><g><title>core::hash::Hasher::write_u8 (22 samples, 0.02%)</title><rect x="924" y="565" width="0" height="15" fill="rgb(236,45,10)"/><text x="927.00" y="575.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (15 samples, 0.02%)</title><rect x="924" y="549" width="0" height="15" fill="rgb(233,135,5)"/><text x="927.00" y="559.50"></text></g><g><title>hashbrown::map::make_hash (211 samples, 0.21%)</title><rect x="921" y="613" width="3" height="15" fill="rgb(207,54,53)"/><text x="924.00" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (22 samples, 0.02%)</title><rect x="924" y="597" width="0" height="15" fill="rgb(228,131,35)"/><text x="927.00" y="607.50"></text></g><g><title>hashbrown::raw::imp::Group::load (36 samples, 0.04%)</title><rect x="924" y="597" width="1" height="15" fill="rgb(247,102,49)"/><text x="927.00" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (36 samples, 0.04%)</title><rect x="924" y="581" width="1" height="15" fill="rgb(216,134,34)"/><text x="927.00" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.04%)</title><rect x="924" y="565" width="1" height="15" fill="rgb(238,44,27)"/><text x="927.00" y="575.50"></text></g><g><title>hashbrown::raw::imp::Group::match_byte (21 samples, 0.02%)</title><rect x="925" y="597" width="0" height="15" fill="rgb(212,149,31)"/><text x="928.00" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (21 samples, 0.02%)</title><rect x="925" y="581" width="0" height="15" fill="rgb(249,176,22)"/><text x="928.00" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (318 samples, 0.32%)</title><rect x="921" y="629" width="4" height="15" fill="rgb(226,152,1)"/><text x="924.00" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (103 samples, 0.10%)</title><rect x="924" y="613" width="1" height="15" fill="rgb(246,188,6)"/><text x="927.00" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (384 samples, 0.39%)</title><rect x="921" y="645" width="5" height="15" fill="rgb(228,74,34)"/><text x="924.00" y="655.50"></text></g><g><title>std::collections::hash::map::map_entry (60 samples, 0.06%)</title><rect x="925" y="629" width="1" height="15" fill="rgb(229,83,15)"/><text x="928.00" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (10 samples, 0.01%)</title><rect x="926" y="645" width="0" height="15" fill="rgb(248,31,34)"/><text x="929.00" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (10 samples, 0.01%)</title><rect x="926" y="629" width="0" height="15" fill="rgb(246,121,8)"/><text x="929.00" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (9 samples, 0.01%)</title><rect x="926" y="613" width="0" height="15" fill="rgb(233,206,8)"/><text x="929.00" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.02%)</title><rect x="927" y="453" width="0" height="15" fill="rgb(212,56,21)"/><text x="930.00" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (90 samples, 0.09%)</title><rect x="926" y="533" width="1" height="15" fill="rgb(205,38,53)"/><text x="929.00" y="543.50"></text></g><g><title>core::hash::Hasher::write_i32 (90 samples, 0.09%)</title><rect x="926" y="517" width="1" height="15" fill="rgb(215,75,20)"/><text x="929.00" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (82 samples, 0.08%)</title><rect x="926" y="501" width="1" height="15" fill="rgb(236,149,1)"/><text x="929.00" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (80 samples, 0.08%)</title><rect x="926" y="485" width="1" height="15" fill="rgb(208,40,3)"/><text x="929.00" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (80 samples, 0.08%)</title><rect x="926" y="469" width="1" height="15" fill="rgb(253,49,9)"/><text x="929.00" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (22 samples, 0.02%)</title><rect x="927" y="453" width="0" height="15" fill="rgb(213,24,31)"/><text x="930.00" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (124 samples, 0.13%)</title><rect x="927" y="533" width="2" height="15" fill="rgb(223,73,6)"/><text x="930.00" y="543.50"></text></g><g><title>core::hash::Hasher::write_u16 (124 samples, 0.13%)</title><rect x="927" y="517" width="2" height="15" fill="rgb(224,152,15)"/><text x="930.00" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (92 samples, 0.09%)</title><rect x="928" y="501" width="1" height="15" fill="rgb(207,137,31)"/><text x="931.00" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (92 samples, 0.09%)</title><rect x="928" y="485" width="1" height="15" fill="rgb(208,177,21)"/><text x="931.00" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (92 samples, 0.09%)</title><rect x="928" y="469" width="1" height="15" fill="rgb(221,61,52)"/><text x="931.00" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (33 samples, 0.03%)</title><rect x="928" y="453" width="1" height="15" fill="rgb(252,127,27)"/><text x="931.00" y="463.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (268 samples, 0.27%)</title><rect x="926" y="549" width="3" height="15" fill="rgb(221,199,12)"/><text x="929.00" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (45 samples, 0.05%)</title><rect x="929" y="533" width="0" height="15" fill="rgb(254,68,24)"/><text x="932.00" y="543.50"></text></g><g><title>core::hash::Hasher::write_u8 (45 samples, 0.05%)</title><rect x="929" y="517" width="0" height="15" fill="rgb(244,116,43)"/><text x="932.00" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.04%)</title><rect x="929" y="501" width="0" height="15" fill="rgb(248,166,5)"/><text x="932.00" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (42 samples, 0.04%)</title><rect x="929" y="485" width="0" height="15" fill="rgb(224,14,48)"/><text x="932.00" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (42 samples, 0.04%)</title><rect x="929" y="469" width="0" height="15" fill="rgb(209,87,28)"/><text x="932.00" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (14 samples, 0.01%)</title><rect x="929" y="453" width="0" height="15" fill="rgb(223,148,28)"/><text x="932.00" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.01%)</title><rect x="930" y="485" width="0" height="15" fill="rgb(222,179,53)"/><text x="933.00" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (25 samples, 0.03%)</title><rect x="930" y="501" width="0" height="15" fill="rgb(234,166,26)"/><text x="933.00" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.02%)</title><rect x="930" y="485" width="0" height="15" fill="rgb(230,21,53)"/><text x="933.00" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (101 samples, 0.10%)</title><rect x="929" y="549" width="2" height="15" fill="rgb(213,44,38)"/><text x="932.00" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (101 samples, 0.10%)</title><rect x="929" y="533" width="2" height="15" fill="rgb(235,86,25)"/><text x="932.00" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (101 samples, 0.10%)</title><rect x="929" y="517" width="2" height="15" fill="rgb(210,73,1)"/><text x="932.00" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (54 samples, 0.05%)</title><rect x="930" y="501" width="1" height="15" fill="rgb(215,215,19)"/><text x="933.00" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23 samples, 0.02%)</title><rect x="930" y="485" width="1" height="15" fill="rgb(250,122,4)"/><text x="933.00" y="495.50"></text></g><g><title>hashbrown::map::make_hash (377 samples, 0.38%)</title><rect x="926" y="565" width="5" height="15" fill="rgb(236,64,0)"/><text x="929.00" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (17 samples, 0.02%)</title><rect x="931" y="549" width="0" height="15" fill="rgb(226,48,53)"/><text x="934.00" y="559.50"></text></g><g><title>hashbrown::raw::imp::Group::load (64 samples, 0.06%)</title><rect x="931" y="549" width="1" height="15" fill="rgb(216,47,16)"/><text x="934.00" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (64 samples, 0.06%)</title><rect x="931" y="533" width="1" height="15" fill="rgb(251,154,3)"/><text x="934.00" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.06%)</title><rect x="931" y="517" width="1" height="15" fill="rgb(238,203,54)"/><text x="934.00" y="527.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (499 samples, 0.51%)</title><rect x="926" y="645" width="6" height="15" fill="rgb(219,159,6)"/><text x="929.00" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (499 samples, 0.51%)</title><rect x="926" y="629" width="6" height="15" fill="rgb(251,80,1)"/><text x="929.00" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (499 samples, 0.51%)</title><rect x="926" y="613" width="6" height="15" fill="rgb(210,185,32)"/><text x="929.00" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (499 samples, 0.51%)</title><rect x="926" y="597" width="6" height="15" fill="rgb(254,217,34)"/><text x="929.00" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (499 samples, 0.51%)</title><rect x="926" y="581" width="6" height="15" fill="rgb(207,49,30)"/><text x="929.00" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (122 samples, 0.12%)</title><rect x="931" y="565" width="1" height="15" fill="rgb(247,91,46)"/><text x="934.00" y="575.50"></text></g><g><title>hashbrown::raw::imp::Group::match_byte (34 samples, 0.03%)</title><rect x="932" y="549" width="0" height="15" fill="rgb(244,203,26)"/><text x="935.00" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (34 samples, 0.03%)</title><rect x="932" y="533" width="0" height="15" fill="rgb(206,149,37)"/><text x="935.00" y="543.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (165 samples, 0.17%)</title><rect x="934" y="517" width="2" height="15" fill="rgb(212,72,23)"/><text x="937.00" y="527.50"></text></g><g><title>__GI___pthread_mutex_unlock (165 samples, 0.17%)</title><rect x="934" y="501" width="2" height="15" fill="rgb(253,21,51)"/><text x="937.00" y="511.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (155 samples, 0.16%)</title><rect x="934" y="485" width="2" height="15" fill="rgb(207,103,10)"/><text x="937.00" y="495.50"></text></g><g><title>core::ptr::real_drop_in_place (177 samples, 0.18%)</title><rect x="934" y="565" width="2" height="15" fill="rgb(212,144,32)"/><text x="937.00" y="575.50"></text></g><g><title>core::ptr::real_drop_in_place (177 samples, 0.18%)</title><rect x="934" y="549" width="2" height="15" fill="rgb(240,84,43)"/><text x="937.00" y="559.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (177 samples, 0.18%)</title><rect x="934" y="533" width="2" height="15" fill="rgb(248,23,20)"/><text x="937.00" y="543.50"></text></g><g><title>std::sys_common::poison::Flag::done (10 samples, 0.01%)</title><rect x="936" y="517" width="0" height="15" fill="rgb(243,126,7)"/><text x="939.00" y="527.50"></text></g><g><title>std::thread::panicking (9 samples, 0.01%)</title><rect x="936" y="501" width="0" height="15" fill="rgb(216,139,43)"/><text x="939.00" y="511.50"></text></g><g><title>std::panicking::panicking (9 samples, 0.01%)</title><rect x="936" y="485" width="0" height="15" fill="rgb(206,221,23)"/><text x="939.00" y="495.50"></text></g><g><title>std::panicking::update_panic_count (9 samples, 0.01%)</title><rect x="936" y="469" width="0" height="15" fill="rgb(228,215,5)"/><text x="939.00" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.01%)</title><rect x="936" y="453" width="0" height="15" fill="rgb(208,44,0)"/><text x="939.00" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9 samples, 0.01%)</title><rect x="936" y="437" width="0" height="15" fill="rgb(205,65,47)"/><text x="939.00" y="447.50"></text></g><g><title>std::panicking::update_panic_count::PANIC_COUNT::__getit (9 samples, 0.01%)</title><rect x="936" y="421" width="0" height="15" fill="rgb(205,190,43)"/><text x="939.00" y="431.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (9 samples, 0.01%)</title><rect x="936" y="405" width="0" height="15" fill="rgb(220,73,42)"/><text x="939.00" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (10 samples, 0.01%)</title><rect x="939" y="405" width="1" height="15" fill="rgb(218,72,44)"/><text x="942.00" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (77 samples, 0.08%)</title><rect x="940" y="405" width="1" height="15" fill="rgb(223,118,6)"/><text x="943.00" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.08%)</title><rect x="940" y="389" width="1" height="15" fill="rgb(224,119,15)"/><text x="943.00" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (72 samples, 0.07%)</title><rect x="940" y="373" width="1" height="15" fill="rgb(231,153,21)"/><text x="943.00" y="383.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (155 samples, 0.16%)</title><rect x="939" y="469" width="2" height="15" fill="rgb(248,64,19)"/><text x="942.00" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (116 samples, 0.12%)</title><rect x="939" y="453" width="2" height="15" fill="rgb(252,118,17)"/><text x="942.00" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (99 samples, 0.10%)</title><rect x="939" y="437" width="2" height="15" fill="rgb(227,22,15)"/><text x="942.00" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (99 samples, 0.10%)</title><rect x="939" y="421" width="2" height="15" fill="rgb(252,191,6)"/><text x="942.00" y="431.50"></text></g><g><title>[unknown] (649 samples, 0.66%)</title><rect x="944" y="341" width="8" height="15" fill="rgb(224,39,37)"/><text x="947.00" y="351.50"></text></g><g><title>__pthread_disable_asynccancel (119 samples, 0.12%)</title><rect x="952" y="341" width="1" height="15" fill="rgb(241,156,42)"/><text x="955.00" y="351.50"></text></g><g><title>__pthread_enable_asynccancel (103 samples, 0.10%)</title><rect x="953" y="341" width="1" height="15" fill="rgb(215,197,16)"/><text x="956.00" y="351.50"></text></g><g><title>do_syscall_64 (36 samples, 0.04%)</title><rect x="954" y="341" width="1" height="15" fill="rgb(205,110,41)"/><text x="957.00" y="351.50"></text></g><g><title>__fdget_pos (10 samples, 0.01%)</title><rect x="976" y="309" width="1" height="15" fill="rgb(215,40,8)"/><text x="979.00" y="319.50"></text></g><g><title>__fdget_pos (273 samples, 0.28%)</title><rect x="978" y="293" width="3" height="15" fill="rgb(244,70,36)"/><text x="981.00" y="303.50"></text></g><g><title>__fget_light (260 samples, 0.26%)</title><rect x="978" y="277" width="3" height="15" fill="rgb(216,208,21)"/><text x="981.00" y="287.50"></text></g><g><title>__fget (208 samples, 0.21%)</title><rect x="979" y="261" width="2" height="15" fill="rgb(239,145,13)"/><text x="982.00" y="271.50"></text></g><g><title>__fget_light (46 samples, 0.05%)</title><rect x="981" y="293" width="1" height="15" fill="rgb(238,87,10)"/><text x="984.00" y="303.50"></text></g><g><title>fput (79 samples, 0.08%)</title><rect x="982" y="293" width="1" height="15" fill="rgb(210,188,44)"/><text x="985.00" y="303.50"></text></g><g><title>rw_verify_area (10 samples, 0.01%)</title><rect x="983" y="293" width="0" height="15" fill="rgb(229,205,46)"/><text x="986.00" y="303.50"></text></g><g><title>__fsnotify_parent (21 samples, 0.02%)</title><rect x="985" y="277" width="0" height="15" fill="rgb(236,17,17)"/><text x="988.00" y="287.50"></text></g><g><title>__indirect_thunk_start (16 samples, 0.02%)</title><rect x="985" y="277" width="0" height="15" fill="rgb(216,110,44)"/><text x="988.00" y="287.50"></text></g><g><title>__x86_indirect_thunk_r8 (18 samples, 0.02%)</title><rect x="985" y="261" width="1" height="15" fill="rgb(210,91,34)"/><text x="988.00" y="271.50"></text></g><g><title>_copy_from_user (9 samples, 0.01%)</title><rect x="986" y="261" width="0" height="15" fill="rgb(247,134,52)"/><text x="989.00" y="271.50"></text></g><g><title>n_tty_write (124 samples, 0.13%)</title><rect x="986" y="261" width="1" height="15" fill="rgb(246,216,32)"/><text x="989.00" y="271.50"></text></g><g><title>__check_heap_object (155 samples, 0.16%)</title><rect x="991" y="229" width="2" height="15" fill="rgb(228,181,47)"/><text x="994.00" y="239.50"></text></g><g><title>__virt_addr_valid (121 samples, 0.12%)</title><rect x="993" y="229" width="2" height="15" fill="rgb(234,158,23)"/><text x="996.00" y="239.50"></text></g><g><title>__check_object_size (363 samples, 0.37%)</title><rect x="990" y="245" width="5" height="15" fill="rgb(215,92,11)"/><text x="993.00" y="255.50"></text></g><g><title>__indirect_thunk_start (37 samples, 0.04%)</title><rect x="995" y="245" width="0" height="15" fill="rgb(225,131,8)"/><text x="998.00" y="255.50"></text></g><g><title>_copy_from_user (20 samples, 0.02%)</title><rect x="995" y="245" width="0" height="15" fill="rgb(234,31,7)"/><text x="998.00" y="255.50"></text></g><g><title>add_wait_queue (13 samples, 0.01%)</title><rect x="995" y="245" width="1" height="15" fill="rgb(247,102,32)"/><text x="998.00" y="255.50"></text></g><g><title>copy_user_enhanced_fast_string (46 samples, 0.05%)</title><rect x="996" y="245" width="0" height="15" fill="rgb(225,70,35)"/><text x="999.00" y="255.50"></text></g><g><title>copy_user_generic_unrolled (166 samples, 0.17%)</title><rect x="996" y="245" width="2" height="15" fill="rgb(252,57,43)"/><text x="999.00" y="255.50"></text></g><g><title>do_output_char (16 samples, 0.02%)</title><rect x="998" y="245" width="0" height="15" fill="rgb(235,219,21)"/><text x="1001.00" y="255.50"></text></g><g><title>down_read (11 samples, 0.01%)</title><rect x="998" y="245" width="1" height="15" fill="rgb(205,81,9)"/><text x="1001.00" y="255.50"></text></g><g><title>ldsem_down_read (15 samples, 0.02%)</title><rect x="999" y="245" width="0" height="15" fill="rgb(214,85,30)"/><text x="1002.00" y="255.50"></text></g><g><title>mutex_unlock (26 samples, 0.03%)</title><rect x="999" y="245" width="0" height="15" fill="rgb(222,71,26)"/><text x="1002.00" y="255.50"></text></g><g><title>__indirect_thunk_start (63 samples, 0.06%)</title><rect x="1010" y="229" width="1" height="15" fill="rgb(228,158,13)"/><text x="1013.00" y="239.50"></text></g><g><title>_cond_resched (16 samples, 0.02%)</title><rect x="1011" y="229" width="0" height="15" fill="rgb(252,103,53)"/><text x="1014.00" y="239.50"></text></g><g><title>_raw_spin_lock_irqsave (9 samples, 0.01%)</title><rect x="1011" y="229" width="0" height="15" fill="rgb(242,45,49)"/><text x="1014.00" y="239.50"></text></g><g><title>_raw_spin_unlock_irqrestore (80 samples, 0.08%)</title><rect x="1011" y="229" width="1" height="15" fill="rgb(249,117,19)"/><text x="1014.00" y="239.50"></text></g><g><title>_raw_spin_lock_irqsave (116 samples, 0.12%)</title><rect x="1013" y="213" width="1" height="15" fill="rgb(225,57,4)"/><text x="1016.00" y="223.50"></text></g><g><title>add_wait_queue (222 samples, 0.23%)</title><rect x="1012" y="229" width="3" height="15" fill="rgb(206,104,6)"/><text x="1015.00" y="239.50"></text></g><g><title>_raw_spin_unlock_irqrestore (84 samples, 0.09%)</title><rect x="1014" y="213" width="1" height="15" fill="rgb(229,205,5)"/><text x="1017.00" y="223.50"></text></g><g><title>_raw_spin_unlock_irqrestore (30 samples, 0.03%)</title><rect x="1016" y="213" width="0" height="15" fill="rgb(234,141,9)"/><text x="1019.00" y="223.50"></text></g><g><title>_raw_spin_lock_irqsave (116 samples, 0.12%)</title><rect x="1017" y="197" width="1" height="15" fill="rgb(229,103,19)"/><text x="1020.00" y="207.50"></text></g><g><title>_raw_spin_unlock_irqrestore (60 samples, 0.06%)</title><rect x="1018" y="197" width="1" height="15" fill="rgb(234,155,39)"/><text x="1021.00" y="207.50"></text></g><g><title>memcpy_erms (129 samples, 0.13%)</title><rect x="1019" y="197" width="2" height="15" fill="rgb(220,136,43)"/><text x="1022.00" y="207.50"></text></g><g><title>_raw_spin_lock (9 samples, 0.01%)</title><rect x="1024" y="149" width="0" height="15" fill="rgb(207,46,47)"/><text x="1027.00" y="159.50"></text></g><g><title>__task_rq_lock (31 samples, 0.03%)</title><rect x="1025" y="101" width="0" height="15" fill="rgb(208,86,16)"/><text x="1028.00" y="111.50"></text></g><g><title>_raw_spin_lock (31 samples, 0.03%)</title><rect x="1025" y="85" width="0" height="15" fill="rgb(226,167,1)"/><text x="1028.00" y="95.50"></text></g><g><title>native_queued_spin_lock_slowpath (30 samples, 0.03%)</title><rect x="1025" y="69" width="0" height="15" fill="rgb(244,183,7)"/><text x="1028.00" y="79.50"></text></g><g><title>select_task_rq_fair (15 samples, 0.02%)</title><rect x="1026" y="101" width="0" height="15" fill="rgb(251,59,29)"/><text x="1029.00" y="111.50"></text></g><g><title>select_idle_sibling (11 samples, 0.01%)</title><rect x="1026" y="85" width="0" height="15" fill="rgb(225,45,12)"/><text x="1029.00" y="95.50"></text></g><g><title>idle_cpu (9 samples, 0.01%)</title><rect x="1026" y="69" width="0" height="15" fill="rgb(247,138,38)"/><text x="1029.00" y="79.50"></text></g><g><title>activate_task (40 samples, 0.04%)</title><rect x="1026" y="85" width="0" height="15" fill="rgb(232,36,34)"/><text x="1029.00" y="95.50"></text></g><g><title>enqueue_task_fair (36 samples, 0.04%)</title><rect x="1026" y="69" width="0" height="15" fill="rgb(214,229,6)"/><text x="1029.00" y="79.50"></text></g><g><title>enqueue_entity (29 samples, 0.03%)</title><rect x="1026" y="53" width="0" height="15" fill="rgb(243,173,47)"/><text x="1029.00" y="63.50"></text></g><g><title>check_preempt_curr (17 samples, 0.02%)</title><rect x="1026" y="69" width="1" height="15" fill="rgb(246,221,42)"/><text x="1029.00" y="79.50"></text></g><g><title>ttwu_do_wakeup (20 samples, 0.02%)</title><rect x="1026" y="85" width="1" height="15" fill="rgb(254,203,54)"/><text x="1029.00" y="95.50"></text></g><g><title>ttwu_do_activate (65 samples, 0.07%)</title><rect x="1026" y="101" width="1" height="15" fill="rgb(208,59,11)"/><text x="1029.00" y="111.50"></text></g><g><title>__queue_work (248 samples, 0.25%)</title><rect x="1024" y="165" width="3" height="15" fill="rgb(231,3,51)"/><text x="1027.00" y="175.50"></text></g><g><title>insert_work (215 samples, 0.22%)</title><rect x="1024" y="149" width="3" height="15" fill="rgb(214,62,12)"/><text x="1027.00" y="159.50"></text></g><g><title>wake_up_process (199 samples, 0.20%)</title><rect x="1024" y="133" width="3" height="15" fill="rgb(222,14,30)"/><text x="1027.00" y="143.50"></text></g><g><title>try_to_wake_up (188 samples, 0.19%)</title><rect x="1025" y="117" width="2" height="15" fill="rgb(236,136,31)"/><text x="1028.00" y="127.50"></text></g><g><title>update_rq_clock (10 samples, 0.01%)</title><rect x="1027" y="101" width="0" height="15" fill="rgb(219,38,11)"/><text x="1030.00" y="111.50"></text></g><g><title>tty_flip_buffer_push (503 samples, 0.51%)</title><rect x="1021" y="197" width="6" height="15" fill="rgb(248,65,19)"/><text x="1024.00" y="207.50"></text></g><g><title>queue_work_on (462 samples, 0.47%)</title><rect x="1021" y="181" width="6" height="15" fill="rgb(235,10,27)"/><text x="1024.00" y="191.50"></text></g><g><title>pty_write (1,054 samples, 1.07%)</title><rect x="1016" y="213" width="13" height="15" fill="rgb(248,27,26)"/><text x="1019.00" y="223.50"></text></g><g><title>tty_insert_flip_string_fixed_flag (153 samples, 0.16%)</title><rect x="1027" y="197" width="2" height="15" fill="rgb(253,90,20)"/><text x="1030.00" y="207.50"></text></g><g><title>__tty_buffer_request_room (77 samples, 0.08%)</title><rect x="1028" y="181" width="1" height="15" fill="rgb(220,193,45)"/><text x="1031.00" y="191.50"></text></g><g><title>tty_flip_buffer_push (14 samples, 0.01%)</title><rect x="1029" y="213" width="0" height="15" fill="rgb(226,179,46)"/><text x="1032.00" y="223.50"></text></g><g><title>do_output_char (1,174 samples, 1.19%)</title><rect x="1015" y="229" width="14" height="15" fill="rgb(239,212,35)"/><text x="1018.00" y="239.50"></text></g><g><title>tty_insert_flip_string_fixed_flag (9 samples, 0.01%)</title><rect x="1029" y="213" width="0" height="15" fill="rgb(228,41,2)"/><text x="1032.00" y="223.50"></text></g><g><title>_cond_resched (12 samples, 0.01%)</title><rect x="1030" y="213" width="0" height="15" fill="rgb(249,40,52)"/><text x="1033.00" y="223.50"></text></g><g><title>down_read (106 samples, 0.11%)</title><rect x="1029" y="229" width="1" height="15" fill="rgb(210,122,44)"/><text x="1032.00" y="239.50"></text></g><g><title>_cond_resched (14 samples, 0.01%)</title><rect x="1032" y="213" width="0" height="15" fill="rgb(213,187,0)"/><text x="1035.00" y="223.50"></text></g><g><title>mutex_lock (164 samples, 0.17%)</title><rect x="1030" y="229" width="2" height="15" fill="rgb(253,99,10)"/><text x="1033.00" y="239.50"></text></g><g><title>rcu_all_qs (10 samples, 0.01%)</title><rect x="1032" y="213" width="0" height="15" fill="rgb(250,185,34)"/><text x="1035.00" y="223.50"></text></g><g><title>mutex_unlock (153 samples, 0.16%)</title><rect x="1032" y="229" width="2" height="15" fill="rgb(218,7,23)"/><text x="1035.00" y="239.50"></text></g><g><title>process_echoes (111 samples, 0.11%)</title><rect x="1034" y="229" width="1" height="15" fill="rgb(243,116,9)"/><text x="1037.00" y="239.50"></text></g><g><title>_raw_spin_lock_irqsave (363 samples, 0.37%)</title><rect x="1037" y="213" width="5" height="15" fill="rgb(228,223,26)"/><text x="1040.00" y="223.50"></text></g><g><title>_raw_spin_unlock_irqrestore (68 samples, 0.07%)</title><rect x="1042" y="213" width="1" height="15" fill="rgb(253,75,23)"/><text x="1045.00" y="223.50"></text></g><g><title>memcpy_erms (76 samples, 0.08%)</title><rect x="1043" y="213" width="1" height="15" fill="rgb(206,34,27)"/><text x="1046.00" y="223.50"></text></g><g><title>queue_work_on (12 samples, 0.01%)</title><rect x="1044" y="213" width="0" height="15" fill="rgb(238,118,38)"/><text x="1047.00" y="223.50"></text></g><g><title>_raw_spin_lock (253 samples, 0.26%)</title><rect x="1053" y="165" width="4" height="15" fill="rgb(232,69,40)"/><text x="1056.00" y="175.50"></text></g><g><title>_find_next_bit (44 samples, 0.04%)</title><rect x="1058" y="149" width="0" height="15" fill="rgb(230,150,7)"/><text x="1061.00" y="159.50"></text></g><g><title>cpumask_next_and (137 samples, 0.14%)</title><rect x="1057" y="165" width="1" height="15" fill="rgb(224,83,22)"/><text x="1060.00" y="175.50"></text></g><g><title>find_next_bit (11 samples, 0.01%)</title><rect x="1058" y="149" width="0" height="15" fill="rgb(248,17,46)"/><text x="1061.00" y="159.50"></text></g><g><title>_find_next_bit (9 samples, 0.01%)</title><rect x="1058" y="133" width="0" height="15" fill="rgb(237,227,52)"/><text x="1061.00" y="143.50"></text></g><g><title>get_work_pool (56 samples, 0.06%)</title><rect x="1058" y="165" width="1" height="15" fill="rgb(208,208,16)"/><text x="1061.00" y="175.50"></text></g><g><title>radix_tree_lookup (44 samples, 0.04%)</title><rect x="1058" y="149" width="1" height="15" fill="rgb(217,175,43)"/><text x="1061.00" y="159.50"></text></g><g><title>__radix_tree_lookup (39 samples, 0.04%)</title><rect x="1059" y="133" width="0" height="15" fill="rgb(239,37,50)"/><text x="1062.00" y="143.50"></text></g><g><title>try_to_wake_up (9 samples, 0.01%)</title><rect x="1063" y="149" width="0" height="15" fill="rgb(238,47,43)"/><text x="1066.00" y="159.50"></text></g><g><title>__indirect_thunk_start (9 samples, 0.01%)</title><rect x="1063" y="133" width="0" height="15" fill="rgb(227,210,54)"/><text x="1066.00" y="143.50"></text></g><g><title>_raw_spin_unlock_irqrestore (26 samples, 0.03%)</title><rect x="1063" y="133" width="1" height="15" fill="rgb(235,186,5)"/><text x="1066.00" y="143.50"></text></g><g><title>select_task_rq_fair (86 samples, 0.09%)</title><rect x="1064" y="133" width="1" height="15" fill="rgb(241,93,31)"/><text x="1067.00" y="143.50"></text></g><g><title>_raw_spin_lock (33 samples, 0.03%)</title><rect x="1071" y="101" width="0" height="15" fill="rgb(223,199,27)"/><text x="1074.00" y="111.50"></text></g><g><title>native_queued_spin_lock_slowpath (32 samples, 0.03%)</title><rect x="1071" y="85" width="0" height="15" fill="rgb(223,50,25)"/><text x="1074.00" y="95.50"></text></g><g><title>__task_rq_lock (35 samples, 0.04%)</title><rect x="1071" y="117" width="0" height="15" fill="rgb(220,133,15)"/><text x="1074.00" y="127.50"></text></g><g><title>_raw_spin_lock (238 samples, 0.24%)</title><rect x="1071" y="117" width="3" height="15" fill="rgb(235,40,29)"/><text x="1074.00" y="127.50"></text></g><g><title>_raw_spin_lock_irqsave (218 samples, 0.22%)</title><rect x="1074" y="117" width="3" height="15" fill="rgb(225,104,30)"/><text x="1077.00" y="127.50"></text></g><g><title>_raw_spin_unlock_irqrestore (38 samples, 0.04%)</title><rect x="1077" y="117" width="0" height="15" fill="rgb(207,141,19)"/><text x="1080.00" y="127.50"></text></g><g><title>select_idle_sibling (10 samples, 0.01%)</title><rect x="1077" y="117" width="0" height="15" fill="rgb(210,91,18)"/><text x="1080.00" y="127.50"></text></g><g><title>idle_cpu (32 samples, 0.03%)</title><rect x="1079" y="101" width="0" height="15" fill="rgb(246,160,0)"/><text x="1082.00" y="111.50"></text></g><g><title>select_task_rq_fair (691 samples, 0.70%)</title><rect x="1077" y="117" width="8" height="15" fill="rgb(250,177,33)"/><text x="1080.00" y="127.50"></text></g><g><title>select_idle_sibling (509 samples, 0.52%)</title><rect x="1079" y="101" width="6" height="15" fill="rgb(230,194,8)"/><text x="1082.00" y="111.50"></text></g><g><title>idle_cpu (470 samples, 0.48%)</title><rect x="1080" y="85" width="5" height="15" fill="rgb(239,3,52)"/><text x="1083.00" y="95.50"></text></g><g><title>enqueue_entity (10 samples, 0.01%)</title><rect x="1088" y="85" width="1" height="15" fill="rgb(215,5,26)"/><text x="1091.00" y="95.50"></text></g><g><title>__enqueue_entity (10 samples, 0.01%)</title><rect x="1091" y="69" width="0" height="15" fill="rgb(228,69,33)"/><text x="1094.00" y="79.50"></text></g><g><title>account_entity_enqueue (95 samples, 0.10%)</title><rect x="1091" y="69" width="2" height="15" fill="rgb(215,188,26)"/><text x="1094.00" y="79.50"></text></g><g><title>__enqueue_entity (40 samples, 0.04%)</title><rect x="1096" y="53" width="1" height="15" fill="rgb(218,11,15)"/><text x="1099.00" y="63.50"></text></g><g><title>rb_insert_color_cached (22 samples, 0.02%)</title><rect x="1097" y="37" width="0" height="15" fill="rgb(213,132,19)"/><text x="1100.00" y="47.50"></text></g><g><title>__update_load_avg_se.isra.38 (58 samples, 0.06%)</title><rect x="1097" y="53" width="0" height="15" fill="rgb(254,124,25)"/><text x="1100.00" y="63.50"></text></g><g><title>account_entity_enqueue (46 samples, 0.05%)</title><rect x="1097" y="53" width="1" height="15" fill="rgb(235,206,3)"/><text x="1100.00" y="63.50"></text></g><g><title>update_curr (86 samples, 0.09%)</title><rect x="1098" y="53" width="1" height="15" fill="rgb(225,67,30)"/><text x="1101.00" y="63.50"></text></g><g><title>enqueue_entity (834 samples, 0.85%)</title><rect x="1093" y="69" width="9" height="15" fill="rgb(237,195,43)"/><text x="1096.00" y="79.50"></text></g><g><title>update_load_avg (276 samples, 0.28%)</title><rect x="1099" y="53" width="3" height="15" fill="rgb(205,116,22)"/><text x="1102.00" y="63.50"></text></g><g><title>__update_load_avg_se.isra.38 (42 samples, 0.04%)</title><rect x="1102" y="37" width="0" height="15" fill="rgb(222,89,54)"/><text x="1105.00" y="47.50"></text></g><g><title>update_cfs_group (15 samples, 0.02%)</title><rect x="1102" y="69" width="1" height="15" fill="rgb(238,132,20)"/><text x="1105.00" y="79.50"></text></g><g><title>enqueue_task_fair (1,191 samples, 1.21%)</title><rect x="1089" y="85" width="14" height="15" fill="rgb(236,43,36)"/><text x="1092.00" y="95.50"></text></g><g><title>activate_task (1,400 samples, 1.42%)</title><rect x="1086" y="101" width="17" height="15" fill="rgb(225,64,4)"/><text x="1089.00" y="111.50"></text></g><g><title>check_preempt_curr (15 samples, 0.02%)</title><rect x="1103" y="101" width="0" height="15" fill="rgb(241,46,48)"/><text x="1106.00" y="111.50"></text></g><g><title>enqueue_task_fair (22 samples, 0.02%)</title><rect x="1103" y="101" width="0" height="15" fill="rgb(245,133,32)"/><text x="1106.00" y="111.50"></text></g><g><title>kthread_data (114 samples, 0.12%)</title><rect x="1103" y="101" width="2" height="15" fill="rgb(250,2,26)"/><text x="1106.00" y="111.50"></text></g><g><title>check_preempt_curr (462 samples, 0.47%)</title><rect x="1105" y="85" width="6" height="15" fill="rgb(238,75,47)"/><text x="1108.00" y="95.50"></text></g><g><title>resched_curr (320 samples, 0.32%)</title><rect x="1107" y="69" width="4" height="15" fill="rgb(246,142,42)"/><text x="1110.00" y="79.50"></text></g><g><title>ttwu_do_wakeup (588 samples, 0.60%)</title><rect x="1105" y="101" width="7" height="15" fill="rgb(217,38,1)"/><text x="1108.00" y="111.50"></text></g><g><title>resched_curr (88 samples, 0.09%)</title><rect x="1111" y="85" width="1" height="15" fill="rgb(238,121,37)"/><text x="1114.00" y="95.50"></text></g><g><title>ttwu_do_activate (2,233 samples, 2.26%)</title><rect x="1085" y="117" width="27" height="15" fill="rgb(227,124,15)"/><text x="1088.00" y="127.50">t..</text></g><g><title>wq_worker_waking_up (38 samples, 0.04%)</title><rect x="1112" y="101" width="0" height="15" fill="rgb(248,144,54)"/><text x="1115.00" y="111.50"></text></g><g><title>update_rq_clock (286 samples, 0.29%)</title><rect x="1112" y="117" width="4" height="15" fill="rgb(226,128,45)"/><text x="1115.00" y="127.50"></text></g><g><title>sched_clock_cpu (114 samples, 0.12%)</title><rect x="1114" y="101" width="2" height="15" fill="rgb(233,160,29)"/><text x="1117.00" y="111.50"></text></g><g><title>sched_clock (93 samples, 0.09%)</title><rect x="1115" y="85" width="1" height="15" fill="rgb(251,171,36)"/><text x="1118.00" y="95.50"></text></g><g><title>native_sched_clock (87 samples, 0.09%)</title><rect x="1115" y="69" width="1" height="15" fill="rgb(225,16,36)"/><text x="1118.00" y="79.50"></text></g><g><title>try_to_wake_up (4,264 samples, 4.32%)</title><rect x="1065" y="133" width="51" height="15" fill="rgb(222,149,43)"/><text x="1068.00" y="143.50">try_t..</text></g><g><title>insert_work (4,745 samples, 4.81%)</title><rect x="1059" y="165" width="57" height="15" fill="rgb(254,159,3)"/><text x="1062.00" y="175.50">insert..</text></g><g><title>wake_up_process (4,400 samples, 4.46%)</title><rect x="1063" y="149" width="53" height="15" fill="rgb(235,206,47)"/><text x="1066.00" y="159.50">wake_..</text></g><g><title>__queue_work (5,634 samples, 5.71%)</title><rect x="1048" y="181" width="68" height="15" fill="rgb(207,5,48)"/><text x="1051.00" y="191.50">__queue..</text></g><g><title>find_first_bit (11 samples, 0.01%)</title><rect x="1116" y="181" width="0" height="15" fill="rgb(248,156,1)"/><text x="1119.00" y="191.50"></text></g><g><title>get_work_pool (13 samples, 0.01%)</title><rect x="1116" y="181" width="0" height="15" fill="rgb(219,183,46)"/><text x="1119.00" y="191.50"></text></g><g><title>tty_flip_buffer_push (6,076 samples, 6.16%)</title><rect x="1044" y="213" width="72" height="15" fill="rgb(239,95,14)"/><text x="1047.00" y="223.50">tty_flip..</text></g><g><title>queue_work_on (6,024 samples, 6.11%)</title><rect x="1044" y="197" width="72" height="15" fill="rgb(231,177,50)"/><text x="1047.00" y="207.50">queue_wo..</text></g><g><title>insert_work (11 samples, 0.01%)</title><rect x="1116" y="181" width="0" height="15" fill="rgb(248,103,32)"/><text x="1119.00" y="191.50"></text></g><g><title>__tty_buffer_request_room (291 samples, 0.30%)</title><rect x="1117" y="197" width="4" height="15" fill="rgb(209,202,0)"/><text x="1120.00" y="207.50"></text></g><g><title>llist_del_first (17 samples, 0.02%)</title><rect x="1121" y="181" width="0" height="15" fill="rgb(237,28,49)"/><text x="1124.00" y="191.50"></text></g><g><title>pty_write (7,147 samples, 7.25%)</title><rect x="1035" y="229" width="86" height="15" fill="rgb(223,155,25)"/><text x="1038.00" y="239.50">pty_write</text></g><g><title>tty_insert_flip_string_fixed_flag (377 samples, 0.38%)</title><rect x="1116" y="213" width="5" height="15" fill="rgb(220,194,8)"/><text x="1119.00" y="223.50"></text></g><g><title>pty_write_room (100 samples, 0.10%)</title><rect x="1121" y="229" width="1" height="15" fill="rgb(249,114,42)"/><text x="1124.00" y="239.50"></text></g><g><title>_raw_spin_lock_irqsave (144 samples, 0.15%)</title><rect x="1122" y="213" width="2" height="15" fill="rgb(251,27,13)"/><text x="1125.00" y="223.50"></text></g><g><title>remove_wait_queue (265 samples, 0.27%)</title><rect x="1122" y="229" width="3" height="15" fill="rgb(209,19,49)"/><text x="1125.00" y="239.50"></text></g><g><title>_raw_spin_unlock_irqrestore (92 samples, 0.09%)</title><rect x="1124" y="213" width="1" height="15" fill="rgb(237,4,38)"/><text x="1127.00" y="223.50"></text></g><g><title>tty_flip_buffer_push (13 samples, 0.01%)</title><rect x="1125" y="229" width="0" height="15" fill="rgb(206,103,21)"/><text x="1128.00" y="239.50"></text></g><g><title>tty_hung_up_p (22 samples, 0.02%)</title><rect x="1125" y="229" width="1" height="15" fill="rgb(248,32,6)"/><text x="1128.00" y="239.50"></text></g><g><title>tty_insert_flip_string_fixed_flag (9 samples, 0.01%)</title><rect x="1126" y="229" width="0" height="15" fill="rgb(240,116,35)"/><text x="1129.00" y="239.50"></text></g><g><title>pty_write_room (54 samples, 0.05%)</title><rect x="1126" y="213" width="1" height="15" fill="rgb(232,66,27)"/><text x="1129.00" y="223.50"></text></g><g><title>tty_write_room (261 samples, 0.26%)</title><rect x="1126" y="229" width="3" height="15" fill="rgb(235,12,8)"/><text x="1129.00" y="239.50"></text></g><g><title>tty_buffer_space_avail (197 samples, 0.20%)</title><rect x="1127" y="213" width="2" height="15" fill="rgb(223,151,6)"/><text x="1130.00" y="223.50"></text></g><g><title>n_tty_write (10,921 samples, 11.08%)</title><rect x="999" y="245" width="131" height="15" fill="rgb(207,184,44)"/><text x="1002.00" y="255.50">n_tty_write</text></g><g><title>up_read (84 samples, 0.09%)</title><rect x="1129" y="229" width="1" height="15" fill="rgb(211,143,20)"/><text x="1132.00" y="239.50"></text></g><g><title>pty_write (136 samples, 0.14%)</title><rect x="1130" y="245" width="2" height="15" fill="rgb(217,39,34)"/><text x="1133.00" y="255.50"></text></g><g><title>remove_wait_queue (9 samples, 0.01%)</title><rect x="1132" y="245" width="0" height="15" fill="rgb(239,122,0)"/><text x="1135.00" y="255.50"></text></g><g><title>tty_ldisc_deref (87 samples, 0.09%)</title><rect x="1132" y="245" width="1" height="15" fill="rgb(235,185,10)"/><text x="1135.00" y="255.50"></text></g><g><title>ldsem_up_read (78 samples, 0.08%)</title><rect x="1132" y="229" width="1" height="15" fill="rgb(241,5,47)"/><text x="1135.00" y="239.50"></text></g><g><title>_cond_resched (13 samples, 0.01%)</title><rect x="1134" y="213" width="0" height="15" fill="rgb(251,102,27)"/><text x="1137.00" y="223.50"></text></g><g><title>tty_ldisc_ref_wait (142 samples, 0.14%)</title><rect x="1133" y="245" width="1" height="15" fill="rgb(210,36,0)"/><text x="1136.00" y="255.50"></text></g><g><title>ldsem_down_read (124 samples, 0.13%)</title><rect x="1133" y="229" width="1" height="15" fill="rgb(217,134,27)"/><text x="1136.00" y="239.50"></text></g><g><title>rcu_all_qs (9 samples, 0.01%)</title><rect x="1134" y="213" width="0" height="15" fill="rgb(208,24,51)"/><text x="1137.00" y="223.50"></text></g><g><title>tty_paranoia_check (50 samples, 0.05%)</title><rect x="1134" y="245" width="1" height="15" fill="rgb(252,37,16)"/><text x="1137.00" y="255.50"></text></g><g><title>tty_write_lock (114 samples, 0.12%)</title><rect x="1135" y="245" width="1" height="15" fill="rgb(221,82,42)"/><text x="1138.00" y="255.50"></text></g><g><title>mutex_trylock (100 samples, 0.10%)</title><rect x="1135" y="229" width="1" height="15" fill="rgb(229,209,42)"/><text x="1138.00" y="239.50"></text></g><g><title>tty_write_room (29 samples, 0.03%)</title><rect x="1136" y="245" width="1" height="15" fill="rgb(253,192,52)"/><text x="1139.00" y="255.50"></text></g><g><title>__wake_up_common (28 samples, 0.03%)</title><rect x="1138" y="197" width="0" height="15" fill="rgb(234,174,2)"/><text x="1141.00" y="207.50"></text></g><g><title>_raw_spin_lock_irqsave (113 samples, 0.11%)</title><rect x="1138" y="197" width="2" height="15" fill="rgb(243,52,22)"/><text x="1141.00" y="207.50"></text></g><g><title>__wake_up_common_lock (280 samples, 0.28%)</title><rect x="1137" y="213" width="3" height="15" fill="rgb(246,132,13)"/><text x="1140.00" y="223.50"></text></g><g><title>_raw_spin_unlock_irqrestore (61 samples, 0.06%)</title><rect x="1140" y="197" width="0" height="15" fill="rgb(241,145,4)"/><text x="1143.00" y="207.50"></text></g><g><title>__wake_up (317 samples, 0.32%)</title><rect x="1137" y="229" width="4" height="15" fill="rgb(249,203,16)"/><text x="1140.00" y="239.50"></text></g><g><title>_raw_spin_unlock_irqrestore (29 samples, 0.03%)</title><rect x="1140" y="213" width="1" height="15" fill="rgb(213,3,48)"/><text x="1143.00" y="223.50"></text></g><g><title>tty_write_unlock (402 samples, 0.41%)</title><rect x="1137" y="245" width="5" height="15" fill="rgb(230,82,40)"/><text x="1140.00" y="255.50"></text></g><g><title>mutex_unlock (74 samples, 0.08%)</title><rect x="1141" y="229" width="1" height="15" fill="rgb(236,146,29)"/><text x="1144.00" y="239.50"></text></g><g><title>tty_write (12,884 samples, 13.07%)</title><rect x="987" y="261" width="155" height="15" fill="rgb(222,41,30)"/><text x="990.00" y="271.50">tty_write</text></g><g><title>__vfs_write (13,081 samples, 13.27%)</title><rect x="985" y="277" width="157" height="15" fill="rgb(250,97,37)"/><text x="988.00" y="287.50">__vfs_write</text></g><g><title>fsnotify (99 samples, 0.10%)</title><rect x="1142" y="277" width="1" height="15" fill="rgb(229,142,44)"/><text x="1145.00" y="287.50"></text></g><g><title>__indirect_thunk_start (13 samples, 0.01%)</title><rect x="1143" y="261" width="0" height="15" fill="rgb(235,99,28)"/><text x="1146.00" y="271.50"></text></g><g><title>apparmor_file_permission (103 samples, 0.10%)</title><rect x="1143" y="261" width="1" height="15" fill="rgb(228,171,6)"/><text x="1146.00" y="271.50"></text></g><g><title>aa_file_perm (36 samples, 0.04%)</title><rect x="1149" y="213" width="0" height="15" fill="rgb(208,169,48)"/><text x="1152.00" y="223.50"></text></g><g><title>apparmor_file_permission (308 samples, 0.31%)</title><rect x="1146" y="245" width="3" height="15" fill="rgb(234,0,34)"/><text x="1149.00" y="255.50"></text></g><g><title>common_file_perm (286 samples, 0.29%)</title><rect x="1146" y="229" width="3" height="15" fill="rgb(216,219,31)"/><text x="1149.00" y="239.50"></text></g><g><title>rw_verify_area (588 samples, 0.60%)</title><rect x="1143" y="277" width="7" height="15" fill="rgb(224,175,21)"/><text x="1146.00" y="287.50"></text></g><g><title>security_file_permission (463 samples, 0.47%)</title><rect x="1144" y="261" width="6" height="15" fill="rgb(208,182,15)"/><text x="1147.00" y="271.50"></text></g><g><title>common_file_perm (61 samples, 0.06%)</title><rect x="1149" y="245" width="1" height="15" fill="rgb(212,138,41)"/><text x="1152.00" y="255.50"></text></g><g><title>sys_write (14,604 samples, 14.81%)</title><rect x="977" y="309" width="174" height="15" fill="rgb(226,147,18)"/><text x="980.00" y="319.50">sys_write</text></g><g><title>vfs_write (14,073 samples, 14.27%)</title><rect x="983" y="293" width="168" height="15" fill="rgb(236,68,19)"/><text x="986.00" y="303.50">vfs_write</text></g><g><title>tty_write (103 samples, 0.10%)</title><rect x="1150" y="277" width="1" height="15" fill="rgb(252,24,13)"/><text x="1153.00" y="287.50"></text></g><g><title>do_syscall_64 (16,355 samples, 16.59%)</title><rect x="956" y="325" width="195" height="15" fill="rgb(247,20,38)"/><text x="959.00" y="335.50">do_syscall_64</text></g><g><title>entry_SYSCALL_64_after_hwframe (16,515 samples, 16.75%)</title><rect x="955" y="341" width="197" height="15" fill="rgb(207,136,6)"/><text x="958.00" y="351.50">entry_SYSCALL_64_after_hw..</text></g><g><title>sys_write (93 samples, 0.09%)</title><rect x="1151" y="325" width="1" height="15" fill="rgb(206,114,23)"/><text x="1154.00" y="335.50"></text></g><g><title>__libc_write (18,655 samples, 18.92%)</title><rect x="941" y="357" width="224" height="15" fill="rgb(234,26,51)"/><text x="944.00" y="367.50">__libc_write</text></g><g><title>syscall_return_via_sysret (1,017 samples, 1.03%)</title><rect x="1152" y="341" width="13" height="15" fill="rgb(254,171,9)"/><text x="1155.00" y="351.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (18,666 samples, 18.93%)</title><rect x="941" y="405" width="224" height="15" fill="rgb(234,218,31)"/><text x="944.00" y="415.50">&lt;std::io::stdio::StdoutRaw as..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (18,666 samples, 18.93%)</title><rect x="941" y="389" width="224" height="15" fill="rgb(232,30,3)"/><text x="944.00" y="399.50">&lt;std::sys::unix::stdio::Stdou..</text></g><g><title>std::sys::unix::fd::FileDesc::write (18,666 samples, 18.93%)</title><rect x="941" y="373" width="224" height="15" fill="rgb(220,154,0)"/><text x="944.00" y="383.50">std::sys::unix::fd::FileDesc:..</text></g><g><title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (18,675 samples, 18.94%)</title><rect x="941" y="421" width="224" height="15" fill="rgb(206,173,25)"/><text x="944.00" y="431.50">&lt;std::io::stdio::Maybe&lt;W&gt; as ..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::len (20 samples, 0.02%)</title><rect x="1165" y="405" width="0" height="15" fill="rgb(210,195,16)"/><text x="1168.00" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::drain (25 samples, 0.03%)</title><rect x="1165" y="421" width="0" height="15" fill="rgb(225,14,8)"/><text x="1168.00" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.01%)</title><rect x="1165" y="421" width="0" height="15" fill="rgb(232,127,50)"/><text x="1168.00" y="431.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (18,777 samples, 19.04%)</title><rect x="941" y="469" width="224" height="15" fill="rgb(243,137,10)"/><text x="944.00" y="479.50">&lt;std::io::buffered::LineWrite..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (18,775 samples, 19.04%)</title><rect x="941" y="453" width="224" height="15" fill="rgb(254,178,1)"/><text x="944.00" y="463.50">&lt;std::io::buffered::BufWriter..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (18,768 samples, 19.03%)</title><rect x="941" y="437" width="224" height="15" fill="rgb(248,223,27)"/><text x="944.00" y="447.50">std::io::buffered::BufWriter&lt;..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (19,082 samples, 19.35%)</title><rect x="938" y="485" width="228" height="15" fill="rgb(241,190,20)"/><text x="941.00" y="495.50">&lt;std::io::buffered::LineWriter..</text></g><g><title>std::memchr::memrchr (77 samples, 0.08%)</title><rect x="1165" y="469" width="1" height="15" fill="rgb(241,138,1)"/><text x="1168.00" y="479.50"></text></g><g><title>std::sys::unix::memchr::memrchr (77 samples, 0.08%)</title><rect x="1165" y="453" width="1" height="15" fill="rgb(251,186,45)"/><text x="1168.00" y="463.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (77 samples, 0.08%)</title><rect x="1165" y="437" width="1" height="15" fill="rgb(214,188,38)"/><text x="1168.00" y="447.50"></text></g><g><title>__memrchr_avx2 (72 samples, 0.07%)</title><rect x="1165" y="421" width="1" height="15" fill="rgb(233,21,26)"/><text x="1168.00" y="431.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.03%)</title><rect x="1166" y="485" width="1" height="15" fill="rgb(240,45,31)"/><text x="1169.00" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (51 samples, 0.05%)</title><rect x="1167" y="485" width="0" height="15" fill="rgb(247,99,54)"/><text x="1170.00" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (51 samples, 0.05%)</title><rect x="1167" y="469" width="0" height="15" fill="rgb(218,47,36)"/><text x="1170.00" y="479.50"></text></g><g><title>core::cell::BorrowRefMut::new (47 samples, 0.05%)</title><rect x="1167" y="453" width="0" height="15" fill="rgb(242,100,1)"/><text x="1170.00" y="463.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (19,191 samples, 19.46%)</title><rect x="938" y="501" width="230" height="15" fill="rgb(210,194,9)"/><text x="941.00" y="511.50">&lt;std::io::stdio::StdoutLock as..</text></g><g><title>core::ptr::real_drop_in_place (32 samples, 0.03%)</title><rect x="1167" y="485" width="1" height="15" fill="rgb(244,124,9)"/><text x="1170.00" y="495.50"></text></g><g><title>core::ptr::real_drop_in_place (32 samples, 0.03%)</title><rect x="1167" y="469" width="1" height="15" fill="rgb(213,3,51)"/><text x="1170.00" y="479.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="1167" y="453" width="1" height="15" fill="rgb(235,6,48)"/><text x="1170.00" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (32 samples, 0.03%)</title><rect x="1167" y="437" width="1" height="15" fill="rgb(215,123,39)"/><text x="1170.00" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (32 samples, 0.03%)</title><rect x="1167" y="421" width="1" height="15" fill="rgb(246,15,17)"/><text x="1170.00" y="431.50"></text></g><g><title>core::mem::replace (32 samples, 0.03%)</title><rect x="1167" y="405" width="1" height="15" fill="rgb(235,53,5)"/><text x="1170.00" y="415.50"></text></g><g><title>core::mem::swap (32 samples, 0.03%)</title><rect x="1167" y="389" width="1" height="15" fill="rgb(237,22,49)"/><text x="1170.00" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (32 samples, 0.03%)</title><rect x="1167" y="373" width="1" height="15" fill="rgb(210,29,36)"/><text x="1170.00" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="1167" y="357" width="1" height="15" fill="rgb(244,97,4)"/><text x="1170.00" y="367.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (19,289 samples, 19.56%)</title><rect x="937" y="533" width="231" height="15" fill="rgb(213,7,34)"/><text x="940.00" y="543.50">&lt;std::io::Write::write_fmt::Ad..</text></g><g><title>std::io::Write::write_all (19,258 samples, 19.53%)</title><rect x="937" y="517" width="231" height="15" fill="rgb(214,73,41)"/><text x="940.00" y="527.50">std::io::Write::write_all</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (47 samples, 0.05%)</title><rect x="1170" y="373" width="0" height="15" fill="rgb(247,218,1)"/><text x="1173.00" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.05%)</title><rect x="1170" y="357" width="0" height="15" fill="rgb(239,88,35)"/><text x="1173.00" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (46 samples, 0.05%)</title><rect x="1170" y="341" width="0" height="15" fill="rgb(229,143,38)"/><text x="1173.00" y="351.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (83 samples, 0.08%)</title><rect x="1169" y="437" width="1" height="15" fill="rgb(253,44,51)"/><text x="1172.00" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (71 samples, 0.07%)</title><rect x="1170" y="421" width="0" height="15" fill="rgb(243,127,44)"/><text x="1173.00" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (60 samples, 0.06%)</title><rect x="1170" y="405" width="0" height="15" fill="rgb(228,172,2)"/><text x="1173.00" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (60 samples, 0.06%)</title><rect x="1170" y="389" width="0" height="15" fill="rgb(252,158,25)"/><text x="1173.00" y="399.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (144 samples, 0.15%)</title><rect x="1169" y="453" width="2" height="15" fill="rgb(238,139,9)"/><text x="1172.00" y="463.50"></text></g><g><title>std::memchr::memrchr (41 samples, 0.04%)</title><rect x="1170" y="437" width="1" height="15" fill="rgb(240,70,7)"/><text x="1173.00" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr (41 samples, 0.04%)</title><rect x="1170" y="421" width="1" height="15" fill="rgb(216,120,6)"/><text x="1173.00" y="431.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (41 samples, 0.04%)</title><rect x="1170" y="405" width="1" height="15" fill="rgb(248,154,25)"/><text x="1173.00" y="415.50"></text></g><g><title>__memrchr_avx2 (35 samples, 0.04%)</title><rect x="1170" y="389" width="1" height="15" fill="rgb(248,221,4)"/><text x="1173.00" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (16 samples, 0.02%)</title><rect x="1171" y="453" width="0" height="15" fill="rgb(251,212,0)"/><text x="1174.00" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (16 samples, 0.02%)</title><rect x="1171" y="437" width="0" height="15" fill="rgb(253,175,42)"/><text x="1174.00" y="447.50"></text></g><g><title>core::cell::BorrowRefMut::new (11 samples, 0.01%)</title><rect x="1171" y="421" width="0" height="15" fill="rgb(241,154,42)"/><text x="1174.00" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (191 samples, 0.19%)</title><rect x="1169" y="469" width="2" height="15" fill="rgb(218,88,42)"/><text x="1172.00" y="479.50"></text></g><g><title>core::ptr::real_drop_in_place (24 samples, 0.02%)</title><rect x="1171" y="453" width="0" height="15" fill="rgb(232,32,42)"/><text x="1174.00" y="463.50"></text></g><g><title>core::ptr::real_drop_in_place (24 samples, 0.02%)</title><rect x="1171" y="437" width="0" height="15" fill="rgb(210,161,6)"/><text x="1174.00" y="447.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="1171" y="421" width="0" height="15" fill="rgb(209,89,5)"/><text x="1174.00" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (24 samples, 0.02%)</title><rect x="1171" y="405" width="0" height="15" fill="rgb(230,119,4)"/><text x="1174.00" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.02%)</title><rect x="1171" y="389" width="0" height="15" fill="rgb(210,197,43)"/><text x="1174.00" y="399.50"></text></g><g><title>core::mem::replace (24 samples, 0.02%)</title><rect x="1171" y="373" width="0" height="15" fill="rgb(233,130,22)"/><text x="1174.00" y="383.50"></text></g><g><title>core::mem::swap (24 samples, 0.02%)</title><rect x="1171" y="357" width="0" height="15" fill="rgb(234,30,43)"/><text x="1174.00" y="367.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (24 samples, 0.02%)</title><rect x="1171" y="341" width="0" height="15" fill="rgb(254,51,1)"/><text x="1174.00" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="1171" y="325" width="0" height="15" fill="rgb(209,180,27)"/><text x="1174.00" y="335.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (229 samples, 0.23%)</title><rect x="1169" y="501" width="3" height="15" fill="rgb(223,66,41)"/><text x="1172.00" y="511.50"></text></g><g><title>std::io::Write::write_all (221 samples, 0.22%)</title><rect x="1169" y="485" width="3" height="15" fill="rgb(240,94,42)"/><text x="1172.00" y="495.50"></text></g><g><title>core::fmt::Formatter::pad_integral (50 samples, 0.05%)</title><rect x="1172" y="501" width="0" height="15" fill="rgb(250,25,45)"/><text x="1175.00" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (13 samples, 0.01%)</title><rect x="1172" y="485" width="0" height="15" fill="rgb(254,85,42)"/><text x="1175.00" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.05%)</title><rect x="1172" y="501" width="1" height="15" fill="rgb(237,117,9)"/><text x="1175.00" y="511.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (422 samples, 0.43%)</title><rect x="1168" y="533" width="5" height="15" fill="rgb(249,16,50)"/><text x="1171.00" y="543.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (407 samples, 0.41%)</title><rect x="1168" y="517" width="5" height="15" fill="rgb(250,167,28)"/><text x="1171.00" y="527.50"></text></g><g><title>core::fmt::write (19,806 samples, 20.09%)</title><rect x="936" y="549" width="237" height="15" fill="rgb(249,191,28)"/><text x="939.00" y="559.50">core::fmt::write</text></g><g><title>std::io::Write::write_fmt (19,828 samples, 20.11%)</title><rect x="936" y="565" width="237" height="15" fill="rgb(232,210,51)"/><text x="939.00" y="575.50">std::io::Write::write_fmt</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (102 samples, 0.10%)</title><rect x="1173" y="533" width="1" height="15" fill="rgb(241,141,5)"/><text x="1176.00" y="543.50"></text></g><g><title>__GI___pthread_mutex_lock (102 samples, 0.10%)</title><rect x="1173" y="517" width="1" height="15" fill="rgb(244,20,29)"/><text x="1176.00" y="527.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (20,123 samples, 20.41%)</title><rect x="934" y="581" width="240" height="15" fill="rgb(213,100,19)"/><text x="937.00" y="591.50">&lt;std::io::stdio::Stdout as std:..</text></g><g><title>std::io::stdio::Stdout::lock (112 samples, 0.11%)</title><rect x="1173" y="565" width="1" height="15" fill="rgb(218,38,26)"/><text x="1176.00" y="575.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (111 samples, 0.11%)</title><rect x="1173" y="549" width="1" height="15" fill="rgb(245,79,39)"/><text x="1176.00" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.07%)</title><rect x="1174" y="549" width="1" height="15" fill="rgb(206,75,7)"/><text x="1177.00" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (63 samples, 0.06%)</title><rect x="1174" y="533" width="1" height="15" fill="rgb(243,58,53)"/><text x="1177.00" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (63 samples, 0.06%)</title><rect x="1174" y="517" width="1" height="15" fill="rgb(218,23,40)"/><text x="1177.00" y="527.50"></text></g><g><title>core::ptr::real_drop_in_place (72 samples, 0.07%)</title><rect x="1174" y="581" width="1" height="15" fill="rgb(227,188,52)"/><text x="1177.00" y="591.50"></text></g><g><title>core::ptr::real_drop_in_place (72 samples, 0.07%)</title><rect x="1174" y="565" width="1" height="15" fill="rgb(211,129,46)"/><text x="1177.00" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (101 samples, 0.10%)</title><rect x="1175" y="549" width="1" height="15" fill="rgb(221,6,11)"/><text x="1178.00" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (84 samples, 0.09%)</title><rect x="1175" y="533" width="1" height="15" fill="rgb(218,99,15)"/><text x="1178.00" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (84 samples, 0.09%)</title><rect x="1175" y="517" width="1" height="15" fill="rgb(237,225,47)"/><text x="1178.00" y="527.50"></text></g><g><title>core::ptr::real_drop_in_place (96 samples, 0.10%)</title><rect x="1176" y="549" width="2" height="15" fill="rgb(245,229,10)"/><text x="1179.00" y="559.50"></text></g><g><title>&lt;std::sys_common::mutex::MutexGuard as core::ops::drop::Drop&gt;::drop (96 samples, 0.10%)</title><rect x="1176" y="533" width="2" height="15" fill="rgb(215,178,25)"/><text x="1179.00" y="543.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (96 samples, 0.10%)</title><rect x="1176" y="517" width="2" height="15" fill="rgb(223,0,26)"/><text x="1179.00" y="527.50"></text></g><g><title>__GI___pthread_mutex_unlock (96 samples, 0.10%)</title><rect x="1176" y="501" width="2" height="15" fill="rgb(248,226,38)"/><text x="1179.00" y="511.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (90 samples, 0.09%)</title><rect x="1177" y="485" width="1" height="15" fill="rgb(229,75,10)"/><text x="1180.00" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (30,750 samples, 31.19%)</title><rect x="811" y="677" width="368" height="15" fill="rgb(208,3,38)"/><text x="814.00" y="687.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnM..</text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h98ce98c98d7b80a2 (30,747 samples, 31.18%)</title><rect x="811" y="661" width="368" height="15" fill="rgb(241,218,42)"/><text x="814.00" y="671.50">pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u..</text></g><g><title>std::io::stdio::_print (20,613 samples, 20.91%)</title><rect x="932" y="645" width="247" height="15" fill="rgb(237,121,17)"/><text x="935.00" y="655.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (20,517 samples, 20.81%)</title><rect x="933" y="629" width="246" height="15" fill="rgb(234,14,10)"/><text x="936.00" y="639.50">std::io::stdio::print_to</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,508 samples, 20.80%)</title><rect x="933" y="613" width="246" height="15" fill="rgb(216,203,26)"/><text x="936.00" y="623.50">std::thread::local::LocalKey&lt;T&gt;:..</text></g><g><title>std::io::stdio::print_to::_$u7b$$u7b$closure$u7d$$u7d$::h0249537fb9ef42b4 (20,504 samples, 20.79%)</title><rect x="933" y="597" width="246" height="15" fill="rgb(213,126,32)"/><text x="936.00" y="607.50">std::io::stdio::print_to::_$u7b$..</text></g><g><title>std::io::stdio::stdout (296 samples, 0.30%)</title><rect x="1175" y="581" width="4" height="15" fill="rgb(239,135,28)"/><text x="1178.00" y="591.50"></text></g><g><title>std::io::lazy::Lazy&lt;T&gt;::get (296 samples, 0.30%)</title><rect x="1175" y="565" width="4" height="15" fill="rgb(230,51,21)"/><text x="1178.00" y="575.50"></text></g><g><title>std::sys_common::mutex::Mutex::lock (99 samples, 0.10%)</title><rect x="1178" y="549" width="1" height="15" fill="rgb(222,158,54)"/><text x="1181.00" y="559.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (99 samples, 0.10%)</title><rect x="1178" y="533" width="1" height="15" fill="rgb(208,215,16)"/><text x="1181.00" y="543.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (99 samples, 0.10%)</title><rect x="1178" y="517" width="1" height="15" fill="rgb(205,187,33)"/><text x="1181.00" y="527.50"></text></g><g><title>__GI___pthread_mutex_lock (98 samples, 0.10%)</title><rect x="1178" y="501" width="1" height="15" fill="rgb(211,131,39)"/><text x="1181.00" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (111 samples, 0.11%)</title><rect x="1179" y="645" width="1" height="15" fill="rgb(216,74,3)"/><text x="1182.00" y="655.50"></text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h3f779dbe4e978258 (109 samples, 0.11%)</title><rect x="1179" y="629" width="1" height="15" fill="rgb(214,79,38)"/><text x="1182.00" y="639.50"></text></g><g><title>e2d2::headers::ip::IpHeader::flow (28 samples, 0.03%)</title><rect x="1180" y="613" width="0" height="15" fill="rgb(246,63,25)"/><text x="1183.00" y="623.50"></text></g><g><title>e2d2::headers::ip::IpHeader::src (15 samples, 0.02%)</title><rect x="1180" y="597" width="0" height="15" fill="rgb(225,60,35)"/><text x="1183.00" y="607.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (15 samples, 0.02%)</title><rect x="1180" y="581" width="0" height="15" fill="rgb(237,206,26)"/><text x="1183.00" y="591.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (15 samples, 0.02%)</title><rect x="1180" y="565" width="0" height="15" fill="rgb(218,86,53)"/><text x="1183.00" y="575.50"></text></g><g><title>&lt;e2d2::queues::mpsc_mbuf_queue::MpscConsumer as e2d2::interface::PacketRx&gt;::recv (21 samples, 0.02%)</title><rect x="1180" y="581" width="0" height="15" fill="rgb(236,90,44)"/><text x="1183.00" y="591.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue (21 samples, 0.02%)</title><rect x="1180" y="565" width="0" height="15" fill="rgb(207,117,23)"/><text x="1183.00" y="575.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue_mbufs (17 samples, 0.02%)</title><rect x="1180" y="549" width="0" height="15" fill="rgb(209,51,47)"/><text x="1183.00" y="559.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (23 samples, 0.02%)</title><rect x="1180" y="645" width="0" height="15" fill="rgb(248,119,49)"/><text x="1183.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (23 samples, 0.02%)</title><rect x="1180" y="629" width="0" height="15" fill="rgb(251,18,1)"/><text x="1183.00" y="639.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (23 samples, 0.02%)</title><rect x="1180" y="613" width="0" height="15" fill="rgb(209,161,12)"/><text x="1183.00" y="623.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (22 samples, 0.02%)</title><rect x="1180" y="597" width="0" height="15" fill="rgb(229,16,35)"/><text x="1183.00" y="607.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::write_metadata (72 samples, 0.07%)</title><rect x="1180" y="645" width="1" height="15" fill="rgb(207,157,15)"/><text x="1183.00" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.07%)</title><rect x="1181" y="629" width="0" height="15" fill="rgb(247,125,11)"/><text x="1184.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (223 samples, 0.23%)</title><rect x="1179" y="677" width="2" height="15" fill="rgb(242,216,15)"/><text x="1182.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (223 samples, 0.23%)</title><rect x="1179" y="661" width="2" height="15" fill="rgb(208,224,48)"/><text x="1182.00" y="671.50"></text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (12 samples, 0.01%)</title><rect x="1181" y="645" width="0" height="15" fill="rgb(229,194,45)"/><text x="1184.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (12 samples, 0.01%)</title><rect x="1181" y="629" width="0" height="15" fill="rgb(224,95,48)"/><text x="1184.00" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (11 samples, 0.01%)</title><rect x="1181" y="613" width="0" height="15" fill="rgb(218,79,33)"/><text x="1184.00" y="623.50"></text></g><g><title>_$LT$e2d2..operators..restore_header..RestoreHeader$LT$T$C$M$C$V$GT$$u20$as$u20$e2d2..operators..iterator..BatchIterator$GT$::next_payload::_$u7b$$u7b$closure$u7d$$u7d$::h350554a7e658d98b (11 samples, 0.01%)</title><rect x="1181" y="597" width="0" height="15" fill="rgb(254,165,30)"/><text x="1184.00" y="607.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::restore_saved_header (11 samples, 0.01%)</title><rect x="1181" y="581" width="0" height="15" fill="rgb(221,46,10)"/><text x="1184.00" y="591.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (36 samples, 0.04%)</title><rect x="1181" y="613" width="1" height="15" fill="rgb(253,30,28)"/><text x="1184.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (36 samples, 0.04%)</title><rect x="1181" y="597" width="1" height="15" fill="rgb(226,60,38)"/><text x="1184.00" y="607.50"></text></g><g><title>core::ptr::&lt;impl *mut T&gt;::is_null (13 samples, 0.01%)</title><rect x="1182" y="565" width="0" height="15" fill="rgb(224,60,44)"/><text x="1185.00" y="575.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::read_header (49 samples, 0.05%)</title><rect x="1182" y="565" width="1" height="15" fill="rgb(245,125,1)"/><text x="1185.00" y="575.50"></text></g><g><title>e2d2::native::zcsi::mbuf::&lt;impl e2d2::native_include::rte_mbuf&gt;::read_metadata_slot (49 samples, 0.05%)</title><rect x="1182" y="549" width="1" height="15" fill="rgb(229,78,38)"/><text x="1185.00" y="559.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (159 samples, 0.16%)</title><rect x="1181" y="645" width="2" height="15" fill="rgb(240,116,51)"/><text x="1184.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (159 samples, 0.16%)</title><rect x="1181" y="629" width="2" height="15" fill="rgb(217,172,52)"/><text x="1184.00" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (123 samples, 0.12%)</title><rect x="1182" y="613" width="1" height="15" fill="rgb(228,73,14)"/><text x="1185.00" y="623.50"></text></g><g><title>_$LT$e2d2..operators..restore_header..RestoreHeader$LT$T$C$M$C$V$GT$$u20$as$u20$e2d2..operators..iterator..BatchIterator$GT$::next_payload::_$u7b$$u7b$closure$u7d$$u7d$::h350554a7e658d98b (123 samples, 0.12%)</title><rect x="1182" y="597" width="1" height="15" fill="rgb(235,88,37)"/><text x="1185.00" y="607.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::restore_saved_header (123 samples, 0.12%)</title><rect x="1182" y="581" width="1" height="15" fill="rgb(253,126,10)"/><text x="1185.00" y="591.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::read_offset (61 samples, 0.06%)</title><rect x="1183" y="565" width="0" height="15" fill="rgb(227,26,27)"/><text x="1186.00" y="575.50"></text></g><g><title>e2d2::native::zcsi::mbuf::&lt;impl e2d2::native_include::rte_mbuf&gt;::read_metadata_slot (61 samples, 0.06%)</title><rect x="1183" y="549" width="0" height="15" fill="rgb(210,74,18)"/><text x="1186.00" y="559.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (31,154 samples, 31.60%)</title><rect x="811" y="725" width="372" height="15" fill="rgb(229,189,38)"/><text x="814.00" y="735.50">&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (31,145 samples, 31.59%)</title><rect x="811" y="709" width="372" height="15" fill="rgb(244,19,24)"/><text x="814.00" y="719.50">&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (31,145 samples, 31.59%)</title><rect x="811" y="693" width="372" height="15" fill="rgb(214,18,37)"/><text x="814.00" y="703.50">&lt;e2d2::operators::transform_batch::TransformBatch&lt;..</text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (165 samples, 0.17%)</title><rect x="1181" y="677" width="2" height="15" fill="rgb(220,131,47)"/><text x="1184.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (165 samples, 0.17%)</title><rect x="1181" y="661" width="2" height="15" fill="rgb(239,229,40)"/><text x="1184.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (31,160 samples, 31.60%)</title><rect x="811" y="741" width="373" height="15" fill="rgb(248,97,16)"/><text x="814.00" y="751.50">&lt;e2d2::operators::composition_batch::CompositionBa..</text></g><g><title>rte_mempool_put_bulk (30 samples, 0.03%)</title><rect x="1184" y="597" width="1" height="15" fill="rgb(215,130,8)"/><text x="1187.00" y="607.50"></text></g><g><title>rte_mempool_generic_put (27 samples, 0.03%)</title><rect x="1184" y="581" width="1" height="15" fill="rgb(231,228,13)"/><text x="1187.00" y="591.50"></text></g><g><title>__mempool_generic_put (27 samples, 0.03%)</title><rect x="1184" y="565" width="1" height="15" fill="rgb(208,204,52)"/><text x="1187.00" y="575.50"></text></g><g><title>rte_mempool_ops_enqueue_bulk (14 samples, 0.01%)</title><rect x="1184" y="549" width="1" height="15" fill="rgb(218,19,26)"/><text x="1187.00" y="559.50"></text></g><g><title>common_ring_mp_enqueue (12 samples, 0.01%)</title><rect x="1184" y="533" width="1" height="15" fill="rgb(224,141,46)"/><text x="1187.00" y="543.50"></text></g><g><title>rte_ring_mp_enqueue_bulk (10 samples, 0.01%)</title><rect x="1184" y="517" width="1" height="15" fill="rgb(251,218,21)"/><text x="1187.00" y="527.50"></text></g><g><title>__rte_ring_do_enqueue (10 samples, 0.01%)</title><rect x="1184" y="501" width="1" height="15" fill="rgb(218,6,43)"/><text x="1187.00" y="511.50"></text></g><g><title>i40e_tx_free_bufs (100 samples, 0.10%)</title><rect x="1184" y="613" width="1" height="15" fill="rgb(236,143,30)"/><text x="1187.00" y="623.50"></text></g><g><title>rte_pktmbuf_prefree_seg (36 samples, 0.04%)</title><rect x="1185" y="597" width="0" height="15" fill="rgb(242,197,36)"/><text x="1188.00" y="607.50"></text></g><g><title>rte_mbuf_refcnt_read (13 samples, 0.01%)</title><rect x="1185" y="581" width="0" height="15" fill="rgb(239,177,19)"/><text x="1188.00" y="591.50"></text></g><g><title>rte_atomic16_read (13 samples, 0.01%)</title><rect x="1185" y="565" width="0" height="15" fill="rgb(211,22,47)"/><text x="1188.00" y="575.50"></text></g><g><title>tx_backlog_entry (18 samples, 0.02%)</title><rect x="1185" y="613" width="0" height="15" fill="rgb(242,109,7)"/><text x="1188.00" y="623.50"></text></g><g><title>_mm_set_epi64x (9 samples, 0.01%)</title><rect x="1186" y="581" width="0" height="15" fill="rgb(251,191,47)"/><text x="1189.00" y="591.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (31,357 samples, 31.80%)</title><rect x="811" y="773" width="375" height="15" fill="rgb(238,32,36)"/><text x="814.00" y="783.50">&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (31,357 samples, 31.80%)</title><rect x="811" y="757" width="375" height="15" fill="rgb(216,109,48)"/><text x="814.00" y="767.50">&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as..</text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::send_q (189 samples, 0.19%)</title><rect x="1184" y="741" width="2" height="15" fill="rgb(217,190,27)"/><text x="1187.00" y="751.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketTx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::send (187 samples, 0.19%)</title><rect x="1184" y="725" width="2" height="15" fill="rgb(214,98,51)"/><text x="1187.00" y="735.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketTx&gt;::send (187 samples, 0.19%)</title><rect x="1184" y="709" width="2" height="15" fill="rgb(232,115,37)"/><text x="1187.00" y="719.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::send_queue (187 samples, 0.19%)</title><rect x="1184" y="693" width="2" height="15" fill="rgb(219,174,52)"/><text x="1187.00" y="703.50"></text></g><g><title>send_pkts (184 samples, 0.19%)</title><rect x="1184" y="677" width="2" height="15" fill="rgb(239,75,37)"/><text x="1187.00" y="687.50"></text></g><g><title>rte_eth_tx_burst (184 samples, 0.19%)</title><rect x="1184" y="661" width="2" height="15" fill="rgb(243,44,25)"/><text x="1187.00" y="671.50"></text></g><g><title>i40e_xmit_pkts_vec (178 samples, 0.18%)</title><rect x="1184" y="645" width="2" height="15" fill="rgb(235,182,36)"/><text x="1187.00" y="655.50"></text></g><g><title>i40e_xmit_fixed_burst_vec (177 samples, 0.18%)</title><rect x="1184" y="629" width="2" height="15" fill="rgb(245,220,17)"/><text x="1187.00" y="639.50"></text></g><g><title>vtx (42 samples, 0.04%)</title><rect x="1185" y="613" width="1" height="15" fill="rgb(243,101,47)"/><text x="1188.00" y="623.50"></text></g><g><title>vtx1 (42 samples, 0.04%)</title><rect x="1185" y="597" width="1" height="15" fill="rgb(247,118,54)"/><text x="1188.00" y="607.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (32,214 samples, 32.67%)</title><rect x="801" y="821" width="385" height="15" fill="rgb(235,12,12)"/><text x="804.00" y="831.50">e2d2::scheduler::standalone_scheduler::StandaloneSch..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (32,214 samples, 32.67%)</title><rect x="801" y="805" width="385" height="15" fill="rgb(234,212,24)"/><text x="804.00" y="815.50">e2d2::scheduler::standalone_scheduler::StandaloneSch..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (32,214 samples, 32.67%)</title><rect x="801" y="789" width="385" height="15" fill="rgb(234,66,45)"/><text x="804.00" y="799.50">e2d2::scheduler::standalone_scheduler::StandaloneSch..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (42 samples, 0.04%)</title><rect x="1186" y="773" width="0" height="15" fill="rgb(223,139,25)"/><text x="1189.00" y="783.50"></text></g><g><title>std::sync::mpsc::sync::Packet&lt;T&gt;::try_recv (41 samples, 0.04%)</title><rect x="1186" y="757" width="0" height="15" fill="rgb(250,27,7)"/><text x="1189.00" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (33 samples, 0.03%)</title><rect x="1186" y="741" width="0" height="15" fill="rgb(211,73,5)"/><text x="1189.00" y="751.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (32 samples, 0.03%)</title><rect x="1186" y="725" width="0" height="15" fill="rgb(252,15,2)"/><text x="1189.00" y="735.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (32 samples, 0.03%)</title><rect x="1186" y="709" width="0" height="15" fill="rgb(228,205,41)"/><text x="1189.00" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (32 samples, 0.03%)</title><rect x="1186" y="693" width="0" height="15" fill="rgb(239,141,26)"/><text x="1189.00" y="703.50"></text></g><g><title>__GI___clone (32,222 samples, 32.68%)</title><rect x="801" y="981" width="386" height="15" fill="rgb(242,107,36)"/><text x="804.00" y="991.50">__GI___clone</text></g><g><title>start_thread (32,222 samples, 32.68%)</title><rect x="801" y="965" width="386" height="15" fill="rgb(240,222,24)"/><text x="804.00" y="975.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (32,222 samples, 32.68%)</title><rect x="801" y="949" width="386" height="15" fill="rgb(221,7,16)"/><text x="804.00" y="959.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys_common::thread::start_thread (32,222 samples, 32.68%)</title><rect x="801" y="933" width="386" height="15" fill="rgb(241,47,0)"/><text x="804.00" y="943.50">std::sys_common::thread::start_thread</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (32,222 samples, 32.68%)</title><rect x="801" y="917" width="386" height="15" fill="rgb(222,188,41)"/><text x="804.00" y="927.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (32,222 samples, 32.68%)</title><rect x="801" y="901" width="386" height="15" fill="rgb(230,141,3)"/><text x="804.00" y="911.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce..</text></g><g><title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f59d60f147d050 (32,222 samples, 32.68%)</title><rect x="801" y="885" width="386" height="15" fill="rgb(252,27,28)"/><text x="804.00" y="895.50">core::ops::function::FnOnce::call_once$u7b$$u7b$vtab..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (32,221 samples, 32.68%)</title><rect x="801" y="869" width="386" height="15" fill="rgb(241,152,35)"/><text x="804.00" y="879.50">std::sys_common::backtrace::__rust_begin_short_backt..</text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$closure$u7d$$u7d$::h008d40440c8a9600 (32,221 samples, 32.68%)</title><rect x="801" y="853" width="386" height="15" fill="rgb(234,203,10)"/><text x="804.00" y="863.50">e2d2::scheduler::context::NetBricksContext::start_sc..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (32,221 samples, 32.68%)</title><rect x="801" y="837" width="386" height="15" fill="rgb(207,11,54)"/><text x="804.00" y="847.50">e2d2::scheduler::standalone_scheduler::StandaloneSch..</text></g><g><title>entry_SYSCALL_64_after_hwframe (59 samples, 0.06%)</title><rect x="1187" y="981" width="0" height="15" fill="rgb(251,225,14)"/><text x="1190.00" y="991.50"></text></g><g><title>entry_SYSCALL_64_stage2 (110 samples, 0.11%)</title><rect x="1187" y="981" width="2" height="15" fill="rgb(236,100,11)"/><text x="1190.00" y="991.50"></text></g><g><title>std::io::Write::write_all (22 samples, 0.02%)</title><rect x="1189" y="981" width="0" height="15" fill="rgb(223,146,14)"/><text x="1192.00" y="991.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (31 samples, 0.03%)</title><rect x="1189" y="981" width="0" height="15" fill="rgb(247,101,27)"/><text x="1192.00" y="991.50"></text></g><g><title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (11 samples, 0.01%)</title><rect x="1189" y="965" width="0" height="15" fill="rgb(220,203,10)"/><text x="1192.00" y="975.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (11 samples, 0.01%)</title><rect x="1189" y="949" width="0" height="15" fill="rgb(206,147,42)"/><text x="1192.00" y="959.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (11 samples, 0.01%)</title><rect x="1189" y="933" width="0" height="15" fill="rgb(218,224,10)"/><text x="1192.00" y="943.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (11 samples, 0.01%)</title><rect x="1189" y="917" width="0" height="15" fill="rgb(245,57,19)"/><text x="1192.00" y="927.50"></text></g><g><title>sched-3 (34,464 samples, 34.95%)</title><rect x="777" y="997" width="412" height="15" fill="rgb(222,22,22)"/><text x="780.00" y="1007.50">sched-3</text></g><g><title>all (98,603 samples, 100%)</title><rect x="10" y="1013" width="1180" height="15" fill="rgb(218,40,25)"/><text x="13.00" y="1023.50"></text></g><g><title>sched-4 (9 samples, 0.01%)</title><rect x="1189" y="997" width="1" height="15" fill="rgb(220,72,12)"/><text x="1192.00" y="1007.50"></text></g><g><title>__GI___clone (9 samples, 0.01%)</title><rect x="1189" y="981" width="1" height="15" fill="rgb(238,10,5)"/><text x="1192.00" y="991.50"></text></g><g><title>start_thread (9 samples, 0.01%)</title><rect x="1189" y="965" width="1" height="15" fill="rgb(214,164,12)"/><text x="1192.00" y="975.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 0.01%)</title><rect x="1189" y="949" width="1" height="15" fill="rgb(235,214,29)"/><text x="1192.00" y="959.50"></text></g><g><title>std::sys_common::thread::start_thread (9 samples, 0.01%)</title><rect x="1189" y="933" width="1" height="15" fill="rgb(222,64,18)"/><text x="1192.00" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.01%)</title><rect x="1189" y="917" width="1" height="15" fill="rgb(228,25,11)"/><text x="1192.00" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.01%)</title><rect x="1189" y="901" width="1" height="15" fill="rgb(241,18,12)"/><text x="1192.00" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f59d60f147d050 (9 samples, 0.01%)</title><rect x="1189" y="885" width="1" height="15" fill="rgb(213,140,34)"/><text x="1192.00" y="895.50"></text></g></g></svg>