<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1046" fill="url(#background)"/><text id="title" x="600.00" y="24.00">Flame Graph</text><text id="details" x="10.00" y="1029.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1029.00"> </text><g id="frames"><g><title>acpi_os_read_memory (1 samples, 0.01%)</title><rect x="10" y="773" width="0" height="15" fill="rgb(219,37,13)"/><text x="13.00" y="783.50"></text></g><g><title>apei_check_gar (1 samples, 0.01%)</title><rect x="10" y="773" width="0" height="15" fill="rgb(227,174,25)"/><text x="13.00" y="783.50"></text></g><g><title>intel_bts_enable_local (1 samples, 0.01%)</title><rect x="10" y="773" width="0" height="15" fill="rgb(249,81,17)"/><text x="13.00" y="783.50"></text></g><g><title>perf (7 samples, 0.08%)</title><rect x="10" y="981" width="0" height="15" fill="rgb(222,99,10)"/><text x="13.00" y="991.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="10" y="965" width="0" height="15" fill="rgb(224,66,5)"/><text x="13.00" y="975.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="10" y="949" width="0" height="15" fill="rgb(248,136,38)"/><text x="13.00" y="959.50"></text></g><g><title>sys_execve (7 samples, 0.08%)</title><rect x="10" y="933" width="0" height="15" fill="rgb(252,17,13)"/><text x="13.00" y="943.50"></text></g><g><title>do_execveat_common.isra.34 (7 samples, 0.08%)</title><rect x="10" y="917" width="0" height="15" fill="rgb(206,88,0)"/><text x="13.00" y="927.50"></text></g><g><title>search_binary_handler (7 samples, 0.08%)</title><rect x="10" y="901" width="0" height="15" fill="rgb(231,6,45)"/><text x="13.00" y="911.50"></text></g><g><title>load_elf_binary (7 samples, 0.08%)</title><rect x="10" y="885" width="0" height="15" fill="rgb(251,47,19)"/><text x="13.00" y="895.50"></text></g><g><title>setup_new_exec (7 samples, 0.08%)</title><rect x="10" y="869" width="0" height="15" fill="rgb(238,75,39)"/><text x="13.00" y="879.50"></text></g><g><title>perf_event_exec (7 samples, 0.08%)</title><rect x="10" y="853" width="0" height="15" fill="rgb(236,163,25)"/><text x="13.00" y="863.50"></text></g><g><title>ctx_resched (7 samples, 0.08%)</title><rect x="10" y="837" width="0" height="15" fill="rgb(212,31,33)"/><text x="13.00" y="847.50"></text></g><g><title>x86_pmu_enable (7 samples, 0.08%)</title><rect x="10" y="821" width="0" height="15" fill="rgb(253,158,12)"/><text x="13.00" y="831.50"></text></g><g><title>intel_pmu_enable_all (7 samples, 0.08%)</title><rect x="10" y="805" width="0" height="15" fill="rgb(221,129,20)"/><text x="13.00" y="815.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (7 samples, 0.08%)</title><rect x="10" y="789" width="0" height="15" fill="rgb(247,153,43)"/><text x="13.00" y="799.50"></text></g><g><title>native_write_msr (4 samples, 0.05%)</title><rect x="10" y="773" width="0" height="15" fill="rgb(239,17,0)"/><text x="13.00" y="783.50"></text></g><g><title>rte_get_timer_cycles (5 samples, 0.06%)</title><rect x="11" y="725" width="0" height="15" fill="rgb(224,31,25)"/><text x="14.00" y="735.50"></text></g><g><title>rte_get_tsc_cycles (5 samples, 0.06%)</title><rect x="11" y="709" width="0" height="15" fill="rgb(251,125,40)"/><text x="14.00" y="719.50"></text></g><g><title>rte_rdtsc (5 samples, 0.06%)</title><rect x="11" y="693" width="0" height="15" fill="rgb(226,174,24)"/><text x="14.00" y="703.50"></text></g><g><title>e2d2::interface::port::phy_port::PmdPort::new_dpdk_port (21 samples, 0.24%)</title><rect x="11" y="869" width="2" height="15" fill="rgb(233,100,9)"/><text x="14.00" y="879.50"></text></g><g><title>init_pmd_port (21 samples, 0.24%)</title><rect x="11" y="853" width="2" height="15" fill="rgb(236,25,23)"/><text x="14.00" y="863.50"></text></g><g><title>rte_eth_dev_configure (21 samples, 0.24%)</title><rect x="11" y="837" width="2" height="15" fill="rgb(233,171,41)"/><text x="14.00" y="847.50"></text></g><g><title>i40e_dev_configure (21 samples, 0.24%)</title><rect x="11" y="821" width="2" height="15" fill="rgb(238,115,49)"/><text x="14.00" y="831.50"></text></g><g><title>i40e_dev_sync_phy_type (21 samples, 0.24%)</title><rect x="11" y="805" width="2" height="15" fill="rgb(217,64,23)"/><text x="14.00" y="815.50"></text></g><g><title>i40e_aq_get_phy_capabilities (21 samples, 0.24%)</title><rect x="11" y="789" width="2" height="15" fill="rgb(250,104,3)"/><text x="14.00" y="799.50"></text></g><g><title>i40e_aq_get_link_info (21 samples, 0.24%)</title><rect x="11" y="773" width="2" height="15" fill="rgb(249,42,16)"/><text x="14.00" y="783.50"></text></g><g><title>i40e_asq_send_command (21 samples, 0.24%)</title><rect x="11" y="757" width="2" height="15" fill="rgb(233,174,51)"/><text x="14.00" y="767.50"></text></g><g><title>rte_delay_us_block (21 samples, 0.24%)</title><rect x="11" y="741" width="2" height="15" fill="rgb(213,219,40)"/><text x="14.00" y="751.50"></text></g><g><title>rte_pause (16 samples, 0.18%)</title><rect x="11" y="725" width="2" height="15" fill="rgb(218,77,13)"/><text x="14.00" y="735.50"></text></g><g><title>_mm_pause (16 samples, 0.18%)</title><rect x="11" y="709" width="2" height="15" fill="rgb(210,83,53)"/><text x="14.00" y="719.50"></text></g><g><title>__libc_start_main (22 samples, 0.25%)</title><rect x="11" y="949" width="3" height="15" fill="rgb(226,160,19)"/><text x="14.00" y="959.50"></text></g><g><title>main (22 samples, 0.25%)</title><rect x="11" y="933" width="3" height="15" fill="rgb(220,195,12)"/><text x="14.00" y="943.50"></text></g><g><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hc87de8565012a906 (22 samples, 0.25%)</title><rect x="11" y="917" width="3" height="15" fill="rgb(244,166,16)"/><text x="14.00" y="927.50"></text></g><g><title>pvn_tls::main (22 samples, 0.25%)</title><rect x="11" y="901" width="3" height="15" fill="rgb(217,80,50)"/><text x="14.00" y="911.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (22 samples, 0.25%)</title><rect x="11" y="885" width="3" height="15" fill="rgb(251,203,53)"/><text x="14.00" y="895.50"></text></g><g><title>init_system_whitelisted (1 samples, 0.01%)</title><rect x="13" y="869" width="1" height="15" fill="rgb(251,180,24)"/><text x="16.00" y="879.50"></text></g><g><title>init_eal (1 samples, 0.01%)</title><rect x="13" y="853" width="1" height="15" fill="rgb(228,98,12)"/><text x="16.00" y="863.50"></text></g><g><title>rte_eal_init (1 samples, 0.01%)</title><rect x="13" y="837" width="1" height="15" fill="rgb(243,166,35)"/><text x="16.00" y="847.50"></text></g><g><title>rte_config_init (1 samples, 0.01%)</title><rect x="13" y="821" width="1" height="15" fill="rgb(217,141,39)"/><text x="16.00" y="831.50"></text></g><g><title>rte_eal_config_create (1 samples, 0.01%)</title><rect x="13" y="805" width="1" height="15" fill="rgb(229,118,17)"/><text x="16.00" y="815.50"></text></g><g><title>memcpy (1 samples, 0.01%)</title><rect x="13" y="789" width="1" height="15" fill="rgb(229,195,13)"/><text x="16.00" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="13" y="773" width="1" height="15" fill="rgb(207,14,13)"/><text x="16.00" y="783.50"></text></g><g><title>page_fault (1 samples, 0.01%)</title><rect x="13" y="757" width="1" height="15" fill="rgb(233,92,33)"/><text x="16.00" y="767.50"></text></g><g><title>do_page_fault (1 samples, 0.01%)</title><rect x="13" y="741" width="1" height="15" fill="rgb(252,76,49)"/><text x="16.00" y="751.50"></text></g><g><title>__do_page_fault (1 samples, 0.01%)</title><rect x="13" y="725" width="1" height="15" fill="rgb(233,103,7)"/><text x="16.00" y="735.50"></text></g><g><title>get_empty_filp (1 samples, 0.01%)</title><rect x="14" y="757" width="0" height="15" fill="rgb(206,38,19)"/><text x="17.00" y="767.50"></text></g><g><title>inode_permission (1 samples, 0.01%)</title><rect x="14" y="741" width="0" height="15" fill="rgb(241,100,27)"/><text x="17.00" y="751.50"></text></g><g><title>__inode_permission (1 samples, 0.01%)</title><rect x="14" y="725" width="0" height="15" fill="rgb(208,42,11)"/><text x="17.00" y="735.50"></text></g><g><title>mutex_lock (1 samples, 0.01%)</title><rect x="14" y="709" width="0" height="15" fill="rgb(221,0,53)"/><text x="17.00" y="719.50"></text></g><g><title>do_syscall_64 (5 samples, 0.06%)</title><rect x="14" y="837" width="0" height="15" fill="rgb(211,162,32)"/><text x="17.00" y="847.50"></text></g><g><title>sys_openat (3 samples, 0.03%)</title><rect x="14" y="821" width="0" height="15" fill="rgb(226,26,18)"/><text x="17.00" y="831.50"></text></g><g><title>do_sys_open (3 samples, 0.03%)</title><rect x="14" y="805" width="0" height="15" fill="rgb(246,1,40)"/><text x="17.00" y="815.50"></text></g><g><title>do_filp_open (3 samples, 0.03%)</title><rect x="14" y="789" width="0" height="15" fill="rgb(249,187,35)"/><text x="17.00" y="799.50"></text></g><g><title>path_openat (3 samples, 0.03%)</title><rect x="14" y="773" width="0" height="15" fill="rgb(219,118,47)"/><text x="17.00" y="783.50"></text></g><g><title>link_path_walk (2 samples, 0.02%)</title><rect x="14" y="757" width="0" height="15" fill="rgb(231,219,37)"/><text x="17.00" y="767.50"></text></g><g><title>kernfs_iop_get_link (1 samples, 0.01%)</title><rect x="14" y="741" width="0" height="15" fill="rgb(239,8,3)"/><text x="17.00" y="751.50"></text></g><g><title>strncpy (1 samples, 0.01%)</title><rect x="14" y="725" width="0" height="15" fill="rgb(205,60,19)"/><text x="17.00" y="735.50"></text></g><g><title>_IO_new_fopen (6 samples, 0.07%)</title><rect x="14" y="933" width="0" height="15" fill="rgb(223,228,47)"/><text x="17.00" y="943.50"></text></g><g><title>__fopen_internal (6 samples, 0.07%)</title><rect x="14" y="917" width="0" height="15" fill="rgb(224,224,12)"/><text x="17.00" y="927.50"></text></g><g><title>_IO_new_file_fopen (6 samples, 0.07%)</title><rect x="14" y="901" width="0" height="15" fill="rgb(213,155,42)"/><text x="17.00" y="911.50"></text></g><g><title>__GI__IO_file_open (6 samples, 0.07%)</title><rect x="14" y="885" width="0" height="15" fill="rgb(228,166,43)"/><text x="17.00" y="895.50"></text></g><g><title>__libc_open64 (6 samples, 0.07%)</title><rect x="14" y="869" width="0" height="15" fill="rgb(230,6,46)"/><text x="17.00" y="879.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="14" y="853" width="0" height="15" fill="rgb(251,29,10)"/><text x="17.00" y="863.50"></text></g><g><title>sys_openat (1 samples, 0.01%)</title><rect x="14" y="837" width="0" height="15" fill="rgb(249,210,30)"/><text x="17.00" y="847.50"></text></g><g><title>__GI__IO_doallocbuf (2 samples, 0.02%)</title><rect x="14" y="837" width="1" height="15" fill="rgb(238,203,6)"/><text x="17.00" y="847.50"></text></g><g><title>__GI__IO_file_doallocate (2 samples, 0.02%)</title><rect x="14" y="821" width="1" height="15" fill="rgb(210,94,41)"/><text x="17.00" y="831.50"></text></g><g><title>__GI___fxstat (2 samples, 0.02%)</title><rect x="14" y="805" width="1" height="15" fill="rgb(236,14,9)"/><text x="17.00" y="815.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="14" y="789" width="1" height="15" fill="rgb(208,6,9)"/><text x="17.00" y="799.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="14" y="773" width="1" height="15" fill="rgb(241,40,27)"/><text x="17.00" y="783.50"></text></g><g><title>sys_newfstat (1 samples, 0.01%)</title><rect x="14" y="757" width="1" height="15" fill="rgb(234,186,8)"/><text x="17.00" y="767.50"></text></g><g><title>SYSC_newfstat (1 samples, 0.01%)</title><rect x="14" y="741" width="1" height="15" fill="rgb(212,115,33)"/><text x="17.00" y="751.50"></text></g><g><title>vfs_statx_fd (1 samples, 0.01%)</title><rect x="14" y="725" width="1" height="15" fill="rgb(222,178,45)"/><text x="17.00" y="735.50"></text></g><g><title>vfs_getattr (1 samples, 0.01%)</title><rect x="14" y="709" width="1" height="15" fill="rgb(213,186,14)"/><text x="17.00" y="719.50"></text></g><g><title>vfs_getattr_nosec (1 samples, 0.01%)</title><rect x="14" y="693" width="1" height="15" fill="rgb(228,127,31)"/><text x="17.00" y="703.50"></text></g><g><title>kernfs_iop_getattr (1 samples, 0.01%)</title><rect x="14" y="677" width="1" height="15" fill="rgb(249,111,52)"/><text x="17.00" y="687.50"></text></g><g><title>mutex_lock (1 samples, 0.01%)</title><rect x="14" y="661" width="1" height="15" fill="rgb(226,218,46)"/><text x="17.00" y="671.50"></text></g><g><title>kernfs_seq_show (1 samples, 0.01%)</title><rect x="15" y="709" width="0" height="15" fill="rgb(246,46,17)"/><text x="18.00" y="719.50"></text></g><g><title>sysfs_kf_seq_show (1 samples, 0.01%)</title><rect x="15" y="693" width="0" height="15" fill="rgb(222,136,9)"/><text x="18.00" y="703.50"></text></g><g><title>eal_parse_sysfs_value (10 samples, 0.11%)</title><rect x="14" y="949" width="1" height="15" fill="rgb(208,120,40)"/><text x="17.00" y="959.50"></text></g><g><title>fgets (4 samples, 0.05%)</title><rect x="14" y="933" width="1" height="15" fill="rgb(217,181,8)"/><text x="17.00" y="943.50"></text></g><g><title>_IO_fgets (4 samples, 0.05%)</title><rect x="14" y="917" width="1" height="15" fill="rgb(213,172,25)"/><text x="17.00" y="927.50"></text></g><g><title>__GI__IO_getline (4 samples, 0.05%)</title><rect x="14" y="901" width="1" height="15" fill="rgb(229,168,26)"/><text x="17.00" y="911.50"></text></g><g><title>__GI__IO_getline_info (4 samples, 0.05%)</title><rect x="14" y="885" width="1" height="15" fill="rgb(242,44,43)"/><text x="17.00" y="895.50"></text></g><g><title>__GI__IO_default_uflow (4 samples, 0.05%)</title><rect x="14" y="869" width="1" height="15" fill="rgb(235,188,45)"/><text x="17.00" y="879.50"></text></g><g><title>_IO_new_file_underflow (4 samples, 0.05%)</title><rect x="14" y="853" width="1" height="15" fill="rgb(236,76,20)"/><text x="17.00" y="863.50"></text></g><g><title>__GI___libc_read (2 samples, 0.02%)</title><rect x="15" y="837" width="0" height="15" fill="rgb(228,167,5)"/><text x="18.00" y="847.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="15" y="821" width="0" height="15" fill="rgb(219,183,14)"/><text x="18.00" y="831.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="15" y="805" width="0" height="15" fill="rgb(229,147,52)"/><text x="18.00" y="815.50"></text></g><g><title>sys_read (2 samples, 0.02%)</title><rect x="15" y="789" width="0" height="15" fill="rgb(210,189,52)"/><text x="18.00" y="799.50"></text></g><g><title>vfs_read (2 samples, 0.02%)</title><rect x="15" y="773" width="0" height="15" fill="rgb(240,152,1)"/><text x="18.00" y="783.50"></text></g><g><title>__vfs_read (2 samples, 0.02%)</title><rect x="15" y="757" width="0" height="15" fill="rgb(211,17,16)"/><text x="18.00" y="767.50"></text></g><g><title>kernfs_fop_read (2 samples, 0.02%)</title><rect x="15" y="741" width="0" height="15" fill="rgb(230,193,42)"/><text x="18.00" y="751.50"></text></g><g><title>seq_read (2 samples, 0.02%)</title><rect x="15" y="725" width="0" height="15" fill="rgb(242,28,0)"/><text x="18.00" y="735.50"></text></g><g><title>kernfs_seq_stop (1 samples, 0.01%)</title><rect x="15" y="709" width="0" height="15" fill="rgb(238,52,39)"/><text x="18.00" y="719.50"></text></g><g><title>mutex_unlock (1 samples, 0.01%)</title><rect x="15" y="693" width="0" height="15" fill="rgb(236,111,16)"/><text x="18.00" y="703.50"></text></g><g><title>init_eal (1 samples, 0.01%)</title><rect x="15" y="949" width="0" height="15" fill="rgb(251,173,20)"/><text x="18.00" y="959.50"></text></g><g><title>rte_eal_init (1 samples, 0.01%)</title><rect x="15" y="933" width="0" height="15" fill="rgb(214,8,47)"/><text x="18.00" y="943.50"></text></g><g><title>rte_eal_cpu_init (1 samples, 0.01%)</title><rect x="15" y="917" width="0" height="15" fill="rgb(216,213,6)"/><text x="18.00" y="927.50"></text></g><g><title>eal_cpu_detected (1 samples, 0.01%)</title><rect x="15" y="901" width="0" height="15" fill="rgb(223,108,46)"/><text x="18.00" y="911.50"></text></g><g><title>__access (1 samples, 0.01%)</title><rect x="15" y="885" width="0" height="15" fill="rgb(205,75,44)"/><text x="18.00" y="895.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="15" y="869" width="0" height="15" fill="rgb(244,19,16)"/><text x="18.00" y="879.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="15" y="853" width="0" height="15" fill="rgb(214,177,3)"/><text x="18.00" y="863.50"></text></g><g><title>sys_access (1 samples, 0.01%)</title><rect x="15" y="837" width="0" height="15" fill="rgb(205,77,27)"/><text x="18.00" y="847.50"></text></g><g><title>user_path_at_empty (1 samples, 0.01%)</title><rect x="15" y="821" width="0" height="15" fill="rgb(209,44,22)"/><text x="18.00" y="831.50"></text></g><g><title>filename_lookup (1 samples, 0.01%)</title><rect x="15" y="805" width="0" height="15" fill="rgb(241,149,33)"/><text x="18.00" y="815.50"></text></g><g><title>path_lookupat (1 samples, 0.01%)</title><rect x="15" y="789" width="0" height="15" fill="rgb(232,60,23)"/><text x="18.00" y="799.50"></text></g><g><title>link_path_walk (1 samples, 0.01%)</title><rect x="15" y="773" width="0" height="15" fill="rgb(219,34,27)"/><text x="18.00" y="783.50"></text></g><g><title>walk_component (1 samples, 0.01%)</title><rect x="15" y="757" width="0" height="15" fill="rgb(226,199,21)"/><text x="18.00" y="767.50"></text></g><g><title>lookup_slow (1 samples, 0.01%)</title><rect x="15" y="741" width="0" height="15" fill="rgb(214,130,4)"/><text x="18.00" y="751.50"></text></g><g><title>kernfs_iop_lookup (1 samples, 0.01%)</title><rect x="15" y="725" width="0" height="15" fill="rgb(223,147,3)"/><text x="18.00" y="735.50"></text></g><g><title>mutex_lock (1 samples, 0.01%)</title><rect x="15" y="709" width="0" height="15" fill="rgb(228,99,42)"/><text x="18.00" y="719.50"></text></g><g><title>rte_eth_dev_configure (1 samples, 0.01%)</title><rect x="15" y="853" width="0" height="15" fill="rgb(248,224,43)"/><text x="18.00" y="863.50"></text></g><g><title>i40e_dev_configure (1 samples, 0.01%)</title><rect x="15" y="837" width="0" height="15" fill="rgb(210,22,38)"/><text x="18.00" y="847.50"></text></g><g><title>i40e_dev_sync_phy_type (1 samples, 0.01%)</title><rect x="15" y="821" width="0" height="15" fill="rgb(230,194,37)"/><text x="18.00" y="831.50"></text></g><g><title>i40e_aq_get_phy_capabilities (1 samples, 0.01%)</title><rect x="15" y="805" width="0" height="15" fill="rgb(219,102,44)"/><text x="18.00" y="815.50"></text></g><g><title>i40e_aq_get_link_info (1 samples, 0.01%)</title><rect x="15" y="789" width="0" height="15" fill="rgb(250,104,5)"/><text x="18.00" y="799.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="15" y="773" width="0" height="15" fill="rgb(234,23,46)"/><text x="18.00" y="783.50"></text></g><g><title>i40e_clean_asq (1 samples, 0.01%)</title><rect x="15" y="757" width="0" height="15" fill="rgb(244,117,18)"/><text x="18.00" y="767.50"></text></g><g><title>i40e_read_addr (1 samples, 0.01%)</title><rect x="15" y="741" width="0" height="15" fill="rgb(240,212,34)"/><text x="18.00" y="751.50"></text></g><g><title>rte_read32 (1 samples, 0.01%)</title><rect x="15" y="725" width="0" height="15" fill="rgb(213,182,21)"/><text x="18.00" y="735.50"></text></g><g><title>rte_read32_relaxed (1 samples, 0.01%)</title><rect x="15" y="709" width="0" height="15" fill="rgb(237,98,17)"/><text x="18.00" y="719.50"></text></g><g><title>rte_get_timer_cycles (5 samples, 0.06%)</title><rect x="15" y="741" width="1" height="15" fill="rgb(230,148,53)"/><text x="18.00" y="751.50"></text></g><g><title>rte_get_tsc_cycles (5 samples, 0.06%)</title><rect x="15" y="725" width="1" height="15" fill="rgb(208,99,7)"/><text x="18.00" y="735.50"></text></g><g><title>rte_rdtsc (5 samples, 0.06%)</title><rect x="15" y="709" width="1" height="15" fill="rgb(225,167,50)"/><text x="18.00" y="719.50"></text></g><g><title>main (37 samples, 0.42%)</title><rect x="15" y="949" width="5" height="15" fill="rgb(235,225,9)"/><text x="18.00" y="959.50"></text></g><g><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hc87de8565012a906 (37 samples, 0.42%)</title><rect x="15" y="933" width="5" height="15" fill="rgb(231,11,4)"/><text x="18.00" y="943.50"></text></g><g><title>pvn_tls::main (37 samples, 0.42%)</title><rect x="15" y="917" width="5" height="15" fill="rgb(238,165,29)"/><text x="18.00" y="927.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (37 samples, 0.42%)</title><rect x="15" y="901" width="5" height="15" fill="rgb(218,19,40)"/><text x="18.00" y="911.50"></text></g><g><title>e2d2::interface::port::phy_port::PmdPort::new_dpdk_port (37 samples, 0.42%)</title><rect x="15" y="885" width="5" height="15" fill="rgb(245,63,43)"/><text x="18.00" y="895.50"></text></g><g><title>init_pmd_port (37 samples, 0.42%)</title><rect x="15" y="869" width="5" height="15" fill="rgb(217,33,49)"/><text x="18.00" y="879.50"></text></g><g><title>rte_eth_dev_start (36 samples, 0.41%)</title><rect x="15" y="853" width="5" height="15" fill="rgb(233,24,53)"/><text x="18.00" y="863.50"></text></g><g><title>i40e_dev_start (36 samples, 0.41%)</title><rect x="15" y="837" width="5" height="15" fill="rgb(252,94,10)"/><text x="18.00" y="847.50"></text></g><g><title>i40e_apply_link_speed (36 samples, 0.41%)</title><rect x="15" y="821" width="5" height="15" fill="rgb(254,144,9)"/><text x="18.00" y="831.50"></text></g><g><title>i40e_phy_conf_link (36 samples, 0.41%)</title><rect x="15" y="805" width="5" height="15" fill="rgb(238,205,38)"/><text x="18.00" y="815.50"></text></g><g><title>i40e_aq_get_phy_capabilities (36 samples, 0.41%)</title><rect x="15" y="789" width="5" height="15" fill="rgb(218,223,52)"/><text x="18.00" y="799.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.41%)</title><rect x="15" y="773" width="5" height="15" fill="rgb(225,48,2)"/><text x="18.00" y="783.50"></text></g><g><title>rte_delay_us_block (36 samples, 0.41%)</title><rect x="15" y="757" width="5" height="15" fill="rgb(244,133,33)"/><text x="18.00" y="767.50"></text></g><g><title>rte_pause (31 samples, 0.35%)</title><rect x="16" y="741" width="4" height="15" fill="rgb(254,19,16)"/><text x="19.00" y="751.50"></text></g><g><title>_mm_pause (31 samples, 0.35%)</title><rect x="16" y="725" width="4" height="15" fill="rgb(205,174,14)"/><text x="19.00" y="735.50"></text></g><g><title>pci_get_kernel_driver_by_path (1 samples, 0.01%)</title><rect x="20" y="933" width="0" height="15" fill="rgb(232,161,17)"/><text x="23.00" y="943.50"></text></g><g><title>readlink (1 samples, 0.01%)</title><rect x="20" y="917" width="0" height="15" fill="rgb(242,56,7)"/><text x="23.00" y="927.50"></text></g><g><title>__GI___readlink (1 samples, 0.01%)</title><rect x="20" y="901" width="0" height="15" fill="rgb(249,193,2)"/><text x="23.00" y="911.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="20" y="885" width="0" height="15" fill="rgb(212,6,50)"/><text x="23.00" y="895.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="20" y="869" width="0" height="15" fill="rgb(249,193,48)"/><text x="23.00" y="879.50"></text></g><g><title>_IO_new_fopen (1 samples, 0.01%)</title><rect x="20" y="917" width="0" height="15" fill="rgb(248,7,43)"/><text x="23.00" y="927.50"></text></g><g><title>__fopen_internal (1 samples, 0.01%)</title><rect x="20" y="901" width="0" height="15" fill="rgb(229,210,28)"/><text x="23.00" y="911.50"></text></g><g><title>_IO_new_file_fopen (1 samples, 0.01%)</title><rect x="20" y="885" width="0" height="15" fill="rgb(207,127,18)"/><text x="23.00" y="895.50"></text></g><g><title>__GI__IO_file_open (1 samples, 0.01%)</title><rect x="20" y="869" width="0" height="15" fill="rgb(226,107,20)"/><text x="23.00" y="879.50"></text></g><g><title>__libc_open64 (1 samples, 0.01%)</title><rect x="20" y="853" width="0" height="15" fill="rgb(245,77,12)"/><text x="23.00" y="863.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="20" y="837" width="0" height="15" fill="rgb(231,100,40)"/><text x="23.00" y="847.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="20" y="821" width="0" height="15" fill="rgb(225,123,24)"/><text x="23.00" y="831.50"></text></g><g><title>sys_openat (1 samples, 0.01%)</title><rect x="20" y="805" width="0" height="15" fill="rgb(211,159,40)"/><text x="23.00" y="815.50"></text></g><g><title>do_sys_open (1 samples, 0.01%)</title><rect x="20" y="789" width="0" height="15" fill="rgb(239,160,31)"/><text x="23.00" y="799.50"></text></g><g><title>do_filp_open (1 samples, 0.01%)</title><rect x="20" y="773" width="0" height="15" fill="rgb(232,107,29)"/><text x="23.00" y="783.50"></text></g><g><title>path_openat (1 samples, 0.01%)</title><rect x="20" y="757" width="0" height="15" fill="rgb(210,37,39)"/><text x="23.00" y="767.50"></text></g><g><title>link_path_walk (1 samples, 0.01%)</title><rect x="20" y="741" width="0" height="15" fill="rgb(228,0,38)"/><text x="23.00" y="751.50"></text></g><g><title>lookup_fast (1 samples, 0.01%)</title><rect x="20" y="725" width="0" height="15" fill="rgb(217,96,0)"/><text x="23.00" y="735.50"></text></g><g><title>pci_scan_one (4 samples, 0.05%)</title><rect x="20" y="949" width="0" height="15" fill="rgb(211,58,10)"/><text x="23.00" y="959.50"></text></g><g><title>pci_parse_sysfs_resource (3 samples, 0.03%)</title><rect x="20" y="933" width="0" height="15" fill="rgb(232,76,2)"/><text x="23.00" y="943.50"></text></g><g><title>fgets (2 samples, 0.02%)</title><rect x="20" y="917" width="0" height="15" fill="rgb(215,61,41)"/><text x="23.00" y="927.50"></text></g><g><title>_IO_fgets (2 samples, 0.02%)</title><rect x="20" y="901" width="0" height="15" fill="rgb(237,163,15)"/><text x="23.00" y="911.50"></text></g><g><title>__GI__IO_getline (2 samples, 0.02%)</title><rect x="20" y="885" width="0" height="15" fill="rgb(247,151,34)"/><text x="23.00" y="895.50"></text></g><g><title>__GI__IO_getline_info (2 samples, 0.02%)</title><rect x="20" y="869" width="0" height="15" fill="rgb(208,101,25)"/><text x="23.00" y="879.50"></text></g><g><title>__GI__IO_default_uflow (2 samples, 0.02%)</title><rect x="20" y="853" width="0" height="15" fill="rgb(210,13,16)"/><text x="23.00" y="863.50"></text></g><g><title>_IO_new_file_underflow (2 samples, 0.02%)</title><rect x="20" y="837" width="0" height="15" fill="rgb(215,113,37)"/><text x="23.00" y="847.50"></text></g><g><title>__GI___libc_read (2 samples, 0.02%)</title><rect x="20" y="821" width="0" height="15" fill="rgb(238,188,35)"/><text x="23.00" y="831.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="20" y="805" width="0" height="15" fill="rgb(241,165,15)"/><text x="23.00" y="815.50"></text></g><g><title>do_syscall_64 (2 samples, 0.02%)</title><rect x="20" y="789" width="0" height="15" fill="rgb(230,162,11)"/><text x="23.00" y="799.50"></text></g><g><title>sys_read (2 samples, 0.02%)</title><rect x="20" y="773" width="0" height="15" fill="rgb(225,194,2)"/><text x="23.00" y="783.50"></text></g><g><title>vfs_read (2 samples, 0.02%)</title><rect x="20" y="757" width="0" height="15" fill="rgb(224,26,29)"/><text x="23.00" y="767.50"></text></g><g><title>__vfs_read (2 samples, 0.02%)</title><rect x="20" y="741" width="0" height="15" fill="rgb(248,153,49)"/><text x="23.00" y="751.50"></text></g><g><title>kernfs_fop_read (2 samples, 0.02%)</title><rect x="20" y="725" width="0" height="15" fill="rgb(223,114,52)"/><text x="23.00" y="735.50"></text></g><g><title>seq_read (2 samples, 0.02%)</title><rect x="20" y="709" width="0" height="15" fill="rgb(214,37,41)"/><text x="23.00" y="719.50"></text></g><g><title>kernfs_seq_show (2 samples, 0.02%)</title><rect x="20" y="693" width="0" height="15" fill="rgb(218,13,47)"/><text x="23.00" y="703.50"></text></g><g><title>sysfs_kf_seq_show (2 samples, 0.02%)</title><rect x="20" y="677" width="0" height="15" fill="rgb(242,199,45)"/><text x="23.00" y="687.50"></text></g><g><title>dev_attr_show (2 samples, 0.02%)</title><rect x="20" y="661" width="0" height="15" fill="rgb(219,79,53)"/><text x="23.00" y="671.50"></text></g><g><title>resource_show (2 samples, 0.02%)</title><rect x="20" y="645" width="0" height="15" fill="rgb(217,155,51)"/><text x="23.00" y="655.50"></text></g><g><title>sprintf (2 samples, 0.02%)</title><rect x="20" y="629" width="0" height="15" fill="rgb(207,63,6)"/><text x="23.00" y="639.50"></text></g><g><title>vsnprintf (2 samples, 0.02%)</title><rect x="20" y="613" width="0" height="15" fill="rgb(233,144,49)"/><text x="23.00" y="623.50"></text></g><g><title>find_physaddrs (1 samples, 0.01%)</title><rect x="20" y="837" width="1" height="15" fill="rgb(236,53,30)"/><text x="23.00" y="847.50"></text></g><g><title>rte_mem_virt2phy (1 samples, 0.01%)</title><rect x="20" y="821" width="1" height="15" fill="rgb(217,129,30)"/><text x="23.00" y="831.50"></text></g><g><title>open64 (1 samples, 0.01%)</title><rect x="20" y="805" width="1" height="15" fill="rgb(229,51,30)"/><text x="23.00" y="815.50"></text></g><g><title>__libc_open64 (1 samples, 0.01%)</title><rect x="20" y="789" width="1" height="15" fill="rgb(247,209,16)"/><text x="23.00" y="799.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="20" y="773" width="1" height="15" fill="rgb(211,34,46)"/><text x="23.00" y="783.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="20" y="757" width="1" height="15" fill="rgb(209,226,8)"/><text x="23.00" y="767.50"></text></g><g><title>sys_openat (1 samples, 0.01%)</title><rect x="20" y="741" width="1" height="15" fill="rgb(248,67,37)"/><text x="23.00" y="751.50"></text></g><g><title>do_sys_open (1 samples, 0.01%)</title><rect x="20" y="725" width="1" height="15" fill="rgb(235,158,36)"/><text x="23.00" y="735.50"></text></g><g><title>do_filp_open (1 samples, 0.01%)</title><rect x="20" y="709" width="1" height="15" fill="rgb(227,30,17)"/><text x="23.00" y="719.50"></text></g><g><title>path_openat (1 samples, 0.01%)</title><rect x="20" y="693" width="1" height="15" fill="rgb(249,201,20)"/><text x="23.00" y="703.50"></text></g><g><title>link_path_walk (1 samples, 0.01%)</title><rect x="20" y="677" width="1" height="15" fill="rgb(224,10,26)"/><text x="23.00" y="687.50"></text></g><g><title>proc_self_get_link (1 samples, 0.01%)</title><rect x="20" y="661" width="1" height="15" fill="rgb(245,26,52)"/><text x="23.00" y="671.50"></text></g><g><title>kmem_cache_alloc_trace (1 samples, 0.01%)</title><rect x="20" y="645" width="1" height="15" fill="rgb(225,52,25)"/><text x="23.00" y="655.50"></text></g><g><title>_cond_resched (5 samples, 0.06%)</title><rect x="23" y="629" width="1" height="15" fill="rgb(212,55,40)"/><text x="26.00" y="639.50"></text></g><g><title>_cond_resched (14 samples, 0.16%)</title><rect x="31" y="613" width="2" height="15" fill="rgb(221,67,38)"/><text x="34.00" y="623.50"></text></g><g><title>rcu_all_qs (3 samples, 0.03%)</title><rect x="33" y="597" width="0" height="15" fill="rgb(206,102,39)"/><text x="36.00" y="607.50"></text></g><g><title>clear_huge_page (74 samples, 0.84%)</title><rect x="24" y="629" width="10" height="15" fill="rgb(221,127,24)"/><text x="27.00" y="639.50"></text></g><g><title>rcu_all_qs (6 samples, 0.07%)</title><rect x="33" y="613" width="1" height="15" fill="rgb(238,180,2)"/><text x="36.00" y="623.50"></text></g><g><title>map_all_hugepages (2,122 samples, 24.09%)</title><rect x="21" y="837" width="284" height="15" fill="rgb(214,138,31)"/><text x="24.00" y="847.50">map_all_hugepages</text></g><g><title>__GI___mmap64 (2,122 samples, 24.09%)</title><rect x="21" y="821" width="284" height="15" fill="rgb(207,169,32)"/><text x="24.00" y="831.50">__GI___mmap64</text></g><g><title>entry_SYSCALL_64_after_hwframe (2,122 samples, 24.09%)</title><rect x="21" y="805" width="284" height="15" fill="rgb(238,190,23)"/><text x="24.00" y="815.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (2,122 samples, 24.09%)</title><rect x="21" y="789" width="284" height="15" fill="rgb(244,164,52)"/><text x="24.00" y="799.50">do_syscall_64</text></g><g><title>sys_mmap (2,122 samples, 24.09%)</title><rect x="21" y="773" width="284" height="15" fill="rgb(225,164,20)"/><text x="24.00" y="783.50">sys_mmap</text></g><g><title>sys_mmap_pgoff (2,122 samples, 24.09%)</title><rect x="21" y="757" width="284" height="15" fill="rgb(239,193,49)"/><text x="24.00" y="767.50">sys_mmap_pgoff</text></g><g><title>vm_mmap_pgoff (2,122 samples, 24.09%)</title><rect x="21" y="741" width="284" height="15" fill="rgb(241,69,24)"/><text x="24.00" y="751.50">vm_mmap_pgoff</text></g><g><title>__mm_populate (2,122 samples, 24.09%)</title><rect x="21" y="725" width="284" height="15" fill="rgb(230,22,28)"/><text x="24.00" y="735.50">__mm_populate</text></g><g><title>populate_vma_page_range (2,122 samples, 24.09%)</title><rect x="21" y="709" width="284" height="15" fill="rgb(210,178,7)"/><text x="24.00" y="719.50">populate_vma_page_range</text></g><g><title>__get_user_pages (2,122 samples, 24.09%)</title><rect x="21" y="693" width="284" height="15" fill="rgb(211,90,37)"/><text x="24.00" y="703.50">__get_user_pages</text></g><g><title>follow_hugetlb_page (2,122 samples, 24.09%)</title><rect x="21" y="677" width="284" height="15" fill="rgb(215,41,50)"/><text x="24.00" y="687.50">follow_hugetlb_page</text></g><g><title>hugetlb_fault (2,102 samples, 23.86%)</title><rect x="23" y="661" width="282" height="15" fill="rgb(217,84,45)"/><text x="26.00" y="671.50">hugetlb_fault</text></g><g><title>hugetlb_no_page (2,102 samples, 23.86%)</title><rect x="23" y="645" width="282" height="15" fill="rgb(217,191,46)"/><text x="26.00" y="655.50">hugetlb_no_page</text></g><g><title>clear_page_erms (2,023 samples, 22.97%)</title><rect x="34" y="629" width="271" height="15" fill="rgb(248,150,54)"/><text x="37.00" y="639.50">clear_page_erms</text></g><g><title>pvn_tls::main (2,124 samples, 24.11%)</title><rect x="20" y="949" width="285" height="15" fill="rgb(244,13,37)"/><text x="23.00" y="959.50">pvn_tls::main</text></g><g><title>e2d2::scheduler::context::initialize_system (2,124 samples, 24.11%)</title><rect x="20" y="933" width="285" height="15" fill="rgb(208,167,36)"/><text x="23.00" y="943.50">e2d2::scheduler::context::initialize_s..</text></g><g><title>init_system_whitelisted (2,124 samples, 24.11%)</title><rect x="20" y="917" width="285" height="15" fill="rgb(234,44,47)"/><text x="23.00" y="927.50">init_system_whitelisted</text></g><g><title>init_eal (2,124 samples, 24.11%)</title><rect x="20" y="901" width="285" height="15" fill="rgb(235,80,17)"/><text x="23.00" y="911.50">init_eal</text></g><g><title>rte_eal_init (2,124 samples, 24.11%)</title><rect x="20" y="885" width="285" height="15" fill="rgb(241,110,44)"/><text x="23.00" y="895.50">rte_eal_init</text></g><g><title>rte_eal_memory_init (2,124 samples, 24.11%)</title><rect x="20" y="869" width="285" height="15" fill="rgb(242,106,29)"/><text x="23.00" y="879.50">rte_eal_memory_init</text></g><g><title>rte_eal_hugepage_init (2,124 samples, 24.11%)</title><rect x="20" y="853" width="285" height="15" fill="rgb(243,87,16)"/><text x="23.00" y="863.50">rte_eal_hugepage_init</text></g><g><title>rte_log (1 samples, 0.01%)</title><rect x="305" y="837" width="0" height="15" fill="rgb(236,39,25)"/><text x="308.00" y="847.50"></text></g><g><title>rte_vlog (1 samples, 0.01%)</title><rect x="305" y="821" width="0" height="15" fill="rgb(248,86,23)"/><text x="308.00" y="831.50"></text></g><g><title>[unknown] (2,199 samples, 24.97%)</title><rect x="11" y="965" width="294" height="15" fill="rgb(210,163,39)"/><text x="14.00" y="975.50">[unknown]</text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.01%)</title><rect x="305" y="949" width="0" height="15" fill="rgb(249,195,32)"/><text x="308.00" y="959.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.01%)</title><rect x="305" y="933" width="0" height="15" fill="rgb(224,132,2)"/><text x="308.00" y="943.50"></text></g><g><title>regex::compile::Compiler::compile_finish (1 samples, 0.01%)</title><rect x="305" y="917" width="0" height="15" fill="rgb(239,197,36)"/><text x="308.00" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="305" y="949" width="0" height="15" fill="rgb(224,194,50)"/><text x="308.00" y="959.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="305" y="933" width="0" height="15" fill="rgb(236,108,23)"/><text x="308.00" y="943.50"></text></g><g><title>sys_clone (1 samples, 0.01%)</title><rect x="305" y="917" width="0" height="15" fill="rgb(210,163,32)"/><text x="308.00" y="927.50"></text></g><g><title>_do_fork (1 samples, 0.01%)</title><rect x="305" y="901" width="0" height="15" fill="rgb(209,14,32)"/><text x="308.00" y="911.50"></text></g><g><title>copy_process.part.35 (1 samples, 0.01%)</title><rect x="305" y="885" width="0" height="15" fill="rgb(233,146,7)"/><text x="308.00" y="895.50"></text></g><g><title>__vmalloc_node_range (1 samples, 0.01%)</title><rect x="305" y="869" width="0" height="15" fill="rgb(241,120,31)"/><text x="308.00" y="879.50"></text></g><g><title>__get_vm_area_node (1 samples, 0.01%)</title><rect x="305" y="853" width="0" height="15" fill="rgb(216,158,50)"/><text x="308.00" y="863.50"></text></g><g><title>alloc_vmap_area (1 samples, 0.01%)</title><rect x="305" y="837" width="0" height="15" fill="rgb(246,209,45)"/><text x="308.00" y="847.50"></text></g><g><title>__insert_vmap_area (1 samples, 0.01%)</title><rect x="305" y="821" width="0" height="15" fill="rgb(211,164,33)"/><text x="308.00" y="831.50"></text></g><g><title>acpi_os_read_memory (2 samples, 0.02%)</title><rect x="305" y="837" width="1" height="15" fill="rgb(218,142,23)"/><text x="308.00" y="847.50"></text></g><g><title>apei_check_gar (1 samples, 0.01%)</title><rect x="306" y="837" width="0" height="15" fill="rgb(220,123,42)"/><text x="309.00" y="847.50"></text></g><g><title>intel_bts_enable_local (2 samples, 0.02%)</title><rect x="306" y="837" width="0" height="15" fill="rgb(205,77,1)"/><text x="309.00" y="847.50"></text></g><g><title>native_apic_mem_write (1 samples, 0.01%)</title><rect x="306" y="837" width="0" height="15" fill="rgb(236,216,38)"/><text x="309.00" y="847.50"></text></g><g><title>native_flush_tlb_one_user (1 samples, 0.01%)</title><rect x="306" y="837" width="0" height="15" fill="rgb(223,159,11)"/><text x="309.00" y="847.50"></text></g><g><title>native_write_msr (12 samples, 0.14%)</title><rect x="306" y="837" width="2" height="15" fill="rgb(250,202,8)"/><text x="309.00" y="847.50"></text></g><g><title>schedule_tail (20 samples, 0.23%)</title><rect x="305" y="933" width="3" height="15" fill="rgb(213,89,33)"/><text x="308.00" y="943.50"></text></g><g><title>finish_task_switch (20 samples, 0.23%)</title><rect x="305" y="917" width="3" height="15" fill="rgb(254,197,14)"/><text x="308.00" y="927.50"></text></g><g><title>__perf_event_task_sched_in (20 samples, 0.23%)</title><rect x="305" y="901" width="3" height="15" fill="rgb(251,112,27)"/><text x="308.00" y="911.50"></text></g><g><title>x86_pmu_enable (20 samples, 0.23%)</title><rect x="305" y="885" width="3" height="15" fill="rgb(221,95,38)"/><text x="308.00" y="895.50"></text></g><g><title>intel_pmu_enable_all (20 samples, 0.23%)</title><rect x="305" y="869" width="3" height="15" fill="rgb(254,60,43)"/><text x="308.00" y="879.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (20 samples, 0.23%)</title><rect x="305" y="853" width="3" height="15" fill="rgb(252,73,23)"/><text x="308.00" y="863.50"></text></g><g><title>nmi_cpu_backtrace_handler (1 samples, 0.01%)</title><rect x="308" y="837" width="0" height="15" fill="rgb(248,150,16)"/><text x="311.00" y="847.50"></text></g><g><title>__GI___clone (22 samples, 0.25%)</title><rect x="305" y="965" width="3" height="15" fill="rgb(238,99,8)"/><text x="308.00" y="975.50"></text></g><g><title>ret_from_fork (21 samples, 0.24%)</title><rect x="305" y="949" width="3" height="15" fill="rgb(240,72,37)"/><text x="308.00" y="959.50"></text></g><g><title>syscall_return_slowpath (1 samples, 0.01%)</title><rect x="308" y="933" width="0" height="15" fill="rgb(225,200,7)"/><text x="311.00" y="943.50"></text></g><g><title>_dl_start_user (1 samples, 0.01%)</title><rect x="308" y="965" width="0" height="15" fill="rgb(221,51,50)"/><text x="311.00" y="975.50"></text></g><g><title>_dl_init (1 samples, 0.01%)</title><rect x="308" y="949" width="0" height="15" fill="rgb(221,155,5)"/><text x="311.00" y="959.50"></text></g><g><title>call_init (1 samples, 0.01%)</title><rect x="308" y="933" width="0" height="15" fill="rgb(227,143,22)"/><text x="311.00" y="943.50"></text></g><g><title>rte_net_crc_init (1 samples, 0.01%)</title><rect x="308" y="917" width="0" height="15" fill="rgb(215,140,11)"/><text x="311.00" y="927.50"></text></g><g><title>rte_net_crc_scalar_init (1 samples, 0.01%)</title><rect x="308" y="901" width="0" height="15" fill="rgb(242,12,52)"/><text x="311.00" y="911.50"></text></g><g><title>crc32_eth_init_lut (1 samples, 0.01%)</title><rect x="308" y="885" width="0" height="15" fill="rgb(250,54,23)"/><text x="311.00" y="895.50"></text></g><g><title>reflect_32bits (1 samples, 0.01%)</title><rect x="308" y="869" width="0" height="15" fill="rgb(228,189,9)"/><text x="311.00" y="879.50"></text></g><g><title>__pthread_cond_signal (1 samples, 0.01%)</title><rect x="308" y="885" width="0" height="15" fill="rgb(222,223,4)"/><text x="311.00" y="895.50"></text></g><g><title>futex_wake (1 samples, 0.01%)</title><rect x="308" y="869" width="0" height="15" fill="rgb(222,8,3)"/><text x="311.00" y="879.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="308" y="853" width="0" height="15" fill="rgb(210,96,0)"/><text x="311.00" y="863.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="308" y="837" width="0" height="15" fill="rgb(222,226,52)"/><text x="311.00" y="847.50"></text></g><g><title>sys_futex (1 samples, 0.01%)</title><rect x="308" y="821" width="0" height="15" fill="rgb(241,59,29)"/><text x="311.00" y="831.50"></text></g><g><title>do_futex (1 samples, 0.01%)</title><rect x="308" y="805" width="0" height="15" fill="rgb(210,38,8)"/><text x="311.00" y="815.50"></text></g><g><title>futex_wake (1 samples, 0.01%)</title><rect x="308" y="789" width="0" height="15" fill="rgb(215,8,49)"/><text x="311.00" y="799.50"></text></g><g><title>wake_up_q (1 samples, 0.01%)</title><rect x="308" y="773" width="0" height="15" fill="rgb(252,6,50)"/><text x="311.00" y="783.50"></text></g><g><title>try_to_wake_up (1 samples, 0.01%)</title><rect x="308" y="757" width="0" height="15" fill="rgb(210,67,38)"/><text x="311.00" y="767.50"></text></g><g><title>ttwu_do_activate (1 samples, 0.01%)</title><rect x="308" y="741" width="0" height="15" fill="rgb(215,153,28)"/><text x="311.00" y="751.50"></text></g><g><title>activate_task (1 samples, 0.01%)</title><rect x="308" y="725" width="0" height="15" fill="rgb(231,30,53)"/><text x="311.00" y="735.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.01%)</title><rect x="308" y="709" width="0" height="15" fill="rgb(249,154,10)"/><text x="311.00" y="719.50"></text></g><g><title>i40e_aq_clear_pxe_mode (2 samples, 0.02%)</title><rect x="308" y="725" width="1" height="15" fill="rgb(235,146,39)"/><text x="311.00" y="735.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="308" y="709" width="1" height="15" fill="rgb(209,198,10)"/><text x="311.00" y="719.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="308" y="693" width="1" height="15" fill="rgb(218,0,41)"/><text x="311.00" y="703.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="308" y="677" width="1" height="15" fill="rgb(217,187,27)"/><text x="311.00" y="687.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="308" y="661" width="1" height="15" fill="rgb(254,66,38)"/><text x="311.00" y="671.50"></text></g><g><title>i40e_aq_set_mac_config (1 samples, 0.01%)</title><rect x="309" y="725" width="0" height="15" fill="rgb(219,18,17)"/><text x="312.00" y="735.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="309" y="709" width="0" height="15" fill="rgb(205,227,22)"/><text x="312.00" y="719.50"></text></g><g><title>rte_delay_us_block (1 samples, 0.01%)</title><rect x="309" y="693" width="0" height="15" fill="rgb(207,67,28)"/><text x="312.00" y="703.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="309" y="677" width="0" height="15" fill="rgb(213,179,18)"/><text x="312.00" y="687.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="309" y="661" width="0" height="15" fill="rgb(218,78,17)"/><text x="312.00" y="671.50"></text></g><g><title>i40e_read_addr (3 samples, 0.03%)</title><rect x="309" y="709" width="0" height="15" fill="rgb(225,101,0)"/><text x="312.00" y="719.50"></text></g><g><title>rte_read32 (3 samples, 0.03%)</title><rect x="309" y="693" width="0" height="15" fill="rgb(227,167,44)"/><text x="312.00" y="703.50"></text></g><g><title>rte_read32_relaxed (3 samples, 0.03%)</title><rect x="309" y="677" width="0" height="15" fill="rgb(211,22,8)"/><text x="312.00" y="687.50"></text></g><g><title>rte_delay_us_block (3 samples, 0.03%)</title><rect x="309" y="709" width="1" height="15" fill="rgb(216,204,27)"/><text x="312.00" y="719.50"></text></g><g><title>rte_pause (3 samples, 0.03%)</title><rect x="309" y="693" width="1" height="15" fill="rgb(247,202,24)"/><text x="312.00" y="703.50"></text></g><g><title>_mm_pause (3 samples, 0.03%)</title><rect x="309" y="677" width="1" height="15" fill="rgb(205,229,48)"/><text x="312.00" y="687.50"></text></g><g><title>i40e_clear_hw (7 samples, 0.08%)</title><rect x="309" y="725" width="1" height="15" fill="rgb(214,120,11)"/><text x="312.00" y="735.50"></text></g><g><title>rte_write32 (1 samples, 0.01%)</title><rect x="310" y="709" width="0" height="15" fill="rgb(244,64,21)"/><text x="313.00" y="719.50"></text></g><g><title>rte_write32_relaxed (1 samples, 0.01%)</title><rect x="310" y="693" width="0" height="15" fill="rgb(226,114,14)"/><text x="313.00" y="703.50"></text></g><g><title>i40e_aq_get_cee_dcb_config (1 samples, 0.01%)</title><rect x="310" y="677" width="0" height="15" fill="rgb(225,36,24)"/><text x="313.00" y="687.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="310" y="661" width="0" height="15" fill="rgb(206,98,5)"/><text x="313.00" y="671.50"></text></g><g><title>i40e_asq_done (1 samples, 0.01%)</title><rect x="310" y="645" width="0" height="15" fill="rgb(224,191,15)"/><text x="313.00" y="655.50"></text></g><g><title>i40e_read_addr (1 samples, 0.01%)</title><rect x="310" y="629" width="0" height="15" fill="rgb(215,104,1)"/><text x="313.00" y="639.50"></text></g><g><title>rte_read32 (1 samples, 0.01%)</title><rect x="310" y="613" width="0" height="15" fill="rgb(213,38,33)"/><text x="313.00" y="623.50"></text></g><g><title>rte_read32_relaxed (1 samples, 0.01%)</title><rect x="310" y="597" width="0" height="15" fill="rgb(234,71,47)"/><text x="313.00" y="607.50"></text></g><g><title>i40e_get_dcb_config (3 samples, 0.03%)</title><rect x="310" y="693" width="0" height="15" fill="rgb(225,186,14)"/><text x="313.00" y="703.50"></text></g><g><title>i40e_aq_get_dcb_config (2 samples, 0.02%)</title><rect x="310" y="677" width="0" height="15" fill="rgb(212,183,41)"/><text x="313.00" y="687.50"></text></g><g><title>i40e_aq_get_lldp_mib (2 samples, 0.02%)</title><rect x="310" y="661" width="0" height="15" fill="rgb(241,18,35)"/><text x="313.00" y="671.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="310" y="645" width="0" height="15" fill="rgb(228,44,3)"/><text x="313.00" y="655.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="310" y="629" width="0" height="15" fill="rgb(248,7,45)"/><text x="313.00" y="639.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="310" y="613" width="0" height="15" fill="rgb(217,152,45)"/><text x="313.00" y="623.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="310" y="597" width="0" height="15" fill="rgb(249,122,3)"/><text x="313.00" y="607.50"></text></g><g><title>i40e_init_dcb (4 samples, 0.05%)</title><rect x="310" y="709" width="0" height="15" fill="rgb(242,16,46)"/><text x="313.00" y="719.50"></text></g><g><title>i40e_read_lldp_cfg (1 samples, 0.01%)</title><rect x="310" y="693" width="0" height="15" fill="rgb(250,6,48)"/><text x="313.00" y="703.50"></text></g><g><title>i40e_release_nvm (1 samples, 0.01%)</title><rect x="310" y="677" width="0" height="15" fill="rgb(233,155,2)"/><text x="313.00" y="687.50"></text></g><g><title>i40e_aq_release_resource (1 samples, 0.01%)</title><rect x="310" y="661" width="0" height="15" fill="rgb(227,14,6)"/><text x="313.00" y="671.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="310" y="645" width="0" height="15" fill="rgb(217,98,30)"/><text x="313.00" y="655.50"></text></g><g><title>rte_delay_us_block (1 samples, 0.01%)</title><rect x="310" y="629" width="0" height="15" fill="rgb(230,229,22)"/><text x="313.00" y="639.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="310" y="613" width="0" height="15" fill="rgb(220,137,54)"/><text x="313.00" y="623.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="310" y="597" width="0" height="15" fill="rgb(246,102,6)"/><text x="313.00" y="607.50"></text></g><g><title>i40e_dcb_init_configure (6 samples, 0.07%)</title><rect x="310" y="725" width="1" height="15" fill="rgb(234,194,21)"/><text x="313.00" y="735.50"></text></g><g><title>i40e_set_dcb_config (2 samples, 0.02%)</title><rect x="310" y="709" width="1" height="15" fill="rgb(216,69,50)"/><text x="313.00" y="719.50"></text></g><g><title>i40e_aq_set_lldp_mib (2 samples, 0.02%)</title><rect x="310" y="693" width="1" height="15" fill="rgb(209,216,47)"/><text x="313.00" y="703.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="310" y="677" width="1" height="15" fill="rgb(229,7,36)"/><text x="313.00" y="687.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="310" y="661" width="1" height="15" fill="rgb(253,60,34)"/><text x="313.00" y="671.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="310" y="645" width="1" height="15" fill="rgb(210,212,26)"/><text x="313.00" y="655.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="310" y="629" width="1" height="15" fill="rgb(229,68,35)"/><text x="313.00" y="639.50"></text></g><g><title>i40e_dev_stats_reset (1 samples, 0.01%)</title><rect x="311" y="725" width="0" height="15" fill="rgb(212,40,15)"/><text x="314.00" y="735.50"></text></g><g><title>i40e_update_vsi_stats (1 samples, 0.01%)</title><rect x="311" y="709" width="0" height="15" fill="rgb(233,60,13)"/><text x="314.00" y="719.50"></text></g><g><title>i40e_stat_update_48 (1 samples, 0.01%)</title><rect x="311" y="693" width="0" height="15" fill="rgb(232,22,31)"/><text x="314.00" y="703.50"></text></g><g><title>i40e_read_addr (1 samples, 0.01%)</title><rect x="311" y="677" width="0" height="15" fill="rgb(240,187,19)"/><text x="314.00" y="687.50"></text></g><g><title>rte_read32 (1 samples, 0.01%)</title><rect x="311" y="661" width="0" height="15" fill="rgb(224,61,34)"/><text x="314.00" y="671.50"></text></g><g><title>rte_read32_relaxed (1 samples, 0.01%)</title><rect x="311" y="645" width="0" height="15" fill="rgb(247,24,27)"/><text x="314.00" y="655.50"></text></g><g><title>rte_get_timer_cycles (4 samples, 0.05%)</title><rect x="311" y="645" width="0" height="15" fill="rgb(234,44,33)"/><text x="314.00" y="655.50"></text></g><g><title>rte_get_tsc_cycles (4 samples, 0.05%)</title><rect x="311" y="629" width="0" height="15" fill="rgb(248,34,24)"/><text x="314.00" y="639.50"></text></g><g><title>rte_rdtsc (4 samples, 0.05%)</title><rect x="311" y="613" width="0" height="15" fill="rgb(220,39,36)"/><text x="314.00" y="623.50"></text></g><g><title>i40e_aq_get_link_info (21 samples, 0.24%)</title><rect x="311" y="693" width="2" height="15" fill="rgb(215,149,24)"/><text x="314.00" y="703.50"></text></g><g><title>i40e_asq_send_command (21 samples, 0.24%)</title><rect x="311" y="677" width="2" height="15" fill="rgb(226,172,46)"/><text x="314.00" y="687.50"></text></g><g><title>rte_delay_us_block (21 samples, 0.24%)</title><rect x="311" y="661" width="2" height="15" fill="rgb(249,142,52)"/><text x="314.00" y="671.50"></text></g><g><title>rte_pause (17 samples, 0.19%)</title><rect x="311" y="645" width="2" height="15" fill="rgb(253,194,17)"/><text x="314.00" y="655.50"></text></g><g><title>_mm_pause (17 samples, 0.19%)</title><rect x="311" y="629" width="2" height="15" fill="rgb(217,74,18)"/><text x="314.00" y="639.50"></text></g><g><title>rte_get_timer_cycles (3 samples, 0.03%)</title><rect x="314" y="661" width="0" height="15" fill="rgb(244,212,42)"/><text x="317.00" y="671.50"></text></g><g><title>rte_get_tsc_cycles (3 samples, 0.03%)</title><rect x="314" y="645" width="0" height="15" fill="rgb(251,134,28)"/><text x="317.00" y="655.50"></text></g><g><title>rte_rdtsc (3 samples, 0.03%)</title><rect x="314" y="629" width="0" height="15" fill="rgb(247,62,12)"/><text x="317.00" y="639.50"></text></g><g><title>i40e_dev_sync_phy_type (57 samples, 0.65%)</title><rect x="311" y="725" width="7" height="15" fill="rgb(213,27,30)"/><text x="314.00" y="735.50"></text></g><g><title>i40e_aq_get_phy_capabilities (57 samples, 0.65%)</title><rect x="311" y="709" width="7" height="15" fill="rgb(235,98,8)"/><text x="314.00" y="719.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.41%)</title><rect x="313" y="693" width="5" height="15" fill="rgb(222,132,28)"/><text x="316.00" y="703.50"></text></g><g><title>rte_delay_us_block (36 samples, 0.41%)</title><rect x="313" y="677" width="5" height="15" fill="rgb(234,24,34)"/><text x="316.00" y="687.50"></text></g><g><title>rte_pause (32 samples, 0.36%)</title><rect x="314" y="661" width="4" height="15" fill="rgb(238,104,40)"/><text x="317.00" y="671.50"></text></g><g><title>_mm_pause (32 samples, 0.36%)</title><rect x="314" y="645" width="4" height="15" fill="rgb(212,150,28)"/><text x="317.00" y="655.50"></text></g><g><title>i40e_asq_send_command (4 samples, 0.05%)</title><rect x="318" y="693" width="1" height="15" fill="rgb(254,53,20)"/><text x="321.00" y="703.50"></text></g><g><title>rte_delay_us_block (4 samples, 0.05%)</title><rect x="318" y="677" width="1" height="15" fill="rgb(206,21,1)"/><text x="321.00" y="687.50"></text></g><g><title>rte_pause (4 samples, 0.05%)</title><rect x="318" y="661" width="1" height="15" fill="rgb(242,84,3)"/><text x="321.00" y="671.50"></text></g><g><title>_mm_pause (4 samples, 0.05%)</title><rect x="318" y="645" width="1" height="15" fill="rgb(208,0,11)"/><text x="321.00" y="655.50"></text></g><g><title>i40e_get_cap (8 samples, 0.09%)</title><rect x="318" y="725" width="1" height="15" fill="rgb(213,74,36)"/><text x="321.00" y="735.50"></text></g><g><title>i40e_aq_discover_capabilities (8 samples, 0.09%)</title><rect x="318" y="709" width="1" height="15" fill="rgb(215,123,18)"/><text x="321.00" y="719.50"></text></g><g><title>i40e_parse_discover_capabilities (4 samples, 0.05%)</title><rect x="319" y="693" width="0" height="15" fill="rgb(231,146,1)"/><text x="322.00" y="703.50"></text></g><g><title>i40e_aq_debug_read_register (4 samples, 0.05%)</title><rect x="319" y="677" width="0" height="15" fill="rgb(236,63,25)"/><text x="322.00" y="687.50"></text></g><g><title>i40e_asq_send_command (4 samples, 0.05%)</title><rect x="319" y="661" width="0" height="15" fill="rgb(219,163,3)"/><text x="322.00" y="671.50"></text></g><g><title>rte_delay_us_block (4 samples, 0.05%)</title><rect x="319" y="645" width="0" height="15" fill="rgb(242,130,14)"/><text x="322.00" y="655.50"></text></g><g><title>rte_pause (3 samples, 0.03%)</title><rect x="319" y="629" width="0" height="15" fill="rgb(236,148,16)"/><text x="322.00" y="639.50"></text></g><g><title>_mm_pause (3 samples, 0.03%)</title><rect x="319" y="613" width="0" height="15" fill="rgb(205,157,48)"/><text x="322.00" y="623.50"></text></g><g><title>i40e_get_mac_addr (1 samples, 0.01%)</title><rect x="319" y="725" width="1" height="15" fill="rgb(224,147,25)"/><text x="322.00" y="735.50"></text></g><g><title>i40e_aq_mac_address_read (1 samples, 0.01%)</title><rect x="319" y="709" width="1" height="15" fill="rgb(208,174,38)"/><text x="322.00" y="719.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="319" y="693" width="1" height="15" fill="rgb(241,108,18)"/><text x="322.00" y="703.50"></text></g><g><title>rte_delay_us_block (1 samples, 0.01%)</title><rect x="319" y="677" width="1" height="15" fill="rgb(243,105,49)"/><text x="322.00" y="687.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="319" y="661" width="1" height="15" fill="rgb(232,154,44)"/><text x="322.00" y="671.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="319" y="645" width="1" height="15" fill="rgb(233,192,40)"/><text x="322.00" y="655.50"></text></g><g><title>rte_get_timer_cycles (1 samples, 0.01%)</title><rect x="320" y="661" width="0" height="15" fill="rgb(248,117,44)"/><text x="323.00" y="671.50"></text></g><g><title>rte_get_tsc_cycles (1 samples, 0.01%)</title><rect x="320" y="645" width="0" height="15" fill="rgb(215,52,51)"/><text x="323.00" y="655.50"></text></g><g><title>rte_rdtsc (1 samples, 0.01%)</title><rect x="320" y="629" width="0" height="15" fill="rgb(214,202,7)"/><text x="323.00" y="639.50"></text></g><g><title>i40e_aq_get_firmware_version (9 samples, 0.10%)</title><rect x="320" y="709" width="1" height="15" fill="rgb(232,19,4)"/><text x="323.00" y="719.50"></text></g><g><title>i40e_asq_send_command (9 samples, 0.10%)</title><rect x="320" y="693" width="1" height="15" fill="rgb(206,117,52)"/><text x="323.00" y="703.50"></text></g><g><title>rte_delay_us_block (9 samples, 0.10%)</title><rect x="320" y="677" width="1" height="15" fill="rgb(221,174,2)"/><text x="323.00" y="687.50"></text></g><g><title>rte_pause (8 samples, 0.09%)</title><rect x="320" y="661" width="1" height="15" fill="rgb(244,46,53)"/><text x="323.00" y="671.50"></text></g><g><title>_mm_pause (8 samples, 0.09%)</title><rect x="320" y="645" width="1" height="15" fill="rgb(225,80,19)"/><text x="323.00" y="655.50"></text></g><g><title>i40e_init_arq (1 samples, 0.01%)</title><rect x="321" y="709" width="0" height="15" fill="rgb(206,101,45)"/><text x="324.00" y="719.50"></text></g><g><title>i40e_alloc_arq_bufs (1 samples, 0.01%)</title><rect x="321" y="693" width="0" height="15" fill="rgb(251,80,45)"/><text x="324.00" y="703.50"></text></g><g><title>i40e_allocate_dma_mem_d (1 samples, 0.01%)</title><rect x="321" y="677" width="0" height="15" fill="rgb(235,2,47)"/><text x="324.00" y="687.50"></text></g><g><title>rte_memzone_reserve_thread_safe (1 samples, 0.01%)</title><rect x="321" y="661" width="0" height="15" fill="rgb(212,202,5)"/><text x="324.00" y="671.50"></text></g><g><title>memzone_reserve_aligned_thread_unsafe (1 samples, 0.01%)</title><rect x="321" y="645" width="0" height="15" fill="rgb(240,214,36)"/><text x="324.00" y="655.50"></text></g><g><title>memzone_lookup_thread_unsafe (1 samples, 0.01%)</title><rect x="321" y="629" width="0" height="15" fill="rgb(218,219,39)"/><text x="324.00" y="639.50"></text></g><g><title>i40e_init_asq (1 samples, 0.01%)</title><rect x="321" y="709" width="0" height="15" fill="rgb(210,168,36)"/><text x="324.00" y="719.50"></text></g><g><title>i40e_alloc_asq_bufs (1 samples, 0.01%)</title><rect x="321" y="693" width="0" height="15" fill="rgb(229,69,11)"/><text x="324.00" y="703.50"></text></g><g><title>i40e_allocate_dma_mem_d (1 samples, 0.01%)</title><rect x="321" y="677" width="0" height="15" fill="rgb(231,111,12)"/><text x="324.00" y="687.50"></text></g><g><title>rte_memzone_reserve_thread_safe (1 samples, 0.01%)</title><rect x="321" y="661" width="0" height="15" fill="rgb(249,3,49)"/><text x="324.00" y="671.50"></text></g><g><title>rte_rwlock_write_lock (1 samples, 0.01%)</title><rect x="321" y="645" width="0" height="15" fill="rgb(222,160,1)"/><text x="324.00" y="655.50"></text></g><g><title>rte_atomic32_cmpset (1 samples, 0.01%)</title><rect x="321" y="629" width="0" height="15" fill="rgb(243,179,38)"/><text x="324.00" y="639.50"></text></g><g><title>i40e_acquire_nvm (2 samples, 0.02%)</title><rect x="321" y="693" width="0" height="15" fill="rgb(217,42,34)"/><text x="324.00" y="703.50"></text></g><g><title>i40e_aq_request_resource (2 samples, 0.02%)</title><rect x="321" y="677" width="0" height="15" fill="rgb(240,79,39)"/><text x="324.00" y="687.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="321" y="661" width="0" height="15" fill="rgb(218,31,3)"/><text x="324.00" y="671.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="321" y="645" width="0" height="15" fill="rgb(232,59,42)"/><text x="324.00" y="655.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="321" y="629" width="0" height="15" fill="rgb(251,164,51)"/><text x="324.00" y="639.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="321" y="613" width="0" height="15" fill="rgb(209,202,32)"/><text x="324.00" y="623.50"></text></g><g><title>i40e_asq_done (1 samples, 0.01%)</title><rect x="321" y="645" width="0" height="15" fill="rgb(206,168,29)"/><text x="324.00" y="655.50"></text></g><g><title>i40e_read_addr (1 samples, 0.01%)</title><rect x="321" y="629" width="0" height="15" fill="rgb(247,226,38)"/><text x="324.00" y="639.50"></text></g><g><title>rte_read32 (1 samples, 0.01%)</title><rect x="321" y="613" width="0" height="15" fill="rgb(245,221,31)"/><text x="324.00" y="623.50"></text></g><g><title>rte_read32_relaxed (1 samples, 0.01%)</title><rect x="321" y="597" width="0" height="15" fill="rgb(229,209,45)"/><text x="324.00" y="607.50"></text></g><g><title>i40e_read_addr (1 samples, 0.01%)</title><rect x="321" y="645" width="1" height="15" fill="rgb(253,126,35)"/><text x="324.00" y="655.50"></text></g><g><title>rte_read32 (1 samples, 0.01%)</title><rect x="321" y="629" width="1" height="15" fill="rgb(206,18,8)"/><text x="324.00" y="639.50"></text></g><g><title>rte_read32_relaxed (1 samples, 0.01%)</title><rect x="321" y="613" width="1" height="15" fill="rgb(241,221,51)"/><text x="324.00" y="623.50"></text></g><g><title>i40e_init_adminq (17 samples, 0.19%)</title><rect x="320" y="725" width="2" height="15" fill="rgb(222,133,47)"/><text x="323.00" y="735.50"></text></g><g><title>i40e_read_nvm_word (6 samples, 0.07%)</title><rect x="321" y="709" width="1" height="15" fill="rgb(226,152,28)"/><text x="324.00" y="719.50"></text></g><g><title>i40e_release_nvm (4 samples, 0.05%)</title><rect x="321" y="693" width="1" height="15" fill="rgb(214,218,44)"/><text x="324.00" y="703.50"></text></g><g><title>i40e_aq_release_resource (4 samples, 0.05%)</title><rect x="321" y="677" width="1" height="15" fill="rgb(232,204,15)"/><text x="324.00" y="687.50"></text></g><g><title>i40e_asq_send_command (4 samples, 0.05%)</title><rect x="321" y="661" width="1" height="15" fill="rgb(235,24,53)"/><text x="324.00" y="671.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="322" y="645" width="0" height="15" fill="rgb(241,217,13)"/><text x="325.00" y="655.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="322" y="629" width="0" height="15" fill="rgb(209,170,2)"/><text x="325.00" y="639.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="322" y="613" width="0" height="15" fill="rgb(231,140,17)"/><text x="325.00" y="623.50"></text></g><g><title>rte_get_timer_cycles (11 samples, 0.12%)</title><rect x="322" y="693" width="1" height="15" fill="rgb(252,84,10)"/><text x="325.00" y="703.50"></text></g><g><title>rte_get_tsc_cycles (11 samples, 0.12%)</title><rect x="322" y="677" width="1" height="15" fill="rgb(213,59,31)"/><text x="325.00" y="687.50"></text></g><g><title>rte_rdtsc (11 samples, 0.12%)</title><rect x="322" y="661" width="1" height="15" fill="rgb(232,64,11)"/><text x="325.00" y="671.50"></text></g><g><title>i40e_pf_reset (80 samples, 0.91%)</title><rect x="322" y="725" width="10" height="15" fill="rgb(245,148,10)"/><text x="325.00" y="735.50"></text></g><g><title>rte_delay_us_block (80 samples, 0.91%)</title><rect x="322" y="709" width="10" height="15" fill="rgb(208,65,3)"/><text x="325.00" y="719.50"></text></g><g><title>rte_pause (69 samples, 0.78%)</title><rect x="323" y="693" width="9" height="15" fill="rgb(208,19,32)"/><text x="326.00" y="703.50"></text></g><g><title>_mm_pause (69 samples, 0.78%)</title><rect x="323" y="677" width="9" height="15" fill="rgb(215,227,13)"/><text x="326.00" y="687.50"></text></g><g><title>i40e_pf_get_switch_config (2 samples, 0.02%)</title><rect x="332" y="709" width="1" height="15" fill="rgb(205,156,26)"/><text x="335.00" y="719.50"></text></g><g><title>i40e_aq_get_switch_config (2 samples, 0.02%)</title><rect x="332" y="693" width="1" height="15" fill="rgb(237,63,27)"/><text x="335.00" y="703.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="332" y="677" width="1" height="15" fill="rgb(219,173,22)"/><text x="335.00" y="687.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="332" y="661" width="1" height="15" fill="rgb(227,165,8)"/><text x="335.00" y="671.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="332" y="645" width="1" height="15" fill="rgb(225,204,0)"/><text x="335.00" y="655.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="332" y="629" width="1" height="15" fill="rgb(237,60,23)"/><text x="335.00" y="639.50"></text></g><g><title>rte_get_timer_cycles (1 samples, 0.01%)</title><rect x="333" y="645" width="0" height="15" fill="rgb(224,28,29)"/><text x="336.00" y="655.50"></text></g><g><title>rte_get_tsc_cycles (1 samples, 0.01%)</title><rect x="333" y="629" width="0" height="15" fill="rgb(241,110,11)"/><text x="336.00" y="639.50"></text></g><g><title>rte_rdtsc (1 samples, 0.01%)</title><rect x="333" y="613" width="0" height="15" fill="rgb(212,61,8)"/><text x="336.00" y="623.50"></text></g><g><title>i40e_update_flow_control (20 samples, 0.23%)</title><rect x="333" y="709" width="2" height="15" fill="rgb(250,223,32)"/><text x="336.00" y="719.50"></text></g><g><title>i40e_aq_get_link_info (20 samples, 0.23%)</title><rect x="333" y="693" width="2" height="15" fill="rgb(241,72,21)"/><text x="336.00" y="703.50"></text></g><g><title>i40e_asq_send_command (20 samples, 0.23%)</title><rect x="333" y="677" width="2" height="15" fill="rgb(232,202,46)"/><text x="336.00" y="687.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.23%)</title><rect x="333" y="661" width="2" height="15" fill="rgb(246,37,26)"/><text x="336.00" y="671.50"></text></g><g><title>rte_pause (19 samples, 0.22%)</title><rect x="333" y="645" width="2" height="15" fill="rgb(225,147,32)"/><text x="336.00" y="655.50"></text></g><g><title>_mm_pause (19 samples, 0.22%)</title><rect x="333" y="629" width="2" height="15" fill="rgb(212,169,32)"/><text x="336.00" y="639.50"></text></g><g><title>i40e_aq_update_vsi_params (1 samples, 0.01%)</title><rect x="335" y="693" width="1" height="15" fill="rgb(241,194,0)"/><text x="338.00" y="703.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="335" y="677" width="1" height="15" fill="rgb(253,82,46)"/><text x="338.00" y="687.50"></text></g><g><title>rte_delay_us_block (1 samples, 0.01%)</title><rect x="335" y="661" width="1" height="15" fill="rgb(244,7,44)"/><text x="338.00" y="671.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="335" y="645" width="1" height="15" fill="rgb(218,27,3)"/><text x="338.00" y="655.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="335" y="629" width="1" height="15" fill="rgb(244,28,33)"/><text x="338.00" y="639.50"></text></g><g><title>i40e_config_qinq (2 samples, 0.02%)</title><rect x="336" y="693" width="0" height="15" fill="rgb(206,83,42)"/><text x="339.00" y="703.50"></text></g><g><title>i40e_aq_debug_write_register (2 samples, 0.02%)</title><rect x="336" y="677" width="0" height="15" fill="rgb(230,50,39)"/><text x="339.00" y="687.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="336" y="661" width="0" height="15" fill="rgb(218,106,21)"/><text x="339.00" y="671.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="336" y="645" width="0" height="15" fill="rgb(232,168,39)"/><text x="339.00" y="655.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="336" y="629" width="0" height="15" fill="rgb(249,153,28)"/><text x="339.00" y="639.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="336" y="613" width="0" height="15" fill="rgb(230,176,25)"/><text x="339.00" y="623.50"></text></g><g><title>i40e_vsi_add_mac (2 samples, 0.02%)</title><rect x="336" y="693" width="0" height="15" fill="rgb(240,164,36)"/><text x="339.00" y="703.50"></text></g><g><title>i40e_add_macvlan_filters (2 samples, 0.02%)</title><rect x="336" y="677" width="0" height="15" fill="rgb(240,112,20)"/><text x="339.00" y="687.50"></text></g><g><title>i40e_aq_add_macvlan (2 samples, 0.02%)</title><rect x="336" y="661" width="0" height="15" fill="rgb(240,206,14)"/><text x="339.00" y="671.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="336" y="645" width="0" height="15" fill="rgb(237,222,41)"/><text x="339.00" y="655.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="336" y="629" width="0" height="15" fill="rgb(237,206,0)"/><text x="339.00" y="639.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="336" y="613" width="0" height="15" fill="rgb(246,11,45)"/><text x="339.00" y="623.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="336" y="597" width="0" height="15" fill="rgb(209,187,8)"/><text x="339.00" y="607.50"></text></g><g><title>i40e_vsi_get_bw_config (2 samples, 0.02%)</title><rect x="336" y="693" width="0" height="15" fill="rgb(222,92,6)"/><text x="339.00" y="703.50"></text></g><g><title>i40e_aq_query_vsi_ets_sla_config (2 samples, 0.02%)</title><rect x="336" y="677" width="0" height="15" fill="rgb(233,228,4)"/><text x="339.00" y="687.50"></text></g><g><title>i40e_aq_tx_sched_cmd (2 samples, 0.02%)</title><rect x="336" y="661" width="0" height="15" fill="rgb(208,156,2)"/><text x="339.00" y="671.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="336" y="645" width="0" height="15" fill="rgb(206,64,6)"/><text x="339.00" y="655.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="336" y="629" width="0" height="15" fill="rgb(223,88,22)"/><text x="339.00" y="639.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="336" y="613" width="0" height="15" fill="rgb(246,175,1)"/><text x="339.00" y="623.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="336" y="597" width="0" height="15" fill="rgb(246,1,48)"/><text x="339.00" y="607.50"></text></g><g><title>i40e_pf_setup (30 samples, 0.34%)</title><rect x="332" y="725" width="5" height="15" fill="rgb(215,145,50)"/><text x="335.00" y="735.50"></text></g><g><title>i40e_vsi_setup (8 samples, 0.09%)</title><rect x="335" y="709" width="2" height="15" fill="rgb(216,204,47)"/><text x="338.00" y="719.50"></text></g><g><title>i40e_vsi_update_tc_bandwidth (1 samples, 0.01%)</title><rect x="336" y="693" width="1" height="15" fill="rgb(245,117,42)"/><text x="339.00" y="703.50"></text></g><g><title>i40e_aq_config_vsi_tc_bw (1 samples, 0.01%)</title><rect x="336" y="677" width="1" height="15" fill="rgb(247,48,50)"/><text x="339.00" y="687.50"></text></g><g><title>i40e_aq_tx_sched_cmd (1 samples, 0.01%)</title><rect x="336" y="661" width="1" height="15" fill="rgb(253,119,50)"/><text x="339.00" y="671.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="336" y="645" width="1" height="15" fill="rgb(232,71,41)"/><text x="339.00" y="655.50"></text></g><g><title>rte_delay_us_block (1 samples, 0.01%)</title><rect x="336" y="629" width="1" height="15" fill="rgb(235,205,4)"/><text x="339.00" y="639.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="336" y="613" width="1" height="15" fill="rgb(212,208,32)"/><text x="339.00" y="623.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="336" y="597" width="1" height="15" fill="rgb(245,147,41)"/><text x="339.00" y="607.50"></text></g><g><title>rte_get_timer_cycles (2 samples, 0.02%)</title><rect x="337" y="661" width="0" height="15" fill="rgb(253,223,4)"/><text x="340.00" y="671.50"></text></g><g><title>rte_get_tsc_cycles (2 samples, 0.02%)</title><rect x="337" y="645" width="0" height="15" fill="rgb(223,159,4)"/><text x="340.00" y="655.50"></text></g><g><title>rte_rdtsc (2 samples, 0.02%)</title><rect x="337" y="629" width="0" height="15" fill="rgb(241,154,45)"/><text x="340.00" y="639.50"></text></g><g><title>i40e_aq_get_phy_capabilities (37 samples, 0.42%)</title><rect x="337" y="709" width="4" height="15" fill="rgb(223,91,15)"/><text x="340.00" y="719.50"></text></g><g><title>i40e_asq_send_command (37 samples, 0.42%)</title><rect x="337" y="693" width="4" height="15" fill="rgb(245,31,40)"/><text x="340.00" y="703.50"></text></g><g><title>rte_delay_us_block (37 samples, 0.42%)</title><rect x="337" y="677" width="4" height="15" fill="rgb(235,206,44)"/><text x="340.00" y="687.50"></text></g><g><title>rte_pause (35 samples, 0.40%)</title><rect x="337" y="661" width="4" height="15" fill="rgb(249,57,32)"/><text x="340.00" y="671.50"></text></g><g><title>_mm_pause (35 samples, 0.40%)</title><rect x="337" y="645" width="4" height="15" fill="rgb(220,120,30)"/><text x="340.00" y="655.50"></text></g><g><title>rte_get_timer_cycles (1 samples, 0.01%)</title><rect x="341" y="645" width="1" height="15" fill="rgb(228,194,8)"/><text x="344.00" y="655.50"></text></g><g><title>rte_get_tsc_cycles (1 samples, 0.01%)</title><rect x="341" y="629" width="1" height="15" fill="rgb(241,124,37)"/><text x="344.00" y="639.50"></text></g><g><title>rte_rdtsc (1 samples, 0.01%)</title><rect x="341" y="613" width="1" height="15" fill="rgb(220,61,50)"/><text x="344.00" y="623.50"></text></g><g><title>i40e_aq_get_link_info (20 samples, 0.23%)</title><rect x="341" y="693" width="3" height="15" fill="rgb(235,41,5)"/><text x="344.00" y="703.50"></text></g><g><title>i40e_asq_send_command (20 samples, 0.23%)</title><rect x="341" y="677" width="3" height="15" fill="rgb(248,87,36)"/><text x="344.00" y="687.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.23%)</title><rect x="341" y="661" width="3" height="15" fill="rgb(239,94,6)"/><text x="344.00" y="671.50"></text></g><g><title>rte_pause (19 samples, 0.22%)</title><rect x="342" y="645" width="2" height="15" fill="rgb(253,123,49)"/><text x="345.00" y="655.50"></text></g><g><title>_mm_pause (19 samples, 0.22%)</title><rect x="342" y="629" width="2" height="15" fill="rgb(213,2,43)"/><text x="345.00" y="639.50"></text></g><g><title>i40e_asq_done (1 samples, 0.01%)</title><rect x="344" y="661" width="0" height="15" fill="rgb(213,128,29)"/><text x="347.00" y="671.50"></text></g><g><title>i40e_read_addr (1 samples, 0.01%)</title><rect x="344" y="645" width="0" height="15" fill="rgb(228,110,6)"/><text x="347.00" y="655.50"></text></g><g><title>rte_read32 (1 samples, 0.01%)</title><rect x="344" y="629" width="0" height="15" fill="rgb(219,136,18)"/><text x="347.00" y="639.50"></text></g><g><title>rte_read32_relaxed (1 samples, 0.01%)</title><rect x="344" y="613" width="0" height="15" fill="rgb(254,195,31)"/><text x="347.00" y="623.50"></text></g><g><title>rte_get_timer_cycles (2 samples, 0.02%)</title><rect x="344" y="645" width="1" height="15" fill="rgb(244,159,51)"/><text x="347.00" y="655.50"></text></g><g><title>rte_get_tsc_cycles (2 samples, 0.02%)</title><rect x="344" y="629" width="1" height="15" fill="rgb(224,143,11)"/><text x="347.00" y="639.50"></text></g><g><title>rte_rdtsc (2 samples, 0.02%)</title><rect x="344" y="613" width="1" height="15" fill="rgb(234,202,42)"/><text x="347.00" y="623.50"></text></g><g><title>i40e_set_fc (93 samples, 1.06%)</title><rect x="337" y="725" width="12" height="15" fill="rgb(205,81,20)"/><text x="340.00" y="735.50"></text></g><g><title>i40e_update_link_info (56 samples, 0.64%)</title><rect x="341" y="709" width="8" height="15" fill="rgb(235,139,16)"/><text x="344.00" y="719.50"></text></g><g><title>i40e_aq_get_phy_capabilities (36 samples, 0.41%)</title><rect x="344" y="693" width="5" height="15" fill="rgb(234,203,4)"/><text x="347.00" y="703.50"></text></g><g><title>i40e_asq_send_command (36 samples, 0.41%)</title><rect x="344" y="677" width="5" height="15" fill="rgb(246,177,25)"/><text x="347.00" y="687.50"></text></g><g><title>rte_delay_us_block (35 samples, 0.40%)</title><rect x="344" y="661" width="5" height="15" fill="rgb(249,35,31)"/><text x="347.00" y="671.50"></text></g><g><title>rte_pause (33 samples, 0.37%)</title><rect x="345" y="645" width="4" height="15" fill="rgb(236,135,42)"/><text x="348.00" y="655.50"></text></g><g><title>_mm_pause (33 samples, 0.37%)</title><rect x="345" y="629" width="4" height="15" fill="rgb(237,128,7)"/><text x="348.00" y="639.50"></text></g><g><title>attach_pmd_device (304 samples, 3.45%)</title><rect x="308" y="853" width="41" height="15" fill="rgb(231,83,21)"/><text x="311.00" y="863.50">att..</text></g><g><title>rte_eth_dev_attach (304 samples, 3.45%)</title><rect x="308" y="837" width="41" height="15" fill="rgb(222,45,12)"/><text x="311.00" y="847.50">rte..</text></g><g><title>rte_eal_hotplug_add (304 samples, 3.45%)</title><rect x="308" y="821" width="41" height="15" fill="rgb(208,207,46)"/><text x="311.00" y="831.50">rte..</text></g><g><title>pci_probe_all_drivers (304 samples, 3.45%)</title><rect x="308" y="805" width="41" height="15" fill="rgb(223,46,11)"/><text x="311.00" y="815.50">pci..</text></g><g><title>rte_pci_probe_one_driver (304 samples, 3.45%)</title><rect x="308" y="789" width="41" height="15" fill="rgb(222,20,17)"/><text x="311.00" y="799.50">rte..</text></g><g><title>eth_i40e_pci_probe (304 samples, 3.45%)</title><rect x="308" y="773" width="41" height="15" fill="rgb(223,23,12)"/><text x="311.00" y="783.50">eth..</text></g><g><title>rte_eth_dev_pci_generic_probe (304 samples, 3.45%)</title><rect x="308" y="757" width="41" height="15" fill="rgb(249,89,21)"/><text x="311.00" y="767.50">rte..</text></g><g><title>eth_i40e_dev_init (304 samples, 3.45%)</title><rect x="308" y="741" width="41" height="15" fill="rgb(246,117,3)"/><text x="311.00" y="751.50">eth..</text></g><g><title>i40e_vsi_config_double_vlan (1 samples, 0.01%)</title><rect x="349" y="725" width="0" height="15" fill="rgb(230,21,5)"/><text x="352.00" y="735.50"></text></g><g><title>i40e_aq_set_port_parameters (1 samples, 0.01%)</title><rect x="349" y="709" width="0" height="15" fill="rgb(227,17,12)"/><text x="352.00" y="719.50"></text></g><g><title>i40e_asq_send_command (1 samples, 0.01%)</title><rect x="349" y="693" width="0" height="15" fill="rgb(234,212,49)"/><text x="352.00" y="703.50"></text></g><g><title>rte_delay_us_block (1 samples, 0.01%)</title><rect x="349" y="677" width="0" height="15" fill="rgb(250,109,0)"/><text x="352.00" y="687.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="349" y="661" width="0" height="15" fill="rgb(239,203,53)"/><text x="352.00" y="671.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="349" y="645" width="0" height="15" fill="rgb(221,194,22)"/><text x="352.00" y="655.50"></text></g><g><title>i40e_vsi_add_mac (2 samples, 0.02%)</title><rect x="349" y="757" width="0" height="15" fill="rgb(223,2,1)"/><text x="352.00" y="767.50"></text></g><g><title>i40e_add_macvlan_filters (2 samples, 0.02%)</title><rect x="349" y="741" width="0" height="15" fill="rgb(244,229,40)"/><text x="352.00" y="751.50"></text></g><g><title>i40e_aq_add_macvlan (2 samples, 0.02%)</title><rect x="349" y="725" width="0" height="15" fill="rgb(235,122,10)"/><text x="352.00" y="735.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="349" y="709" width="0" height="15" fill="rgb(222,87,29)"/><text x="352.00" y="719.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="349" y="693" width="0" height="15" fill="rgb(226,100,14)"/><text x="352.00" y="703.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="349" y="677" width="0" height="15" fill="rgb(243,104,19)"/><text x="352.00" y="687.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="349" y="661" width="0" height="15" fill="rgb(242,20,3)"/><text x="352.00" y="671.50"></text></g><g><title>i40e_vsi_config_vlan_filter (6 samples, 0.07%)</title><rect x="349" y="773" width="1" height="15" fill="rgb(221,138,12)"/><text x="352.00" y="783.50"></text></g><g><title>i40e_vsi_delete_mac (4 samples, 0.05%)</title><rect x="349" y="757" width="1" height="15" fill="rgb(232,204,27)"/><text x="352.00" y="767.50"></text></g><g><title>i40e_remove_macvlan_filters (4 samples, 0.05%)</title><rect x="349" y="741" width="1" height="15" fill="rgb(224,1,7)"/><text x="352.00" y="751.50"></text></g><g><title>i40e_aq_remove_macvlan (4 samples, 0.05%)</title><rect x="349" y="725" width="1" height="15" fill="rgb(249,182,28)"/><text x="352.00" y="735.50"></text></g><g><title>i40e_asq_send_command (4 samples, 0.05%)</title><rect x="349" y="709" width="1" height="15" fill="rgb(248,44,14)"/><text x="352.00" y="719.50"></text></g><g><title>rte_delay_us_block (4 samples, 0.05%)</title><rect x="349" y="693" width="1" height="15" fill="rgb(242,219,8)"/><text x="352.00" y="703.50"></text></g><g><title>rte_pause (4 samples, 0.05%)</title><rect x="349" y="677" width="1" height="15" fill="rgb(245,57,50)"/><text x="352.00" y="687.50"></text></g><g><title>_mm_pause (4 samples, 0.05%)</title><rect x="349" y="661" width="1" height="15" fill="rgb(253,123,42)"/><text x="352.00" y="671.50"></text></g><g><title>rte_get_timer_cycles (1 samples, 0.01%)</title><rect x="350" y="709" width="0" height="15" fill="rgb(236,94,25)"/><text x="353.00" y="719.50"></text></g><g><title>rte_get_tsc_cycles (1 samples, 0.01%)</title><rect x="350" y="693" width="0" height="15" fill="rgb(234,169,18)"/><text x="353.00" y="703.50"></text></g><g><title>rte_rdtsc (1 samples, 0.01%)</title><rect x="350" y="677" width="0" height="15" fill="rgb(235,10,5)"/><text x="353.00" y="687.50"></text></g><g><title>i40e_dev_init_vlan (8 samples, 0.09%)</title><rect x="349" y="805" width="1" height="15" fill="rgb(253,35,18)"/><text x="352.00" y="815.50"></text></g><g><title>i40e_vlan_offload_set (8 samples, 0.09%)</title><rect x="349" y="789" width="1" height="15" fill="rgb(247,134,18)"/><text x="352.00" y="799.50"></text></g><g><title>i40e_vsi_config_vlan_stripping (2 samples, 0.02%)</title><rect x="350" y="773" width="0" height="15" fill="rgb(205,88,44)"/><text x="353.00" y="783.50"></text></g><g><title>i40e_aq_update_vsi_params (2 samples, 0.02%)</title><rect x="350" y="757" width="0" height="15" fill="rgb(224,39,9)"/><text x="353.00" y="767.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="350" y="741" width="0" height="15" fill="rgb(222,147,20)"/><text x="353.00" y="751.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="350" y="725" width="0" height="15" fill="rgb(242,157,11)"/><text x="353.00" y="735.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="350" y="709" width="0" height="15" fill="rgb(235,90,4)"/><text x="353.00" y="719.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="350" y="693" width="0" height="15" fill="rgb(212,125,50)"/><text x="353.00" y="703.50"></text></g><g><title>rte_get_timer_cycles (6 samples, 0.07%)</title><rect x="350" y="741" width="1" height="15" fill="rgb(227,4,31)"/><text x="353.00" y="751.50"></text></g><g><title>rte_get_tsc_cycles (6 samples, 0.07%)</title><rect x="350" y="725" width="1" height="15" fill="rgb(223,91,35)"/><text x="353.00" y="735.50"></text></g><g><title>rte_rdtsc (6 samples, 0.07%)</title><rect x="350" y="709" width="1" height="15" fill="rgb(238,170,48)"/><text x="353.00" y="719.50"></text></g><g><title>rte_eth_dev_configure (43 samples, 0.49%)</title><rect x="349" y="837" width="6" height="15" fill="rgb(224,18,41)"/><text x="352.00" y="847.50"></text></g><g><title>i40e_dev_configure (43 samples, 0.49%)</title><rect x="349" y="821" width="6" height="15" fill="rgb(229,0,17)"/><text x="352.00" y="831.50"></text></g><g><title>i40e_dev_sync_phy_type (35 samples, 0.40%)</title><rect x="350" y="805" width="5" height="15" fill="rgb(236,219,21)"/><text x="353.00" y="815.50"></text></g><g><title>i40e_aq_get_phy_capabilities (35 samples, 0.40%)</title><rect x="350" y="789" width="5" height="15" fill="rgb(227,152,5)"/><text x="353.00" y="799.50"></text></g><g><title>i40e_asq_send_command (35 samples, 0.40%)</title><rect x="350" y="773" width="5" height="15" fill="rgb(220,93,2)"/><text x="353.00" y="783.50"></text></g><g><title>rte_delay_us_block (35 samples, 0.40%)</title><rect x="350" y="757" width="5" height="15" fill="rgb(246,142,30)"/><text x="353.00" y="767.50"></text></g><g><title>rte_pause (29 samples, 0.33%)</title><rect x="351" y="741" width="4" height="15" fill="rgb(233,111,4)"/><text x="354.00" y="751.50"></text></g><g><title>_mm_pause (29 samples, 0.33%)</title><rect x="351" y="725" width="4" height="15" fill="rgb(223,216,5)"/><text x="354.00" y="735.50"></text></g><g><title>i40e_asq_done (1 samples, 0.01%)</title><rect x="355" y="773" width="0" height="15" fill="rgb(227,23,4)"/><text x="358.00" y="783.50"></text></g><g><title>i40e_read_addr (1 samples, 0.01%)</title><rect x="355" y="757" width="0" height="15" fill="rgb(236,26,22)"/><text x="358.00" y="767.50"></text></g><g><title>rte_read32 (1 samples, 0.01%)</title><rect x="355" y="741" width="0" height="15" fill="rgb(226,208,48)"/><text x="358.00" y="751.50"></text></g><g><title>rte_read32_relaxed (1 samples, 0.01%)</title><rect x="355" y="725" width="0" height="15" fill="rgb(209,193,46)"/><text x="358.00" y="735.50"></text></g><g><title>i40e_dev_link_update (21 samples, 0.24%)</title><rect x="355" y="821" width="3" height="15" fill="rgb(210,89,44)"/><text x="358.00" y="831.50"></text></g><g><title>i40e_aq_get_link_info (21 samples, 0.24%)</title><rect x="355" y="805" width="3" height="15" fill="rgb(220,61,23)"/><text x="358.00" y="815.50"></text></g><g><title>i40e_asq_send_command (21 samples, 0.24%)</title><rect x="355" y="789" width="3" height="15" fill="rgb(222,86,54)"/><text x="358.00" y="799.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.23%)</title><rect x="355" y="773" width="3" height="15" fill="rgb(239,214,4)"/><text x="358.00" y="783.50"></text></g><g><title>rte_pause (20 samples, 0.23%)</title><rect x="355" y="757" width="3" height="15" fill="rgb(227,7,49)"/><text x="358.00" y="767.50"></text></g><g><title>_mm_pause (20 samples, 0.23%)</title><rect x="355" y="741" width="3" height="15" fill="rgb(249,5,7)"/><text x="358.00" y="751.50"></text></g><g><title>i40e_aq_set_vsi_broadcast (2 samples, 0.02%)</title><rect x="358" y="805" width="0" height="15" fill="rgb(227,139,16)"/><text x="361.00" y="815.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="358" y="789" width="0" height="15" fill="rgb(227,223,53)"/><text x="361.00" y="799.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="358" y="773" width="0" height="15" fill="rgb(223,121,3)"/><text x="361.00" y="783.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="358" y="757" width="0" height="15" fill="rgb(252,217,45)"/><text x="361.00" y="767.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="358" y="741" width="0" height="15" fill="rgb(228,33,29)"/><text x="361.00" y="751.50"></text></g><g><title>rte_get_timer_cycles (3 samples, 0.03%)</title><rect x="358" y="741" width="0" height="15" fill="rgb(246,70,51)"/><text x="361.00" y="751.50"></text></g><g><title>rte_get_tsc_cycles (3 samples, 0.03%)</title><rect x="358" y="725" width="0" height="15" fill="rgb(250,105,48)"/><text x="361.00" y="735.50"></text></g><g><title>rte_rdtsc (3 samples, 0.03%)</title><rect x="358" y="709" width="0" height="15" fill="rgb(224,5,30)"/><text x="361.00" y="719.50"></text></g><g><title>i40e_dev_link_update (20 samples, 0.23%)</title><rect x="358" y="805" width="3" height="15" fill="rgb(239,183,25)"/><text x="361.00" y="815.50"></text></g><g><title>i40e_aq_get_link_info (20 samples, 0.23%)</title><rect x="358" y="789" width="3" height="15" fill="rgb(244,207,27)"/><text x="361.00" y="799.50"></text></g><g><title>i40e_asq_send_command (20 samples, 0.23%)</title><rect x="358" y="773" width="3" height="15" fill="rgb(213,84,52)"/><text x="361.00" y="783.50"></text></g><g><title>rte_delay_us_block (20 samples, 0.23%)</title><rect x="358" y="757" width="3" height="15" fill="rgb(206,4,41)"/><text x="361.00" y="767.50"></text></g><g><title>rte_pause (16 samples, 0.18%)</title><rect x="358" y="741" width="3" height="15" fill="rgb(205,220,37)"/><text x="361.00" y="751.50"></text></g><g><title>_mm_pause (16 samples, 0.18%)</title><rect x="358" y="725" width="3" height="15" fill="rgb(242,58,18)"/><text x="361.00" y="735.50"></text></g><g><title>i40e_read_rx_ctl (2 samples, 0.02%)</title><rect x="361" y="725" width="0" height="15" fill="rgb(206,60,13)"/><text x="364.00" y="735.50"></text></g><g><title>i40e_aq_rx_ctl_read_register (2 samples, 0.02%)</title><rect x="361" y="709" width="0" height="15" fill="rgb(254,225,53)"/><text x="364.00" y="719.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="361" y="693" width="0" height="15" fill="rgb(254,168,24)"/><text x="364.00" y="703.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="361" y="677" width="0" height="15" fill="rgb(219,126,28)"/><text x="364.00" y="687.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="361" y="661" width="0" height="15" fill="rgb(224,175,16)"/><text x="364.00" y="671.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="361" y="645" width="0" height="15" fill="rgb(250,7,30)"/><text x="364.00" y="655.50"></text></g><g><title>rte_get_timer_cycles (3 samples, 0.03%)</title><rect x="361" y="645" width="0" height="15" fill="rgb(229,185,31)"/><text x="364.00" y="655.50"></text></g><g><title>rte_get_tsc_cycles (3 samples, 0.03%)</title><rect x="361" y="629" width="0" height="15" fill="rgb(212,172,0)"/><text x="364.00" y="639.50"></text></g><g><title>rte_rdtsc (3 samples, 0.03%)</title><rect x="361" y="613" width="0" height="15" fill="rgb(209,28,40)"/><text x="364.00" y="623.50"></text></g><g><title>i40e_dev_rxtx_init (6 samples, 0.07%)</title><rect x="361" y="805" width="0" height="15" fill="rgb(213,133,49)"/><text x="364.00" y="815.50"></text></g><g><title>i40e_dev_rx_init (6 samples, 0.07%)</title><rect x="361" y="789" width="0" height="15" fill="rgb(210,6,9)"/><text x="364.00" y="799.50"></text></g><g><title>i40e_pf_config_mq_rx (6 samples, 0.07%)</title><rect x="361" y="773" width="0" height="15" fill="rgb(229,92,31)"/><text x="364.00" y="783.50"></text></g><g><title>i40e_pf_config_rss (6 samples, 0.07%)</title><rect x="361" y="757" width="0" height="15" fill="rgb(216,169,25)"/><text x="364.00" y="767.50"></text></g><g><title>i40e_hw_rss_hash_set (6 samples, 0.07%)</title><rect x="361" y="741" width="0" height="15" fill="rgb(251,23,52)"/><text x="364.00" y="751.50"></text></g><g><title>i40e_set_rss_key (4 samples, 0.05%)</title><rect x="361" y="725" width="0" height="15" fill="rgb(236,30,39)"/><text x="364.00" y="735.50"></text></g><g><title>i40e_write_rx_ctl (4 samples, 0.05%)</title><rect x="361" y="709" width="0" height="15" fill="rgb(211,138,36)"/><text x="364.00" y="719.50"></text></g><g><title>i40e_aq_rx_ctl_write_register (4 samples, 0.05%)</title><rect x="361" y="693" width="0" height="15" fill="rgb(227,160,35)"/><text x="364.00" y="703.50"></text></g><g><title>i40e_asq_send_command (4 samples, 0.05%)</title><rect x="361" y="677" width="0" height="15" fill="rgb(213,127,39)"/><text x="364.00" y="687.50"></text></g><g><title>rte_delay_us_block (4 samples, 0.05%)</title><rect x="361" y="661" width="0" height="15" fill="rgb(226,99,4)"/><text x="364.00" y="671.50"></text></g><g><title>rte_pause (1 samples, 0.01%)</title><rect x="361" y="645" width="0" height="15" fill="rgb(231,64,14)"/><text x="364.00" y="655.50"></text></g><g><title>_mm_pause (1 samples, 0.01%)</title><rect x="361" y="629" width="0" height="15" fill="rgb(244,40,37)"/><text x="364.00" y="639.50"></text></g><g><title>rte_get_timer_cycles (1 samples, 0.01%)</title><rect x="362" y="725" width="0" height="15" fill="rgb(217,162,54)"/><text x="365.00" y="735.50"></text></g><g><title>rte_get_tsc_cycles (1 samples, 0.01%)</title><rect x="362" y="709" width="0" height="15" fill="rgb(205,40,31)"/><text x="365.00" y="719.50"></text></g><g><title>rte_rdtsc (1 samples, 0.01%)</title><rect x="362" y="693" width="0" height="15" fill="rgb(220,212,47)"/><text x="365.00" y="703.50"></text></g><g><title>i40e_dev_switch_rx_queues (16 samples, 0.18%)</title><rect x="361" y="789" width="3" height="15" fill="rgb(229,88,25)"/><text x="364.00" y="799.50"></text></g><g><title>i40e_dev_rx_queue_start (16 samples, 0.18%)</title><rect x="361" y="773" width="3" height="15" fill="rgb(219,167,45)"/><text x="364.00" y="783.50"></text></g><g><title>i40e_switch_rx_queue (16 samples, 0.18%)</title><rect x="361" y="757" width="3" height="15" fill="rgb(241,191,16)"/><text x="364.00" y="767.50"></text></g><g><title>rte_delay_us_block (16 samples, 0.18%)</title><rect x="361" y="741" width="3" height="15" fill="rgb(245,181,5)"/><text x="364.00" y="751.50"></text></g><g><title>rte_pause (13 samples, 0.15%)</title><rect x="362" y="725" width="2" height="15" fill="rgb(224,196,31)"/><text x="365.00" y="735.50"></text></g><g><title>_mm_pause (13 samples, 0.15%)</title><rect x="362" y="709" width="2" height="15" fill="rgb(254,211,22)"/><text x="365.00" y="719.50"></text></g><g><title>rte_get_timer_cycles (1 samples, 0.01%)</title><rect x="364" y="725" width="0" height="15" fill="rgb(217,92,37)"/><text x="367.00" y="735.50"></text></g><g><title>rte_get_tsc_cycles (1 samples, 0.01%)</title><rect x="364" y="709" width="0" height="15" fill="rgb(251,224,6)"/><text x="367.00" y="719.50"></text></g><g><title>rte_rdtsc (1 samples, 0.01%)</title><rect x="364" y="693" width="0" height="15" fill="rgb(253,114,5)"/><text x="367.00" y="703.50"></text></g><g><title>i40e_dev_start (60 samples, 0.68%)</title><rect x="358" y="821" width="8" height="15" fill="rgb(225,145,50)"/><text x="361.00" y="831.50"></text></g><g><title>i40e_dev_switch_queues (32 samples, 0.36%)</title><rect x="361" y="805" width="5" height="15" fill="rgb(219,177,48)"/><text x="364.00" y="815.50"></text></g><g><title>i40e_dev_switch_tx_queues (16 samples, 0.18%)</title><rect x="364" y="789" width="2" height="15" fill="rgb(242,196,23)"/><text x="367.00" y="799.50"></text></g><g><title>i40e_dev_tx_queue_start (16 samples, 0.18%)</title><rect x="364" y="773" width="2" height="15" fill="rgb(212,190,7)"/><text x="367.00" y="783.50"></text></g><g><title>i40e_switch_tx_queue (16 samples, 0.18%)</title><rect x="364" y="757" width="2" height="15" fill="rgb(210,174,2)"/><text x="367.00" y="767.50"></text></g><g><title>rte_delay_us_block (16 samples, 0.18%)</title><rect x="364" y="741" width="2" height="15" fill="rgb(244,181,1)"/><text x="367.00" y="751.50"></text></g><g><title>rte_pause (14 samples, 0.16%)</title><rect x="364" y="725" width="2" height="15" fill="rgb(246,71,6)"/><text x="367.00" y="735.50"></text></g><g><title>_mm_pause (14 samples, 0.16%)</title><rect x="364" y="709" width="2" height="15" fill="rgb(209,130,30)"/><text x="367.00" y="719.50"></text></g><g><title>rte_eth_dev_start (83 samples, 0.94%)</title><rect x="355" y="837" width="11" height="15" fill="rgb(210,44,53)"/><text x="358.00" y="847.50"></text></g><g><title>rte_eth_dev_config_restore (2 samples, 0.02%)</title><rect x="366" y="821" width="0" height="15" fill="rgb(229,25,30)"/><text x="369.00" y="831.50"></text></g><g><title>rte_eth_promiscuous_enable (2 samples, 0.02%)</title><rect x="366" y="805" width="0" height="15" fill="rgb(230,125,4)"/><text x="369.00" y="815.50"></text></g><g><title>i40e_dev_promiscuous_enable (2 samples, 0.02%)</title><rect x="366" y="789" width="0" height="15" fill="rgb(223,102,22)"/><text x="369.00" y="799.50"></text></g><g><title>i40e_aq_set_vsi_unicast_promiscuous (2 samples, 0.02%)</title><rect x="366" y="773" width="0" height="15" fill="rgb(248,29,29)"/><text x="369.00" y="783.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="366" y="757" width="0" height="15" fill="rgb(222,115,3)"/><text x="369.00" y="767.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="366" y="741" width="0" height="15" fill="rgb(234,134,44)"/><text x="369.00" y="751.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="366" y="725" width="0" height="15" fill="rgb(240,119,44)"/><text x="369.00" y="735.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="366" y="709" width="0" height="15" fill="rgb(240,44,7)"/><text x="369.00" y="719.50"></text></g><g><title>e2d2::interface::port::phy_port::PmdPort::new_dpdk_port (432 samples, 4.90%)</title><rect x="308" y="869" width="58" height="15" fill="rgb(243,223,28)"/><text x="311.00" y="879.50">e2d2::..</text></g><g><title>init_pmd_port (128 samples, 1.45%)</title><rect x="349" y="853" width="17" height="15" fill="rgb(206,78,43)"/><text x="352.00" y="863.50"></text></g><g><title>rte_eth_promiscuous_enable (2 samples, 0.02%)</title><rect x="366" y="837" width="0" height="15" fill="rgb(226,203,15)"/><text x="369.00" y="847.50"></text></g><g><title>i40e_dev_promiscuous_enable (2 samples, 0.02%)</title><rect x="366" y="821" width="0" height="15" fill="rgb(252,146,45)"/><text x="369.00" y="831.50"></text></g><g><title>i40e_aq_set_vsi_multicast_promiscuous (2 samples, 0.02%)</title><rect x="366" y="805" width="0" height="15" fill="rgb(249,98,27)"/><text x="369.00" y="815.50"></text></g><g><title>i40e_asq_send_command (2 samples, 0.02%)</title><rect x="366" y="789" width="0" height="15" fill="rgb(223,143,51)"/><text x="369.00" y="799.50"></text></g><g><title>rte_delay_us_block (2 samples, 0.02%)</title><rect x="366" y="773" width="0" height="15" fill="rgb(251,228,13)"/><text x="369.00" y="783.50"></text></g><g><title>rte_pause (2 samples, 0.02%)</title><rect x="366" y="757" width="0" height="15" fill="rgb(236,150,52)"/><text x="369.00" y="767.50"></text></g><g><title>_mm_pause (2 samples, 0.02%)</title><rect x="366" y="741" width="0" height="15" fill="rgb(208,150,31)"/><text x="369.00" y="751.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (433 samples, 4.92%)</title><rect x="308" y="885" width="58" height="15" fill="rgb(242,120,44)"/><text x="311.00" y="895.50">e2d2::..</text></g><g><title>init_system_whitelisted (1 samples, 0.01%)</title><rect x="366" y="869" width="0" height="15" fill="rgb(206,89,43)"/><text x="369.00" y="879.50"></text></g><g><title>init_mempool (1 samples, 0.01%)</title><rect x="366" y="853" width="0" height="15" fill="rgb(220,197,52)"/><text x="369.00" y="863.50"></text></g><g><title>init_mempool_socket (1 samples, 0.01%)</title><rect x="366" y="837" width="0" height="15" fill="rgb(232,123,30)"/><text x="369.00" y="847.50"></text></g><g><title>rte_pktmbuf_pool_create (1 samples, 0.01%)</title><rect x="366" y="821" width="0" height="15" fill="rgb(250,13,22)"/><text x="369.00" y="831.50"></text></g><g><title>rte_mempool_populate_default (1 samples, 0.01%)</title><rect x="366" y="805" width="0" height="15" fill="rgb(249,200,16)"/><text x="369.00" y="815.50"></text></g><g><title>rte_mempool_populate_phys (1 samples, 0.01%)</title><rect x="366" y="789" width="0" height="15" fill="rgb(212,140,2)"/><text x="369.00" y="799.50"></text></g><g><title>mempool_add_elem (1 samples, 0.01%)</title><rect x="366" y="773" width="0" height="15" fill="rgb(226,155,24)"/><text x="369.00" y="783.50"></text></g><g><title>rte_mempool_ops_enqueue_bulk (1 samples, 0.01%)</title><rect x="366" y="757" width="0" height="15" fill="rgb(231,158,14)"/><text x="369.00" y="767.50"></text></g><g><title>common_ring_mp_enqueue (1 samples, 0.01%)</title><rect x="366" y="741" width="0" height="15" fill="rgb(208,4,23)"/><text x="369.00" y="751.50"></text></g><g><title>rte_ring_mp_enqueue_bulk (1 samples, 0.01%)</title><rect x="366" y="725" width="0" height="15" fill="rgb(244,164,50)"/><text x="369.00" y="735.50"></text></g><g><title>__rte_ring_do_enqueue (1 samples, 0.01%)</title><rect x="366" y="709" width="0" height="15" fill="rgb(243,137,17)"/><text x="369.00" y="719.50"></text></g><g><title>__rte_ring_move_prod_head (1 samples, 0.01%)</title><rect x="366" y="693" width="0" height="15" fill="rgb(236,200,37)"/><text x="369.00" y="703.50"></text></g><g><title>rte_atomic32_cmpset (1 samples, 0.01%)</title><rect x="366" y="677" width="0" height="15" fill="rgb(253,105,50)"/><text x="369.00" y="687.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.01%)</title><rect x="366" y="885" width="1" height="15" fill="rgb(228,27,21)"/><text x="369.00" y="895.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.01%)</title><rect x="366" y="869" width="1" height="15" fill="rgb(252,130,23)"/><text x="369.00" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="366" y="853" width="1" height="15" fill="rgb(249,11,47)"/><text x="369.00" y="863.50"></text></g><g><title>std::io::stdio::print_to::_$u7b$$u7b$closure$u7d$$u7d$::h0249537fb9ef42b4 (1 samples, 0.01%)</title><rect x="366" y="837" width="1" height="15" fill="rgb(241,27,21)"/><text x="369.00" y="847.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.01%)</title><rect x="366" y="821" width="1" height="15" fill="rgb(243,207,44)"/><text x="369.00" y="831.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.01%)</title><rect x="366" y="805" width="1" height="15" fill="rgb(211,116,52)"/><text x="369.00" y="815.50"></text></g><g><title>core::fmt::write (1 samples, 0.01%)</title><rect x="366" y="789" width="1" height="15" fill="rgb(253,119,41)"/><text x="369.00" y="799.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="366" y="773" width="1" height="15" fill="rgb(245,165,30)"/><text x="369.00" y="783.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.01%)</title><rect x="366" y="757" width="1" height="15" fill="rgb(207,125,23)"/><text x="369.00" y="767.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="366" y="741" width="1" height="15" fill="rgb(234,202,45)"/><text x="369.00" y="751.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="366" y="725" width="1" height="15" fill="rgb(215,187,39)"/><text x="369.00" y="735.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.01%)</title><rect x="366" y="709" width="1" height="15" fill="rgb(247,0,25)"/><text x="369.00" y="719.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.01%)</title><rect x="366" y="693" width="1" height="15" fill="rgb(206,136,41)"/><text x="369.00" y="703.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.01%)</title><rect x="366" y="677" width="1" height="15" fill="rgb(238,223,3)"/><text x="369.00" y="687.50"></text></g><g><title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="366" y="661" width="1" height="15" fill="rgb(220,62,4)"/><text x="369.00" y="671.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="366" y="645" width="1" height="15" fill="rgb(244,202,30)"/><text x="369.00" y="655.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="366" y="629" width="1" height="15" fill="rgb(207,206,18)"/><text x="369.00" y="639.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.01%)</title><rect x="366" y="613" width="1" height="15" fill="rgb(217,116,17)"/><text x="369.00" y="623.50"></text></g><g><title>__libc_write (1 samples, 0.01%)</title><rect x="366" y="597" width="1" height="15" fill="rgb(247,214,14)"/><text x="369.00" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="366" y="581" width="1" height="15" fill="rgb(207,119,22)"/><text x="369.00" y="591.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="366" y="565" width="1" height="15" fill="rgb(220,88,36)"/><text x="369.00" y="575.50"></text></g><g><title>sys_write (1 samples, 0.01%)</title><rect x="366" y="549" width="1" height="15" fill="rgb(214,114,35)"/><text x="369.00" y="559.50"></text></g><g><title>vfs_write (1 samples, 0.01%)</title><rect x="366" y="533" width="1" height="15" fill="rgb(233,211,12)"/><text x="369.00" y="543.50"></text></g><g><title>__vfs_write (1 samples, 0.01%)</title><rect x="366" y="517" width="1" height="15" fill="rgb(234,188,33)"/><text x="369.00" y="527.50"></text></g><g><title>tty_write (1 samples, 0.01%)</title><rect x="366" y="501" width="1" height="15" fill="rgb(220,204,14)"/><text x="369.00" y="511.50"></text></g><g><title>n_tty_write (1 samples, 0.01%)</title><rect x="366" y="485" width="1" height="15" fill="rgb(220,69,15)"/><text x="369.00" y="495.50"></text></g><g><title>pty_write (1 samples, 0.01%)</title><rect x="366" y="469" width="1" height="15" fill="rgb(226,132,35)"/><text x="369.00" y="479.50"></text></g><g><title>tty_flip_buffer_push (1 samples, 0.01%)</title><rect x="366" y="453" width="1" height="15" fill="rgb(254,136,6)"/><text x="369.00" y="463.50"></text></g><g><title>queue_work_on (1 samples, 0.01%)</title><rect x="366" y="437" width="1" height="15" fill="rgb(239,167,39)"/><text x="369.00" y="447.50"></text></g><g><title>__queue_work (1 samples, 0.01%)</title><rect x="366" y="421" width="1" height="15" fill="rgb(235,90,18)"/><text x="369.00" y="431.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="366" y="405" width="1" height="15" fill="rgb(210,16,47)"/><text x="369.00" y="415.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.01%)</title><rect x="366" y="389" width="1" height="15" fill="rgb(254,68,37)"/><text x="369.00" y="399.50"></text></g><g><title>native_flush_tlb_one_user (1 samples, 0.01%)</title><rect x="367" y="565" width="0" height="15" fill="rgb(247,161,38)"/><text x="370.00" y="575.50"></text></g><g><title>native_write_msr (4 samples, 0.05%)</title><rect x="367" y="565" width="0" height="15" fill="rgb(220,45,11)"/><text x="370.00" y="575.50"></text></g><g><title>_start (441 samples, 5.01%)</title><rect x="308" y="965" width="59" height="15" fill="rgb(219,10,24)"/><text x="311.00" y="975.50">_start</text></g><g><title>__libc_start_main (441 samples, 5.01%)</title><rect x="308" y="949" width="59" height="15" fill="rgb(228,23,27)"/><text x="311.00" y="959.50">__libc..</text></g><g><title>main (441 samples, 5.01%)</title><rect x="308" y="933" width="59" height="15" fill="rgb(243,160,54)"/><text x="311.00" y="943.50">main</text></g><g><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hc87de8565012a906 (441 samples, 5.01%)</title><rect x="308" y="917" width="59" height="15" fill="rgb(234,225,41)"/><text x="311.00" y="927.50">std::r..</text></g><g><title>pvn_tls::main (441 samples, 5.01%)</title><rect x="308" y="901" width="59" height="15" fill="rgb(209,75,21)"/><text x="311.00" y="911.50">pvn_tl..</text></g><g><title>std::thread::park (6 samples, 0.07%)</title><rect x="367" y="885" width="0" height="15" fill="rgb(210,217,7)"/><text x="370.00" y="895.50"></text></g><g><title>std::sync::condvar::Condvar::wait (6 samples, 0.07%)</title><rect x="367" y="869" width="0" height="15" fill="rgb(244,72,9)"/><text x="370.00" y="879.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (6 samples, 0.07%)</title><rect x="367" y="853" width="0" height="15" fill="rgb(231,21,9)"/><text x="370.00" y="863.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (6 samples, 0.07%)</title><rect x="367" y="837" width="0" height="15" fill="rgb(237,189,5)"/><text x="370.00" y="847.50"></text></g><g><title>__pthread_cond_wait (6 samples, 0.07%)</title><rect x="367" y="821" width="0" height="15" fill="rgb(214,16,33)"/><text x="370.00" y="831.50"></text></g><g><title>__pthread_cond_wait_common (6 samples, 0.07%)</title><rect x="367" y="805" width="0" height="15" fill="rgb(228,19,16)"/><text x="370.00" y="815.50"></text></g><g><title>futex_wait_cancelable (6 samples, 0.07%)</title><rect x="367" y="789" width="0" height="15" fill="rgb(230,110,50)"/><text x="370.00" y="799.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="367" y="773" width="0" height="15" fill="rgb(217,228,10)"/><text x="370.00" y="783.50"></text></g><g><title>do_syscall_64 (6 samples, 0.07%)</title><rect x="367" y="757" width="0" height="15" fill="rgb(253,168,29)"/><text x="370.00" y="767.50"></text></g><g><title>sys_futex (6 samples, 0.07%)</title><rect x="367" y="741" width="0" height="15" fill="rgb(226,120,40)"/><text x="370.00" y="751.50"></text></g><g><title>do_futex (6 samples, 0.07%)</title><rect x="367" y="725" width="0" height="15" fill="rgb(223,123,7)"/><text x="370.00" y="735.50"></text></g><g><title>futex_wait (6 samples, 0.07%)</title><rect x="367" y="709" width="0" height="15" fill="rgb(242,193,20)"/><text x="370.00" y="719.50"></text></g><g><title>futex_wait_queue_me (6 samples, 0.07%)</title><rect x="367" y="693" width="0" height="15" fill="rgb(245,222,26)"/><text x="370.00" y="703.50"></text></g><g><title>schedule (6 samples, 0.07%)</title><rect x="367" y="677" width="0" height="15" fill="rgb(240,150,13)"/><text x="370.00" y="687.50"></text></g><g><title>__schedule (6 samples, 0.07%)</title><rect x="367" y="661" width="0" height="15" fill="rgb(242,184,32)"/><text x="370.00" y="671.50"></text></g><g><title>finish_task_switch (6 samples, 0.07%)</title><rect x="367" y="645" width="0" height="15" fill="rgb(229,151,41)"/><text x="370.00" y="655.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.07%)</title><rect x="367" y="629" width="0" height="15" fill="rgb(224,149,23)"/><text x="370.00" y="639.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.07%)</title><rect x="367" y="613" width="0" height="15" fill="rgb(241,49,23)"/><text x="370.00" y="623.50"></text></g><g><title>intel_pmu_enable_all (6 samples, 0.07%)</title><rect x="367" y="597" width="0" height="15" fill="rgb(240,93,48)"/><text x="370.00" y="607.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (6 samples, 0.07%)</title><rect x="367" y="581" width="0" height="15" fill="rgb(230,97,41)"/><text x="370.00" y="591.50"></text></g><g><title>perf_sample_event_took (1 samples, 0.01%)</title><rect x="367" y="565" width="0" height="15" fill="rgb(211,65,15)"/><text x="370.00" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="367" y="965" width="0" height="15" fill="rgb(221,216,37)"/><text x="370.00" y="975.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="367" y="949" width="0" height="15" fill="rgb(237,100,17)"/><text x="370.00" y="959.50"></text></g><g><title>sys_execve (1 samples, 0.01%)</title><rect x="367" y="933" width="0" height="15" fill="rgb(225,96,23)"/><text x="370.00" y="943.50"></text></g><g><title>do_execveat_common.isra.34 (1 samples, 0.01%)</title><rect x="367" y="917" width="0" height="15" fill="rgb(237,124,31)"/><text x="370.00" y="927.50"></text></g><g><title>search_binary_handler (1 samples, 0.01%)</title><rect x="367" y="901" width="0" height="15" fill="rgb(217,79,12)"/><text x="370.00" y="911.50"></text></g><g><title>load_elf_binary (1 samples, 0.01%)</title><rect x="367" y="885" width="0" height="15" fill="rgb(252,94,44)"/><text x="370.00" y="895.50"></text></g><g><title>clear_user (1 samples, 0.01%)</title><rect x="367" y="869" width="0" height="15" fill="rgb(215,32,6)"/><text x="370.00" y="879.50"></text></g><g><title>__clear_user (1 samples, 0.01%)</title><rect x="367" y="853" width="0" height="15" fill="rgb(210,14,47)"/><text x="370.00" y="863.50"></text></g><g><title>page_fault (1 samples, 0.01%)</title><rect x="367" y="837" width="0" height="15" fill="rgb(238,156,41)"/><text x="370.00" y="847.50"></text></g><g><title>do_page_fault (1 samples, 0.01%)</title><rect x="367" y="821" width="0" height="15" fill="rgb(220,144,41)"/><text x="370.00" y="831.50"></text></g><g><title>__do_page_fault (1 samples, 0.01%)</title><rect x="367" y="805" width="0" height="15" fill="rgb(222,75,44)"/><text x="370.00" y="815.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="367" y="789" width="0" height="15" fill="rgb(216,116,18)"/><text x="370.00" y="799.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="367" y="773" width="0" height="15" fill="rgb(223,181,54)"/><text x="370.00" y="783.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="367" y="757" width="0" height="15" fill="rgb(235,13,5)"/><text x="370.00" y="767.50"></text></g><g><title>__anon_vma_prepare (1 samples, 0.01%)</title><rect x="367" y="741" width="0" height="15" fill="rgb(230,142,42)"/><text x="370.00" y="751.50"></text></g><g><title>down_write (1 samples, 0.01%)</title><rect x="367" y="725" width="0" height="15" fill="rgb(228,158,40)"/><text x="370.00" y="735.50"></text></g><g><title>open_verify (1 samples, 0.01%)</title><rect x="367" y="965" width="1" height="15" fill="rgb(229,164,37)"/><text x="370.00" y="975.50"></text></g><g><title>__libc_open64 (1 samples, 0.01%)</title><rect x="367" y="949" width="1" height="15" fill="rgb(238,216,11)"/><text x="370.00" y="959.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="367" y="933" width="1" height="15" fill="rgb(230,218,39)"/><text x="370.00" y="943.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="367" y="917" width="1" height="15" fill="rgb(221,50,46)"/><text x="370.00" y="927.50"></text></g><g><title>sys_openat (1 samples, 0.01%)</title><rect x="367" y="901" width="1" height="15" fill="rgb(246,81,43)"/><text x="370.00" y="911.50"></text></g><g><title>do_sys_open (1 samples, 0.01%)</title><rect x="367" y="885" width="1" height="15" fill="rgb(209,113,33)"/><text x="370.00" y="895.50"></text></g><g><title>do_filp_open (1 samples, 0.01%)</title><rect x="367" y="869" width="1" height="15" fill="rgb(205,76,42)"/><text x="370.00" y="879.50"></text></g><g><title>path_openat (1 samples, 0.01%)</title><rect x="367" y="853" width="1" height="15" fill="rgb(233,72,9)"/><text x="370.00" y="863.50"></text></g><g><title>link_path_walk (1 samples, 0.01%)</title><rect x="367" y="837" width="1" height="15" fill="rgb(245,86,15)"/><text x="370.00" y="847.50"></text></g><g><title>walk_component (1 samples, 0.01%)</title><rect x="367" y="821" width="1" height="15" fill="rgb(211,210,21)"/><text x="370.00" y="831.50"></text></g><g><title>lookup_fast (1 samples, 0.01%)</title><rect x="367" y="805" width="1" height="15" fill="rgb(237,124,36)"/><text x="370.00" y="815.50"></text></g><g><title>__d_lookup_rcu (1 samples, 0.01%)</title><rect x="367" y="789" width="1" height="15" fill="rgb(223,128,9)"/><text x="370.00" y="799.50"></text></g><g><title>acpi_os_read_memory (1 samples, 0.01%)</title><rect x="368" y="581" width="0" height="15" fill="rgb(206,141,40)"/><text x="371.00" y="591.50"></text></g><g><title>intel_pmu_handle_irq (1 samples, 0.01%)</title><rect x="368" y="581" width="0" height="15" fill="rgb(240,96,14)"/><text x="371.00" y="591.50"></text></g><g><title>pvn_tls::main (7 samples, 0.08%)</title><rect x="368" y="965" width="1" height="15" fill="rgb(234,105,45)"/><text x="371.00" y="975.50"></text></g><g><title>std::io::stdio::_print (7 samples, 0.08%)</title><rect x="368" y="949" width="1" height="15" fill="rgb(237,199,43)"/><text x="371.00" y="959.50"></text></g><g><title>std::io::stdio::print_to (7 samples, 0.08%)</title><rect x="368" y="933" width="1" height="15" fill="rgb(242,92,8)"/><text x="371.00" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.08%)</title><rect x="368" y="917" width="1" height="15" fill="rgb(224,103,1)"/><text x="371.00" y="927.50"></text></g><g><title>std::io::stdio::print_to::_$u7b$$u7b$closure$u7d$$u7d$::h0249537fb9ef42b4 (7 samples, 0.08%)</title><rect x="368" y="901" width="1" height="15" fill="rgb(221,205,42)"/><text x="371.00" y="911.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 0.08%)</title><rect x="368" y="885" width="1" height="15" fill="rgb(217,139,14)"/><text x="371.00" y="895.50"></text></g><g><title>std::io::stdio::Stdout::lock (7 samples, 0.08%)</title><rect x="368" y="869" width="1" height="15" fill="rgb(246,69,30)"/><text x="371.00" y="879.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (7 samples, 0.08%)</title><rect x="368" y="853" width="1" height="15" fill="rgb(210,201,48)"/><text x="371.00" y="863.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (7 samples, 0.08%)</title><rect x="368" y="837" width="1" height="15" fill="rgb(241,100,33)"/><text x="371.00" y="847.50"></text></g><g><title>__GI___pthread_mutex_lock (7 samples, 0.08%)</title><rect x="368" y="821" width="1" height="15" fill="rgb(224,32,45)"/><text x="371.00" y="831.50"></text></g><g><title>__lll_lock_wait (7 samples, 0.08%)</title><rect x="368" y="805" width="1" height="15" fill="rgb(217,90,45)"/><text x="371.00" y="815.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="368" y="789" width="1" height="15" fill="rgb(218,98,6)"/><text x="371.00" y="799.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="368" y="773" width="1" height="15" fill="rgb(213,100,4)"/><text x="371.00" y="783.50"></text></g><g><title>sys_futex (7 samples, 0.08%)</title><rect x="368" y="757" width="1" height="15" fill="rgb(212,115,18)"/><text x="371.00" y="767.50"></text></g><g><title>do_futex (7 samples, 0.08%)</title><rect x="368" y="741" width="1" height="15" fill="rgb(208,201,15)"/><text x="371.00" y="751.50"></text></g><g><title>futex_wait (7 samples, 0.08%)</title><rect x="368" y="725" width="1" height="15" fill="rgb(242,17,14)"/><text x="371.00" y="735.50"></text></g><g><title>futex_wait_queue_me (7 samples, 0.08%)</title><rect x="368" y="709" width="1" height="15" fill="rgb(242,184,35)"/><text x="371.00" y="719.50"></text></g><g><title>schedule (7 samples, 0.08%)</title><rect x="368" y="693" width="1" height="15" fill="rgb(227,1,14)"/><text x="371.00" y="703.50"></text></g><g><title>__schedule (7 samples, 0.08%)</title><rect x="368" y="677" width="1" height="15" fill="rgb(227,14,25)"/><text x="371.00" y="687.50"></text></g><g><title>finish_task_switch (7 samples, 0.08%)</title><rect x="368" y="661" width="1" height="15" fill="rgb(220,5,24)"/><text x="371.00" y="671.50"></text></g><g><title>__perf_event_task_sched_in (7 samples, 0.08%)</title><rect x="368" y="645" width="1" height="15" fill="rgb(249,168,36)"/><text x="371.00" y="655.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.07%)</title><rect x="368" y="629" width="1" height="15" fill="rgb(236,203,29)"/><text x="371.00" y="639.50"></text></g><g><title>intel_pmu_enable_all (6 samples, 0.07%)</title><rect x="368" y="613" width="1" height="15" fill="rgb(219,89,54)"/><text x="371.00" y="623.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (6 samples, 0.07%)</title><rect x="368" y="597" width="1" height="15" fill="rgb(215,8,54)"/><text x="371.00" y="607.50"></text></g><g><title>native_write_msr (4 samples, 0.05%)</title><rect x="368" y="581" width="1" height="15" fill="rgb(216,156,7)"/><text x="371.00" y="591.50"></text></g><g><title>pvn-tls (2,674 samples, 30.36%)</title><rect x="10" y="981" width="359" height="15" fill="rgb(247,229,47)"/><text x="13.00" y="991.50">pvn-tls</text></g><g><title>rte_eal_hugepage_init (1 samples, 0.01%)</title><rect x="369" y="965" width="0" height="15" fill="rgb(231,14,12)"/><text x="372.00" y="975.50"></text></g><g><title>map_all_hugepages (1 samples, 0.01%)</title><rect x="369" y="949" width="0" height="15" fill="rgb(236,178,7)"/><text x="372.00" y="959.50"></text></g><g><title>open64 (1 samples, 0.01%)</title><rect x="369" y="933" width="0" height="15" fill="rgb(229,59,25)"/><text x="372.00" y="943.50"></text></g><g><title>__libc_open64 (1 samples, 0.01%)</title><rect x="369" y="917" width="0" height="15" fill="rgb(233,168,24)"/><text x="372.00" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="369" y="901" width="0" height="15" fill="rgb(226,5,53)"/><text x="372.00" y="911.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="369" y="885" width="0" height="15" fill="rgb(231,19,53)"/><text x="372.00" y="895.50"></text></g><g><title>sys_openat (1 samples, 0.01%)</title><rect x="369" y="869" width="0" height="15" fill="rgb(237,95,31)"/><text x="372.00" y="879.50"></text></g><g><title>do_sys_open (1 samples, 0.01%)</title><rect x="369" y="853" width="0" height="15" fill="rgb(226,125,54)"/><text x="372.00" y="863.50"></text></g><g><title>do_filp_open (1 samples, 0.01%)</title><rect x="369" y="837" width="0" height="15" fill="rgb(246,180,50)"/><text x="372.00" y="847.50"></text></g><g><title>path_openat (1 samples, 0.01%)</title><rect x="369" y="821" width="0" height="15" fill="rgb(242,121,24)"/><text x="372.00" y="831.50"></text></g><g><title>vfs_open (1 samples, 0.01%)</title><rect x="369" y="805" width="0" height="15" fill="rgb(251,192,35)"/><text x="372.00" y="815.50"></text></g><g><title>do_dentry_open (1 samples, 0.01%)</title><rect x="369" y="789" width="0" height="15" fill="rgb(216,45,21)"/><text x="372.00" y="799.50"></text></g><g><title>security_file_open (1 samples, 0.01%)</title><rect x="369" y="773" width="0" height="15" fill="rgb(244,195,24)"/><text x="372.00" y="783.50"></text></g><g><title>fsnotify (1 samples, 0.01%)</title><rect x="369" y="757" width="0" height="15" fill="rgb(245,155,0)"/><text x="372.00" y="767.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (24 samples, 0.27%)</title><rect x="369" y="965" width="3" height="15" fill="rgb(244,9,33)"/><text x="372.00" y="975.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (8 samples, 0.09%)</title><rect x="372" y="965" width="1" height="15" fill="rgb(250,119,37)"/><text x="375.00" y="975.50"></text></g><g><title>[libzcsi.so] (18 samples, 0.20%)</title><rect x="373" y="965" width="2" height="15" fill="rgb(216,170,51)"/><text x="376.00" y="975.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (18 samples, 0.20%)</title><rect x="373" y="949" width="2" height="15" fill="rgb(254,147,23)"/><text x="376.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (8 samples, 0.09%)</title><rect x="374" y="933" width="1" height="15" fill="rgb(214,68,32)"/><text x="377.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (8 samples, 0.09%)</title><rect x="374" y="917" width="1" height="15" fill="rgb(214,39,42)"/><text x="377.00" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (31 samples, 0.35%)</title><rect x="375" y="949" width="5" height="15" fill="rgb(246,70,14)"/><text x="378.00" y="959.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (18 samples, 0.20%)</title><rect x="386" y="837" width="3" height="15" fill="rgb(214,119,6)"/><text x="389.00" y="847.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (18 samples, 0.20%)</title><rect x="386" y="821" width="3" height="15" fill="rgb(230,135,51)"/><text x="389.00" y="831.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (18 samples, 0.20%)</title><rect x="386" y="805" width="3" height="15" fill="rgb(224,103,26)"/><text x="389.00" y="815.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (84 samples, 0.95%)</title><rect x="380" y="949" width="11" height="15" fill="rgb(225,82,47)"/><text x="383.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (33 samples, 0.37%)</title><rect x="386" y="933" width="5" height="15" fill="rgb(224,226,16)"/><text x="389.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (33 samples, 0.37%)</title><rect x="386" y="917" width="5" height="15" fill="rgb(233,69,38)"/><text x="389.00" y="927.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (33 samples, 0.37%)</title><rect x="386" y="901" width="5" height="15" fill="rgb(213,39,17)"/><text x="389.00" y="911.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (33 samples, 0.37%)</title><rect x="386" y="885" width="5" height="15" fill="rgb(233,7,13)"/><text x="389.00" y="895.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (33 samples, 0.37%)</title><rect x="386" y="869" width="5" height="15" fill="rgb(254,75,24)"/><text x="389.00" y="879.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (33 samples, 0.37%)</title><rect x="386" y="853" width="5" height="15" fill="rgb(249,63,12)"/><text x="389.00" y="863.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (15 samples, 0.17%)</title><rect x="389" y="837" width="2" height="15" fill="rgb(254,128,41)"/><text x="392.00" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (15 samples, 0.17%)</title><rect x="389" y="821" width="2" height="15" fill="rgb(212,194,54)"/><text x="392.00" y="831.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (164 samples, 1.86%)</title><rect x="391" y="949" width="22" height="15" fill="rgb(210,5,5)"/><text x="394.00" y="959.50">&lt;..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (164 samples, 1.86%)</title><rect x="391" y="933" width="22" height="15" fill="rgb(248,96,54)"/><text x="394.00" y="943.50">&lt;..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (164 samples, 1.86%)</title><rect x="391" y="917" width="22" height="15" fill="rgb(223,166,27)"/><text x="394.00" y="927.50">&lt;..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2 samples, 0.02%)</title><rect x="412" y="901" width="1" height="15" fill="rgb(252,125,36)"/><text x="415.00" y="911.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (2 samples, 0.02%)</title><rect x="412" y="885" width="1" height="15" fill="rgb(247,120,50)"/><text x="415.00" y="895.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (34 samples, 0.39%)</title><rect x="413" y="949" width="4" height="15" fill="rgb(248,224,39)"/><text x="416.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (18 samples, 0.20%)</title><rect x="415" y="933" width="2" height="15" fill="rgb(220,114,25)"/><text x="418.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (18 samples, 0.20%)</title><rect x="415" y="917" width="2" height="15" fill="rgb(215,192,16)"/><text x="418.00" y="927.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (102 samples, 1.16%)</title><rect x="417" y="949" width="14" height="15" fill="rgb(218,216,43)"/><text x="420.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (3 samples, 0.03%)</title><rect x="431" y="933" width="0" height="15" fill="rgb(251,186,19)"/><text x="434.00" y="943.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (3 samples, 0.03%)</title><rect x="431" y="917" width="0" height="15" fill="rgb(213,23,34)"/><text x="434.00" y="927.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (3 samples, 0.03%)</title><rect x="431" y="901" width="0" height="15" fill="rgb(221,35,6)"/><text x="434.00" y="911.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (3 samples, 0.03%)</title><rect x="431" y="885" width="0" height="15" fill="rgb(224,129,44)"/><text x="434.00" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.03%)</title><rect x="431" y="869" width="0" height="15" fill="rgb(248,163,4)"/><text x="434.00" y="879.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (12 samples, 0.14%)</title><rect x="437" y="917" width="1" height="15" fill="rgb(219,80,34)"/><text x="440.00" y="927.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (15 samples, 0.17%)</title><rect x="438" y="917" width="2" height="15" fill="rgb(246,73,39)"/><text x="441.00" y="927.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (159 samples, 1.81%)</title><rect x="431" y="949" width="21" height="15" fill="rgb(254,30,30)"/><text x="434.00" y="959.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (115 samples, 1.31%)</title><rect x="437" y="933" width="15" height="15" fill="rgb(231,117,52)"/><text x="440.00" y="943.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (88 samples, 1.00%)</title><rect x="440" y="917" width="12" height="15" fill="rgb(214,164,18)"/><text x="443.00" y="927.50"></text></g><g><title>__GI___pthread_mutex_lock (20 samples, 0.23%)</title><rect x="452" y="949" width="3" height="15" fill="rgb(231,84,28)"/><text x="455.00" y="959.50"></text></g><g><title>core::ptr::real_drop_in_place (17 samples, 0.19%)</title><rect x="456" y="869" width="3" height="15" fill="rgb(215,113,28)"/><text x="459.00" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.19%)</title><rect x="456" y="853" width="3" height="15" fill="rgb(232,111,41)"/><text x="459.00" y="863.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_unlock (17 samples, 0.19%)</title><rect x="456" y="837" width="3" height="15" fill="rgb(236,172,28)"/><text x="459.00" y="847.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (17 samples, 0.19%)</title><rect x="456" y="821" width="3" height="15" fill="rgb(218,193,9)"/><text x="459.00" y="831.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (43 samples, 0.49%)</title><rect x="455" y="949" width="6" height="15" fill="rgb(245,62,53)"/><text x="458.00" y="959.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (43 samples, 0.49%)</title><rect x="455" y="933" width="6" height="15" fill="rgb(234,213,1)"/><text x="458.00" y="943.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (43 samples, 0.49%)</title><rect x="455" y="917" width="6" height="15" fill="rgb(207,141,22)"/><text x="458.00" y="927.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (32 samples, 0.36%)</title><rect x="456" y="901" width="5" height="15" fill="rgb(240,42,3)"/><text x="459.00" y="911.50"></text></g><g><title>std::sync::mpsc::sync::Packet&lt;T&gt;::try_recv (32 samples, 0.36%)</title><rect x="456" y="885" width="5" height="15" fill="rgb(207,107,40)"/><text x="459.00" y="895.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.17%)</title><rect x="459" y="869" width="2" height="15" fill="rgb(243,24,43)"/><text x="462.00" y="879.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (15 samples, 0.17%)</title><rect x="459" y="853" width="2" height="15" fill="rgb(235,131,21)"/><text x="462.00" y="863.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (15 samples, 0.17%)</title><rect x="459" y="837" width="2" height="15" fill="rgb(254,89,35)"/><text x="462.00" y="847.50"></text></g><g><title>i40e_recv_pkts_vec (65 samples, 0.74%)</title><rect x="461" y="949" width="8" height="15" fill="rgb(213,19,27)"/><text x="464.00" y="959.50"></text></g><g><title>[unknown] (759 samples, 8.62%)</title><rect x="375" y="965" width="102" height="15" fill="rgb(245,175,24)"/><text x="378.00" y="975.50">[unknown]</text></g><g><title>recv_pkts (57 samples, 0.65%)</title><rect x="469" y="949" width="8" height="15" fill="rgb(208,212,26)"/><text x="472.00" y="959.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.01%)</title><rect x="477" y="853" width="0" height="15" fill="rgb(227,56,32)"/><text x="480.00" y="863.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="477" y="837" width="0" height="15" fill="rgb(235,64,18)"/><text x="480.00" y="847.50"></text></g><g><title>tcache_init (1 samples, 0.01%)</title><rect x="477" y="821" width="0" height="15" fill="rgb(222,173,3)"/><text x="480.00" y="831.50"></text></g><g><title>tcache_init (1 samples, 0.01%)</title><rect x="477" y="805" width="0" height="15" fill="rgb(223,110,16)"/><text x="480.00" y="815.50"></text></g><g><title>arena_get2 (1 samples, 0.01%)</title><rect x="477" y="789" width="0" height="15" fill="rgb(209,86,3)"/><text x="480.00" y="799.50"></text></g><g><title>arena_get2 (1 samples, 0.01%)</title><rect x="477" y="773" width="0" height="15" fill="rgb(212,202,45)"/><text x="480.00" y="783.50"></text></g><g><title>_int_new_arena (1 samples, 0.01%)</title><rect x="477" y="757" width="0" height="15" fill="rgb(221,137,9)"/><text x="480.00" y="767.50"></text></g><g><title>new_heap (1 samples, 0.01%)</title><rect x="477" y="741" width="0" height="15" fill="rgb(210,46,29)"/><text x="480.00" y="751.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.01%)</title><rect x="477" y="725" width="0" height="15" fill="rgb(224,194,6)"/><text x="480.00" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="477" y="709" width="0" height="15" fill="rgb(228,95,3)"/><text x="480.00" y="719.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="477" y="693" width="0" height="15" fill="rgb(251,52,43)"/><text x="480.00" y="703.50"></text></g><g><title>sys_mmap (1 samples, 0.01%)</title><rect x="477" y="677" width="0" height="15" fill="rgb(206,59,35)"/><text x="480.00" y="687.50"></text></g><g><title>sys_mmap_pgoff (1 samples, 0.01%)</title><rect x="477" y="661" width="0" height="15" fill="rgb(252,131,47)"/><text x="480.00" y="671.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="477" y="645" width="0" height="15" fill="rgb(206,93,16)"/><text x="480.00" y="655.50"></text></g><g><title>down_write_killable (1 samples, 0.01%)</title><rect x="477" y="629" width="0" height="15" fill="rgb(209,135,15)"/><text x="480.00" y="639.50"></text></g><g><title>bind_to_domain (1 samples, 0.01%)</title><rect x="477" y="789" width="0" height="15" fill="rgb(229,194,25)"/><text x="480.00" y="799.50"></text></g><g><title>numa_bitmask_clearall (1 samples, 0.01%)</title><rect x="477" y="773" width="0" height="15" fill="rgb(244,22,17)"/><text x="480.00" y="783.50"></text></g><g><title>acpi_os_read_memory (1 samples, 0.01%)</title><rect x="477" y="549" width="0" height="15" fill="rgb(220,81,38)"/><text x="480.00" y="559.50"></text></g><g><title>ghes_notify_nmi (1 samples, 0.01%)</title><rect x="477" y="549" width="1" height="15" fill="rgb(219,30,28)"/><text x="480.00" y="559.50"></text></g><g><title>native_apic_mem_write (1 samples, 0.01%)</title><rect x="478" y="549" width="0" height="15" fill="rgb(230,124,16)"/><text x="481.00" y="559.50"></text></g><g><title>e2d2::interface::dpdk::init_thread (8 samples, 0.09%)</title><rect x="477" y="821" width="1" height="15" fill="rgb(241,92,32)"/><text x="480.00" y="831.50"></text></g><g><title>init_thread (8 samples, 0.09%)</title><rect x="477" y="805" width="1" height="15" fill="rgb(235,93,47)"/><text x="480.00" y="815.50"></text></g><g><title>rte_thread_set_affinity (7 samples, 0.08%)</title><rect x="477" y="789" width="1" height="15" fill="rgb(247,62,41)"/><text x="480.00" y="799.50"></text></g><g><title>__pthread_setaffinity_new (7 samples, 0.08%)</title><rect x="477" y="773" width="1" height="15" fill="rgb(229,226,16)"/><text x="480.00" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="477" y="757" width="1" height="15" fill="rgb(242,219,23)"/><text x="480.00" y="767.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="477" y="741" width="1" height="15" fill="rgb(225,123,44)"/><text x="480.00" y="751.50"></text></g><g><title>sys_sched_setaffinity (7 samples, 0.08%)</title><rect x="477" y="725" width="1" height="15" fill="rgb(254,159,12)"/><text x="480.00" y="735.50"></text></g><g><title>sched_setaffinity (7 samples, 0.08%)</title><rect x="477" y="709" width="1" height="15" fill="rgb(206,155,33)"/><text x="480.00" y="719.50"></text></g><g><title>__set_cpus_allowed_ptr (7 samples, 0.08%)</title><rect x="477" y="693" width="1" height="15" fill="rgb(236,13,54)"/><text x="480.00" y="703.50"></text></g><g><title>stop_one_cpu (7 samples, 0.08%)</title><rect x="477" y="677" width="1" height="15" fill="rgb(240,177,4)"/><text x="480.00" y="687.50"></text></g><g><title>_cond_resched (7 samples, 0.08%)</title><rect x="477" y="661" width="1" height="15" fill="rgb(227,219,52)"/><text x="480.00" y="671.50"></text></g><g><title>__schedule (7 samples, 0.08%)</title><rect x="477" y="645" width="1" height="15" fill="rgb(246,22,38)"/><text x="480.00" y="655.50"></text></g><g><title>finish_task_switch (7 samples, 0.08%)</title><rect x="477" y="629" width="1" height="15" fill="rgb(221,122,8)"/><text x="480.00" y="639.50"></text></g><g><title>__perf_event_task_sched_in (7 samples, 0.08%)</title><rect x="477" y="613" width="1" height="15" fill="rgb(228,122,34)"/><text x="480.00" y="623.50"></text></g><g><title>x86_pmu_enable (7 samples, 0.08%)</title><rect x="477" y="597" width="1" height="15" fill="rgb(230,162,3)"/><text x="480.00" y="607.50"></text></g><g><title>intel_pmu_enable_all (7 samples, 0.08%)</title><rect x="477" y="581" width="1" height="15" fill="rgb(221,199,33)"/><text x="480.00" y="591.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (7 samples, 0.08%)</title><rect x="477" y="565" width="1" height="15" fill="rgb(210,88,5)"/><text x="480.00" y="575.50"></text></g><g><title>native_write_msr (4 samples, 0.05%)</title><rect x="478" y="549" width="0" height="15" fill="rgb(206,152,3)"/><text x="481.00" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (26 samples, 0.30%)</title><rect x="497" y="757" width="4" height="15" fill="rgb(233,220,51)"/><text x="500.00" y="767.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.07%)</title><rect x="500" y="741" width="1" height="15" fill="rgb(247,46,49)"/><text x="503.00" y="751.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.07%)</title><rect x="500" y="725" width="1" height="15" fill="rgb(250,176,13)"/><text x="503.00" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (19 samples, 0.22%)</title><rect x="505" y="677" width="3" height="15" fill="rgb(225,181,10)"/><text x="508.00" y="687.50"></text></g><g><title>_$LT$e2d2..operators..receive_batch..ReceiveBatch$LT$T$GT$$u20$as$u20$e2d2..operators..act..Act$GT$::act::_$u7b$$u7b$closure$u7d$$u7d$::h04d16e535da9b6c3 (19 samples, 0.22%)</title><rect x="505" y="661" width="3" height="15" fill="rgb(230,105,40)"/><text x="508.00" y="671.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (10 samples, 0.11%)</title><rect x="508" y="661" width="1" height="15" fill="rgb(242,153,5)"/><text x="511.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (225 samples, 2.55%)</title><rect x="501" y="757" width="30" height="15" fill="rgb(249,35,41)"/><text x="504.00" y="767.50">&lt;e..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (212 samples, 2.41%)</title><rect x="503" y="741" width="28" height="15" fill="rgb(224,11,16)"/><text x="506.00" y="751.50">&lt;..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (212 samples, 2.41%)</title><rect x="503" y="725" width="28" height="15" fill="rgb(210,219,42)"/><text x="506.00" y="735.50">&lt;..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (193 samples, 2.19%)</title><rect x="505" y="709" width="26" height="15" fill="rgb(250,33,43)"/><text x="508.00" y="719.50">&lt;..</text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (193 samples, 2.19%)</title><rect x="505" y="693" width="26" height="15" fill="rgb(239,197,45)"/><text x="508.00" y="703.50">&lt;..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (174 samples, 1.98%)</title><rect x="508" y="677" width="23" height="15" fill="rgb(247,99,45)"/><text x="511.00" y="687.50">e..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (164 samples, 1.86%)</title><rect x="509" y="661" width="22" height="15" fill="rgb(223,96,5)"/><text x="512.00" y="671.50">e..</text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (152 samples, 1.73%)</title><rect x="511" y="645" width="20" height="15" fill="rgb(249,221,33)"/><text x="514.00" y="655.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (152 samples, 1.73%)</title><rect x="511" y="629" width="20" height="15" fill="rgb(206,192,44)"/><text x="514.00" y="639.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (152 samples, 1.73%)</title><rect x="511" y="613" width="20" height="15" fill="rgb(229,199,53)"/><text x="514.00" y="623.50"></text></g><g><title>recv_pkts (152 samples, 1.73%)</title><rect x="511" y="597" width="20" height="15" fill="rgb(221,202,34)"/><text x="514.00" y="607.50"></text></g><g><title>rte_eth_rx_burst (135 samples, 1.53%)</title><rect x="513" y="581" width="18" height="15" fill="rgb(226,114,54)"/><text x="516.00" y="591.50"></text></g><g><title>i40e_recv_pkts_vec (48 samples, 0.54%)</title><rect x="524" y="565" width="7" height="15" fill="rgb(237,165,24)"/><text x="527.00" y="575.50"></text></g><g><title>_recv_raw_pkts_vec (40 samples, 0.45%)</title><rect x="526" y="549" width="5" height="15" fill="rgb(226,180,44)"/><text x="529.00" y="559.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (84 samples, 0.95%)</title><rect x="550" y="693" width="11" height="15" fill="rgb(254,52,10)"/><text x="553.00" y="703.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (71 samples, 0.81%)</title><rect x="551" y="677" width="10" height="15" fill="rgb(221,28,20)"/><text x="554.00" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (6 samples, 0.07%)</title><rect x="563" y="597" width="1" height="15" fill="rgb(235,112,1)"/><text x="566.00" y="607.50"></text></g><g><title>_$LT$e2d2..operators..receive_batch..ReceiveBatch$LT$T$GT$$u20$as$u20$e2d2..operators..act..Act$GT$::act::_$u7b$$u7b$closure$u7d$$u7d$::h8d1298e4bf1f28cf (6 samples, 0.07%)</title><rect x="563" y="581" width="1" height="15" fill="rgb(222,58,42)"/><text x="566.00" y="591.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (13 samples, 0.15%)</title><rect x="564" y="581" width="2" height="15" fill="rgb(252,190,20)"/><text x="567.00" y="591.50"></text></g><g><title>core::cmp::min (9 samples, 0.10%)</title><rect x="566" y="533" width="1" height="15" fill="rgb(231,222,31)"/><text x="569.00" y="543.50"></text></g><g><title>core::cmp::Ord::min (9 samples, 0.10%)</title><rect x="566" y="517" width="1" height="15" fill="rgb(233,208,42)"/><text x="569.00" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::le (7 samples, 0.08%)</title><rect x="567" y="501" width="0" height="15" fill="rgb(222,88,7)"/><text x="570.00" y="511.50"></text></g><g><title>&lt;e2d2::queues::mpsc_mbuf_queue::MpscConsumer as e2d2::interface::PacketRx&gt;::recv (14 samples, 0.16%)</title><rect x="566" y="565" width="2" height="15" fill="rgb(237,125,5)"/><text x="569.00" y="575.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue (14 samples, 0.16%)</title><rect x="566" y="549" width="2" height="15" fill="rgb(245,25,16)"/><text x="569.00" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.02%)</title><rect x="567" y="533" width="1" height="15" fill="rgb(244,55,12)"/><text x="570.00" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="567" y="517" width="1" height="15" fill="rgb(230,50,40)"/><text x="570.00" y="527.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::add_to_batch (13 samples, 0.15%)</title><rect x="568" y="565" width="1" height="15" fill="rgb(212,228,48)"/><text x="571.00" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (13 samples, 0.15%)</title><rect x="568" y="549" width="1" height="15" fill="rgb(234,219,53)"/><text x="571.00" y="559.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (60 samples, 0.68%)</title><rect x="563" y="629" width="8" height="15" fill="rgb(245,61,14)"/><text x="566.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (56 samples, 0.64%)</title><rect x="563" y="613" width="8" height="15" fill="rgb(224,48,30)"/><text x="566.00" y="623.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (50 samples, 0.57%)</title><rect x="564" y="597" width="7" height="15" fill="rgb(239,53,46)"/><text x="567.00" y="607.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (37 samples, 0.42%)</title><rect x="566" y="581" width="5" height="15" fill="rgb(215,170,18)"/><text x="569.00" y="591.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (8 samples, 0.09%)</title><rect x="569" y="565" width="2" height="15" fill="rgb(238,163,33)"/><text x="572.00" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (8 samples, 0.09%)</title><rect x="569" y="549" width="2" height="15" fill="rgb(250,27,23)"/><text x="572.00" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.08%)</title><rect x="570" y="533" width="1" height="15" fill="rgb(244,127,6)"/><text x="573.00" y="543.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (96 samples, 1.09%)</title><rect x="562" y="661" width="13" height="15" fill="rgb(218,117,34)"/><text x="565.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (96 samples, 1.09%)</title><rect x="562" y="645" width="13" height="15" fill="rgb(243,14,2)"/><text x="565.00" y="655.50"></text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (31 samples, 0.35%)</title><rect x="571" y="629" width="4" height="15" fill="rgb(235,77,43)"/><text x="574.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (31 samples, 0.35%)</title><rect x="571" y="613" width="4" height="15" fill="rgb(252,194,7)"/><text x="574.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (31 samples, 0.35%)</title><rect x="571" y="597" width="4" height="15" fill="rgb(238,154,42)"/><text x="574.00" y="607.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (31 samples, 0.35%)</title><rect x="571" y="581" width="4" height="15" fill="rgb(251,229,11)"/><text x="574.00" y="591.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (324 samples, 3.68%)</title><rect x="532" y="709" width="43" height="15" fill="rgb(222,59,7)"/><text x="535.00" y="719.50">&lt;e2d..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (107 samples, 1.21%)</title><rect x="561" y="693" width="14" height="15" fill="rgb(232,114,31)"/><text x="564.00" y="703.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (107 samples, 1.21%)</title><rect x="561" y="677" width="14" height="15" fill="rgb(253,221,45)"/><text x="564.00" y="687.50"></text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (4 samples, 0.05%)</title><rect x="575" y="661" width="0" height="15" fill="rgb(236,3,15)"/><text x="578.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (4 samples, 0.05%)</title><rect x="575" y="645" width="0" height="15" fill="rgb(211,66,54)"/><text x="578.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (4 samples, 0.05%)</title><rect x="575" y="629" width="0" height="15" fill="rgb(239,84,35)"/><text x="578.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (4 samples, 0.05%)</title><rect x="575" y="613" width="0" height="15" fill="rgb(239,151,28)"/><text x="578.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (4 samples, 0.05%)</title><rect x="575" y="597" width="0" height="15" fill="rgb(218,228,23)"/><text x="578.00" y="607.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (4 samples, 0.05%)</title><rect x="575" y="581" width="0" height="15" fill="rgb(241,164,7)"/><text x="578.00" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.06%)</title><rect x="576" y="677" width="1" height="15" fill="rgb(241,129,12)"/><text x="579.00" y="687.50"></text></g><g><title>_$LT$e2d2..operators..receive_batch..ReceiveBatch$LT$T$GT$$u20$as$u20$e2d2..operators..act..Act$GT$::act::_$u7b$$u7b$closure$u7d$$u7d$::h8d1298e4bf1f28cf (5 samples, 0.06%)</title><rect x="576" y="661" width="1" height="15" fill="rgb(211,47,0)"/><text x="579.00" y="671.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (38 samples, 0.43%)</title><rect x="577" y="661" width="5" height="15" fill="rgb(246,140,40)"/><text x="580.00" y="671.50"></text></g><g><title>core::cmp::min (8 samples, 0.09%)</title><rect x="582" y="613" width="1" height="15" fill="rgb(239,210,30)"/><text x="585.00" y="623.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.09%)</title><rect x="582" y="597" width="1" height="15" fill="rgb(231,161,17)"/><text x="585.00" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::le (4 samples, 0.05%)</title><rect x="583" y="581" width="0" height="15" fill="rgb(246,194,38)"/><text x="586.00" y="591.50"></text></g><g><title>&lt;e2d2::queues::mpsc_mbuf_queue::MpscConsumer as e2d2::interface::PacketRx&gt;::recv (12 samples, 0.14%)</title><rect x="582" y="645" width="2" height="15" fill="rgb(250,214,19)"/><text x="585.00" y="655.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue (12 samples, 0.14%)</title><rect x="582" y="629" width="2" height="15" fill="rgb(249,189,50)"/><text x="585.00" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.03%)</title><rect x="583" y="613" width="1" height="15" fill="rgb(223,87,10)"/><text x="586.00" y="623.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::add_to_batch (9 samples, 0.10%)</title><rect x="584" y="645" width="1" height="15" fill="rgb(254,7,41)"/><text x="587.00" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (9 samples, 0.10%)</title><rect x="584" y="629" width="1" height="15" fill="rgb(227,102,48)"/><text x="587.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (408 samples, 4.63%)</title><rect x="532" y="725" width="55" height="15" fill="rgb(238,89,35)"/><text x="535.00" y="735.50">&lt;e2d2..</text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (84 samples, 0.95%)</title><rect x="575" y="709" width="12" height="15" fill="rgb(205,2,40)"/><text x="578.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (76 samples, 0.86%)</title><rect x="576" y="693" width="11" height="15" fill="rgb(220,214,53)"/><text x="579.00" y="703.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (71 samples, 0.81%)</title><rect x="577" y="677" width="10" height="15" fill="rgb(222,21,28)"/><text x="580.00" y="687.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (33 samples, 0.37%)</title><rect x="582" y="661" width="5" height="15" fill="rgb(217,130,30)"/><text x="585.00" y="671.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::packet_ptr (12 samples, 0.14%)</title><rect x="585" y="645" width="2" height="15" fill="rgb(235,33,2)"/><text x="588.00" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12 samples, 0.14%)</title><rect x="585" y="629" width="2" height="15" fill="rgb(253,50,47)"/><text x="588.00" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.07%)</title><rect x="586" y="613" width="1" height="15" fill="rgb(232,199,24)"/><text x="589.00" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (14 samples, 0.16%)</title><rect x="593" y="677" width="2" height="15" fill="rgb(247,187,40)"/><text x="596.00" y="687.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (14 samples, 0.16%)</title><rect x="593" y="661" width="2" height="15" fill="rgb(223,167,37)"/><text x="596.00" y="671.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (14 samples, 0.16%)</title><rect x="593" y="645" width="2" height="15" fill="rgb(253,103,19)"/><text x="596.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (94 samples, 1.07%)</title><rect x="587" y="725" width="12" height="15" fill="rgb(214,164,32)"/><text x="590.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (75 samples, 0.85%)</title><rect x="589" y="709" width="10" height="15" fill="rgb(254,211,43)"/><text x="592.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (75 samples, 0.85%)</title><rect x="589" y="693" width="10" height="15" fill="rgb(245,50,24)"/><text x="592.00" y="703.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (32 samples, 0.36%)</title><rect x="595" y="677" width="4" height="15" fill="rgb(250,193,39)"/><text x="598.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (14 samples, 0.16%)</title><rect x="597" y="661" width="2" height="15" fill="rgb(216,91,38)"/><text x="600.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (14 samples, 0.16%)</title><rect x="597" y="645" width="2" height="15" fill="rgb(218,54,28)"/><text x="600.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (14 samples, 0.16%)</title><rect x="597" y="629" width="2" height="15" fill="rgb(254,20,13)"/><text x="600.00" y="639.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (13 samples, 0.15%)</title><rect x="597" y="613" width="2" height="15" fill="rgb(214,208,50)"/><text x="600.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::done (13 samples, 0.15%)</title><rect x="597" y="597" width="2" height="15" fill="rgb(210,130,26)"/><text x="600.00" y="607.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::done (2 samples, 0.02%)</title><rect x="599" y="581" width="0" height="15" fill="rgb(228,23,29)"/><text x="602.00" y="591.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (2 samples, 0.02%)</title><rect x="599" y="565" width="0" height="15" fill="rgb(221,148,29)"/><text x="602.00" y="575.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (2 samples, 0.02%)</title><rect x="599" y="549" width="0" height="15" fill="rgb(238,211,29)"/><text x="602.00" y="559.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::free_packet_batch (2 samples, 0.02%)</title><rect x="599" y="533" width="0" height="15" fill="rgb(233,29,23)"/><text x="602.00" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.01%)</title><rect x="604" y="661" width="0" height="15" fill="rgb(254,73,27)"/><text x="607.00" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="604" y="645" width="0" height="15" fill="rgb(234,62,2)"/><text x="607.00" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="604" y="629" width="0" height="15" fill="rgb(219,221,39)"/><text x="607.00" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (20 samples, 0.23%)</title><rect x="604" y="677" width="2" height="15" fill="rgb(245,5,44)"/><text x="607.00" y="687.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (19 samples, 0.22%)</title><rect x="604" y="661" width="2" height="15" fill="rgb(212,20,30)"/><text x="607.00" y="671.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (19 samples, 0.22%)</title><rect x="604" y="645" width="2" height="15" fill="rgb(224,95,14)"/><text x="607.00" y="655.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (186 samples, 2.11%)</title><rect x="599" y="725" width="25" height="15" fill="rgb(232,138,11)"/><text x="602.00" y="735.50">&lt;..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (165 samples, 1.87%)</title><rect x="602" y="709" width="22" height="15" fill="rgb(231,188,39)"/><text x="605.00" y="719.50">&lt;..</text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (165 samples, 1.87%)</title><rect x="602" y="693" width="22" height="15" fill="rgb(214,208,2)"/><text x="605.00" y="703.50">&lt;..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (132 samples, 1.50%)</title><rect x="606" y="677" width="18" height="15" fill="rgb(226,189,45)"/><text x="609.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (741 samples, 8.41%)</title><rect x="531" y="757" width="99" height="15" fill="rgb(224,214,40)"/><text x="534.00" y="767.50">&lt;e2d2::oper..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (734 samples, 8.33%)</title><rect x="532" y="741" width="98" height="15" fill="rgb(208,122,1)"/><text x="535.00" y="751.50">&lt;e2d2::oper..</text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::send_q (46 samples, 0.52%)</title><rect x="624" y="725" width="6" height="15" fill="rgb(225,155,21)"/><text x="627.00" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (16 samples, 0.18%)</title><rect x="628" y="709" width="2" height="15" fill="rgb(237,225,36)"/><text x="631.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (14 samples, 0.16%)</title><rect x="630" y="725" width="2" height="15" fill="rgb(210,13,20)"/><text x="633.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (2 samples, 0.02%)</title><rect x="632" y="725" width="0" height="15" fill="rgb(210,116,26)"/><text x="635.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (13 samples, 0.15%)</title><rect x="632" y="725" width="2" height="15" fill="rgb(242,82,22)"/><text x="635.00" y="735.50"></text></g><g><title>__GI___pthread_mutex_unlock (35 samples, 0.40%)</title><rect x="630" y="757" width="5" height="15" fill="rgb(213,82,19)"/><text x="633.00" y="767.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (35 samples, 0.40%)</title><rect x="630" y="741" width="5" height="15" fill="rgb(243,62,46)"/><text x="633.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (6 samples, 0.07%)</title><rect x="634" y="725" width="1" height="15" fill="rgb(236,101,13)"/><text x="637.00" y="735.50"></text></g><g><title>e2d2::utils::asm::rdtsc_unsafe (252 samples, 2.86%)</title><rect x="635" y="757" width="34" height="15" fill="rgb(246,228,13)"/><text x="638.00" y="767.50">e2..</text></g><g><title>apic_timer_interrupt (1 samples, 0.01%)</title><rect x="668" y="741" width="1" height="15" fill="rgb(224,46,46)"/><text x="671.00" y="751.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="668" y="725" width="1" height="15" fill="rgb(222,29,4)"/><text x="671.00" y="735.50"></text></g><g><title>idle_cpu (1 samples, 0.01%)</title><rect x="668" y="709" width="1" height="15" fill="rgb(216,224,5)"/><text x="671.00" y="719.50"></text></g><g><title>core::ptr::real_drop_in_place (348 samples, 3.95%)</title><rect x="676" y="725" width="46" height="15" fill="rgb(227,34,5)"/><text x="679.00" y="735.50">core..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (348 samples, 3.95%)</title><rect x="676" y="709" width="46" height="15" fill="rgb(225,61,30)"/><text x="679.00" y="719.50">&lt;std..</text></g><g><title>std::sys_common::mutex::Mutex::raw_unlock (348 samples, 3.95%)</title><rect x="676" y="693" width="46" height="15" fill="rgb(243,176,8)"/><text x="679.00" y="703.50">std:..</text></g><g><title>std::sys::unix::mutex::Mutex::unlock (348 samples, 3.95%)</title><rect x="676" y="677" width="46" height="15" fill="rgb(232,180,46)"/><text x="679.00" y="687.50">std:..</text></g><g><title>__GI___pthread_mutex_unlock (348 samples, 3.95%)</title><rect x="676" y="661" width="46" height="15" fill="rgb(224,46,10)"/><text x="679.00" y="671.50">__GI..</text></g><g><title>__pthread_mutex_unlock_usercnt (318 samples, 3.61%)</title><rect x="680" y="645" width="42" height="15" fill="rgb(252,91,14)"/><text x="683.00" y="655.50">__p..</text></g><g><title>std::sys_common::poison::Flag::get (15 samples, 0.17%)</title><rect x="722" y="677" width="2" height="15" fill="rgb(220,26,53)"/><text x="725.00" y="687.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (15 samples, 0.17%)</title><rect x="722" y="661" width="2" height="15" fill="rgb(217,24,20)"/><text x="725.00" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.17%)</title><rect x="722" y="645" width="2" height="15" fill="rgb(219,156,5)"/><text x="725.00" y="655.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (26 samples, 0.30%)</title><rect x="722" y="709" width="4" height="15" fill="rgb(228,142,30)"/><text x="725.00" y="719.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (26 samples, 0.30%)</title><rect x="722" y="693" width="4" height="15" fill="rgb(241,8,18)"/><text x="725.00" y="703.50"></text></g><g><title>std::thread::panicking (11 samples, 0.12%)</title><rect x="724" y="677" width="2" height="15" fill="rgb(226,222,0)"/><text x="727.00" y="687.50"></text></g><g><title>std::panicking::panicking (11 samples, 0.12%)</title><rect x="724" y="661" width="2" height="15" fill="rgb(223,183,45)"/><text x="727.00" y="671.50"></text></g><g><title>std::panicking::update_panic_count (11 samples, 0.12%)</title><rect x="724" y="645" width="2" height="15" fill="rgb(254,194,24)"/><text x="727.00" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11 samples, 0.12%)</title><rect x="724" y="629" width="2" height="15" fill="rgb(234,56,36)"/><text x="727.00" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.12%)</title><rect x="724" y="613" width="2" height="15" fill="rgb(213,20,6)"/><text x="727.00" y="623.50"></text></g><g><title>std::panicking::update_panic_count::_$u7b$$u7b$closure$u7d$$u7d$::hdd6811239ad811d8 (11 samples, 0.12%)</title><rect x="724" y="597" width="2" height="15" fill="rgb(214,125,7)"/><text x="727.00" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (11 samples, 0.12%)</title><rect x="724" y="581" width="2" height="15" fill="rgb(235,94,33)"/><text x="727.00" y="591.50"></text></g><g><title>sched-2 (3,057 samples, 34.71%)</title><rect x="369" y="981" width="409" height="15" fill="rgb(231,147,3)"/><text x="372.00" y="991.50">sched-2</text></g><g><title>__GI___clone (2,248 samples, 25.52%)</title><rect x="477" y="965" width="301" height="15" fill="rgb(246,35,16)"/><text x="480.00" y="975.50">__GI___clone</text></g><g><title>start_thread (2,248 samples, 25.52%)</title><rect x="477" y="949" width="301" height="15" fill="rgb(213,152,14)"/><text x="480.00" y="959.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2,248 samples, 25.52%)</title><rect x="477" y="933" width="301" height="15" fill="rgb(213,162,46)"/><text x="480.00" y="943.50">std::sys::unix::thread::Thread::new::thr..</text></g><g><title>std::sys_common::thread::start_thread (2,248 samples, 25.52%)</title><rect x="477" y="917" width="301" height="15" fill="rgb(238,121,2)"/><text x="480.00" y="927.50">std::sys_common::thread::start_thread</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2,248 samples, 25.52%)</title><rect x="477" y="901" width="301" height="15" fill="rgb(234,27,2)"/><text x="480.00" y="911.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::func..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2,248 samples, 25.52%)</title><rect x="477" y="885" width="301" height="15" fill="rgb(248,33,38)"/><text x="480.00" y="895.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::func..</text></g><g><title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f59d60f147d050 (2,248 samples, 25.52%)</title><rect x="477" y="869" width="301" height="15" fill="rgb(209,219,13)"/><text x="480.00" y="879.50">core::ops::function::FnOnce::call_once$u..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,247 samples, 25.51%)</title><rect x="477" y="853" width="301" height="15" fill="rgb(244,161,22)"/><text x="480.00" y="863.50">std::sys_common::backtrace::__rust_begin..</text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$closure$u7d$$u7d$::h008d40440c8a9600 (2,247 samples, 25.51%)</title><rect x="477" y="837" width="301" height="15" fill="rgb(228,112,18)"/><text x="480.00" y="847.50">e2d2::scheduler::context::NetBricksConte..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (2,239 samples, 25.42%)</title><rect x="478" y="821" width="300" height="15" fill="rgb(228,85,48)"/><text x="481.00" y="831.50">e2d2::scheduler::standalone_scheduler::S..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (2,239 samples, 25.42%)</title><rect x="478" y="805" width="300" height="15" fill="rgb(222,86,28)"/><text x="481.00" y="815.50">e2d2::scheduler::standalone_scheduler::S..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (2,239 samples, 25.42%)</title><rect x="478" y="789" width="300" height="15" fill="rgb(239,72,36)"/><text x="481.00" y="799.50">e2d2::scheduler::standalone_scheduler::S..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (2,210 samples, 25.09%)</title><rect x="482" y="773" width="296" height="15" fill="rgb(235,43,8)"/><text x="485.00" y="783.50">e2d2::scheduler::standalone_scheduler::..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (818 samples, 9.29%)</title><rect x="669" y="757" width="109" height="15" fill="rgb(207,19,19)"/><text x="672.00" y="767.50">std::sync::mp..</text></g><g><title>std::sync::mpsc::sync::Packet&lt;T&gt;::try_recv (780 samples, 8.86%)</title><rect x="674" y="741" width="104" height="15" fill="rgb(254,181,35)"/><text x="677.00" y="751.50">std::sync::m..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (418 samples, 4.75%)</title><rect x="722" y="725" width="56" height="15" fill="rgb(208,56,9)"/><text x="725.00" y="735.50">std::..</text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (392 samples, 4.45%)</title><rect x="726" y="709" width="52" height="15" fill="rgb(219,53,42)"/><text x="729.00" y="719.50">std::..</text></g><g><title>std::sys::unix::mutex::Mutex::lock (392 samples, 4.45%)</title><rect x="726" y="693" width="52" height="15" fill="rgb(205,90,51)"/><text x="729.00" y="703.50">std::..</text></g><g><title>__GI___pthread_mutex_lock (392 samples, 4.45%)</title><rect x="726" y="677" width="52" height="15" fill="rgb(237,180,20)"/><text x="729.00" y="687.50">__GI_..</text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="779" y="949" width="0" height="15" fill="rgb(218,152,12)"/><text x="782.00" y="959.50"></text></g><g><title>&lt;rustls::msgs::enums::CipherSuite as rustls::msgs::codec::Codec&gt;::read (1 samples, 0.01%)</title><rect x="779" y="949" width="0" height="15" fill="rgb(238,83,6)"/><text x="782.00" y="959.50"></text></g><g><title>&lt;rustls::msgs::enums::SignatureScheme as rustls::msgs::codec::Codec&gt;::read (1 samples, 0.01%)</title><rect x="779" y="949" width="0" height="15" fill="rgb(212,28,34)"/><text x="782.00" y="959.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="779" y="949" width="0" height="15" fill="rgb(250,150,18)"/><text x="782.00" y="959.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="779" y="949" width="0" height="15" fill="rgb(233,15,19)"/><text x="782.00" y="959.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="779" y="949" width="1" height="15" fill="rgb(221,185,22)"/><text x="782.00" y="959.50"></text></g><g><title>__libc_write (1 samples, 0.01%)</title><rect x="780" y="949" width="0" height="15" fill="rgb(234,156,54)"/><text x="783.00" y="959.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::SegmentList::merge_at_idx (1 samples, 0.01%)</title><rect x="780" y="949" width="0" height="15" fill="rgb(222,141,49)"/><text x="783.00" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="780" y="933" width="0" height="15" fill="rgb(253,113,3)"/><text x="783.00" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="780" y="917" width="0" height="15" fill="rgb(253,139,26)"/><text x="783.00" y="927.50"></text></g><g><title>pvn_tls::utils::on_frame (1 samples, 0.01%)</title><rect x="780" y="949" width="0" height="15" fill="rgb(252,29,24)"/><text x="783.00" y="959.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.01%)</title><rect x="780" y="949" width="0" height="15" fill="rgb(238,180,52)"/><text x="783.00" y="959.50"></text></g><g><title>[unknown] (15 samples, 0.17%)</title><rect x="778" y="965" width="2" height="15" fill="rgb(252,82,13)"/><text x="781.00" y="975.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.01%)</title><rect x="780" y="949" width="0" height="15" fill="rgb(250,18,2)"/><text x="783.00" y="959.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.01%)</title><rect x="780" y="933" width="0" height="15" fill="rgb(229,38,48)"/><text x="783.00" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="780" y="917" width="0" height="15" fill="rgb(237,12,34)"/><text x="783.00" y="927.50"></text></g><g><title>std::io::stdio::print_to::_$u7b$$u7b$closure$u7d$$u7d$::h0249537fb9ef42b4 (1 samples, 0.01%)</title><rect x="780" y="901" width="0" height="15" fill="rgb(238,101,26)"/><text x="783.00" y="911.50"></text></g><g><title>bind_to_domain (1 samples, 0.01%)</title><rect x="780" y="789" width="0" height="15" fill="rgb(237,81,19)"/><text x="783.00" y="799.50"></text></g><g><title>numa_bind (1 samples, 0.01%)</title><rect x="780" y="773" width="0" height="15" fill="rgb(232,123,43)"/><text x="783.00" y="783.50"></text></g><g><title>numa_run_on_node_mask (1 samples, 0.01%)</title><rect x="780" y="757" width="0" height="15" fill="rgb(230,45,49)"/><text x="783.00" y="767.50"></text></g><g><title>numa_sched_setaffinity (1 samples, 0.01%)</title><rect x="780" y="741" width="0" height="15" fill="rgb(242,194,0)"/><text x="783.00" y="751.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="780" y="725" width="0" height="15" fill="rgb(235,111,1)"/><text x="783.00" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="780" y="709" width="0" height="15" fill="rgb(253,132,53)"/><text x="783.00" y="719.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="780" y="693" width="0" height="15" fill="rgb(243,15,9)"/><text x="783.00" y="703.50"></text></g><g><title>sys_sched_setaffinity (1 samples, 0.01%)</title><rect x="780" y="677" width="0" height="15" fill="rgb(236,218,40)"/><text x="783.00" y="687.50"></text></g><g><title>sched_setaffinity (1 samples, 0.01%)</title><rect x="780" y="661" width="0" height="15" fill="rgb(249,161,5)"/><text x="783.00" y="671.50"></text></g><g><title>__set_cpus_allowed_ptr (1 samples, 0.01%)</title><rect x="780" y="645" width="0" height="15" fill="rgb(249,24,36)"/><text x="783.00" y="655.50"></text></g><g><title>do_set_cpus_allowed (1 samples, 0.01%)</title><rect x="780" y="629" width="0" height="15" fill="rgb(244,15,3)"/><text x="783.00" y="639.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.01%)</title><rect x="780" y="613" width="0" height="15" fill="rgb(223,136,3)"/><text x="783.00" y="623.50"></text></g><g><title>enqueue_entity (1 samples, 0.01%)</title><rect x="780" y="597" width="0" height="15" fill="rgb(231,227,39)"/><text x="783.00" y="607.50"></text></g><g><title>acpi_os_read_memory (1 samples, 0.01%)</title><rect x="780" y="549" width="0" height="15" fill="rgb(248,6,11)"/><text x="783.00" y="559.50"></text></g><g><title>native_apic_mem_write (1 samples, 0.01%)</title><rect x="780" y="549" width="1" height="15" fill="rgb(217,42,39)"/><text x="783.00" y="559.50"></text></g><g><title>do_syscall_64 (6 samples, 0.07%)</title><rect x="780" y="741" width="1" height="15" fill="rgb(216,122,3)"/><text x="783.00" y="751.50"></text></g><g><title>sys_sched_setaffinity (6 samples, 0.07%)</title><rect x="780" y="725" width="1" height="15" fill="rgb(241,26,17)"/><text x="783.00" y="735.50"></text></g><g><title>sched_setaffinity (6 samples, 0.07%)</title><rect x="780" y="709" width="1" height="15" fill="rgb(224,203,49)"/><text x="783.00" y="719.50"></text></g><g><title>__set_cpus_allowed_ptr (6 samples, 0.07%)</title><rect x="780" y="693" width="1" height="15" fill="rgb(249,97,23)"/><text x="783.00" y="703.50"></text></g><g><title>stop_one_cpu (6 samples, 0.07%)</title><rect x="780" y="677" width="1" height="15" fill="rgb(223,125,27)"/><text x="783.00" y="687.50"></text></g><g><title>_cond_resched (6 samples, 0.07%)</title><rect x="780" y="661" width="1" height="15" fill="rgb(228,151,38)"/><text x="783.00" y="671.50"></text></g><g><title>__schedule (6 samples, 0.07%)</title><rect x="780" y="645" width="1" height="15" fill="rgb(229,201,38)"/><text x="783.00" y="655.50"></text></g><g><title>finish_task_switch (6 samples, 0.07%)</title><rect x="780" y="629" width="1" height="15" fill="rgb(239,78,2)"/><text x="783.00" y="639.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.07%)</title><rect x="780" y="613" width="1" height="15" fill="rgb(220,11,14)"/><text x="783.00" y="623.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.07%)</title><rect x="780" y="597" width="1" height="15" fill="rgb(214,174,1)"/><text x="783.00" y="607.50"></text></g><g><title>intel_pmu_enable_all (6 samples, 0.07%)</title><rect x="780" y="581" width="1" height="15" fill="rgb(212,143,15)"/><text x="783.00" y="591.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (6 samples, 0.07%)</title><rect x="780" y="565" width="1" height="15" fill="rgb(216,145,30)"/><text x="783.00" y="575.50"></text></g><g><title>native_write_msr (4 samples, 0.05%)</title><rect x="781" y="549" width="0" height="15" fill="rgb(246,95,10)"/><text x="784.00" y="559.50"></text></g><g><title>e2d2::interface::dpdk::init_thread (8 samples, 0.09%)</title><rect x="780" y="821" width="1" height="15" fill="rgb(217,65,12)"/><text x="783.00" y="831.50"></text></g><g><title>init_thread (8 samples, 0.09%)</title><rect x="780" y="805" width="1" height="15" fill="rgb(230,10,5)"/><text x="783.00" y="815.50"></text></g><g><title>rte_thread_set_affinity (7 samples, 0.08%)</title><rect x="780" y="789" width="1" height="15" fill="rgb(208,228,6)"/><text x="783.00" y="799.50"></text></g><g><title>__pthread_setaffinity_new (7 samples, 0.08%)</title><rect x="780" y="773" width="1" height="15" fill="rgb(218,18,18)"/><text x="783.00" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="780" y="757" width="1" height="15" fill="rgb(230,145,35)"/><text x="783.00" y="767.50"></text></g><g><title>sys_sched_setaffinity (1 samples, 0.01%)</title><rect x="781" y="741" width="0" height="15" fill="rgb(212,72,8)"/><text x="784.00" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (6 samples, 0.07%)</title><rect x="781" y="709" width="1" height="15" fill="rgb(254,228,39)"/><text x="784.00" y="719.50"></text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h556eb85796d41702 (6 samples, 0.07%)</title><rect x="781" y="693" width="1" height="15" fill="rgb(244,101,1)"/><text x="784.00" y="703.50"></text></g><g><title>e2d2::headers::mac::MacHeader::swap_addresses (6 samples, 0.07%)</title><rect x="781" y="677" width="1" height="15" fill="rgb(208,168,51)"/><text x="784.00" y="687.50"></text></g><g><title>e2d2::headers::mac::MacAddress::copy_address (6 samples, 0.07%)</title><rect x="781" y="661" width="1" height="15" fill="rgb(247,35,10)"/><text x="784.00" y="671.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.07%)</title><rect x="781" y="645" width="1" height="15" fill="rgb(228,217,34)"/><text x="784.00" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.07%)</title><rect x="781" y="629" width="1" height="15" fill="rgb(217,54,29)"/><text x="784.00" y="639.50"></text></g><g><title>_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="782" y="533" width="0" height="15" fill="rgb(219,169,47)"/><text x="785.00" y="543.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (8 samples, 0.09%)</title><rect x="781" y="741" width="2" height="15" fill="rgb(218,140,51)"/><text x="784.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (8 samples, 0.09%)</title><rect x="781" y="725" width="2" height="15" fill="rgb(207,70,30)"/><text x="784.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2 samples, 0.02%)</title><rect x="782" y="709" width="1" height="15" fill="rgb(239,155,28)"/><text x="785.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (2 samples, 0.02%)</title><rect x="782" y="693" width="1" height="15" fill="rgb(234,3,28)"/><text x="785.00" y="703.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (2 samples, 0.02%)</title><rect x="782" y="677" width="1" height="15" fill="rgb(213,34,54)"/><text x="785.00" y="687.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (2 samples, 0.02%)</title><rect x="782" y="661" width="1" height="15" fill="rgb(210,0,22)"/><text x="785.00" y="671.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (2 samples, 0.02%)</title><rect x="782" y="645" width="1" height="15" fill="rgb(232,81,15)"/><text x="785.00" y="655.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (2 samples, 0.02%)</title><rect x="782" y="629" width="1" height="15" fill="rgb(234,79,50)"/><text x="785.00" y="639.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (2 samples, 0.02%)</title><rect x="782" y="613" width="1" height="15" fill="rgb(251,194,23)"/><text x="785.00" y="623.50"></text></g><g><title>recv_pkts (2 samples, 0.02%)</title><rect x="782" y="597" width="1" height="15" fill="rgb(221,104,27)"/><text x="785.00" y="607.50"></text></g><g><title>rte_eth_rx_burst (2 samples, 0.02%)</title><rect x="782" y="581" width="1" height="15" fill="rgb(249,105,31)"/><text x="785.00" y="591.50"></text></g><g><title>i40e_recv_pkts_vec (2 samples, 0.02%)</title><rect x="782" y="565" width="1" height="15" fill="rgb(253,143,30)"/><text x="785.00" y="575.50"></text></g><g><title>_recv_raw_pkts_vec (2 samples, 0.02%)</title><rect x="782" y="549" width="1" height="15" fill="rgb(208,207,18)"/><text x="785.00" y="559.50"></text></g><g><title>desc_to_ptype_v (1 samples, 0.01%)</title><rect x="782" y="533" width="1" height="15" fill="rgb(248,17,41)"/><text x="785.00" y="543.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::save_header_and_offset (1 samples, 0.01%)</title><rect x="783" y="741" width="0" height="15" fill="rgb(245,47,8)"/><text x="786.00" y="751.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::header_u8 (1 samples, 0.01%)</title><rect x="783" y="725" width="0" height="15" fill="rgb(218,130,34)"/><text x="786.00" y="735.50"></text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (1 samples, 0.01%)</title><rect x="783" y="741" width="0" height="15" fill="rgb(215,120,6)"/><text x="786.00" y="751.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1 samples, 0.01%)</title><rect x="783" y="725" width="0" height="15" fill="rgb(251,101,11)"/><text x="786.00" y="735.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1 samples, 0.01%)</title><rect x="783" y="709" width="0" height="15" fill="rgb(243,222,5)"/><text x="786.00" y="719.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1 samples, 0.01%)</title><rect x="783" y="693" width="0" height="15" fill="rgb(214,127,28)"/><text x="786.00" y="703.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1 samples, 0.01%)</title><rect x="783" y="677" width="0" height="15" fill="rgb(237,78,9)"/><text x="786.00" y="687.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1 samples, 0.01%)</title><rect x="783" y="661" width="0" height="15" fill="rgb(242,61,20)"/><text x="786.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (12 samples, 0.14%)</title><rect x="781" y="757" width="2" height="15" fill="rgb(233,31,14)"/><text x="784.00" y="767.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscProducer::enqueue_one (1 samples, 0.01%)</title><rect x="783" y="741" width="0" height="15" fill="rgb(244,7,4)"/><text x="786.00" y="751.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::enqueue_mbufs (1 samples, 0.01%)</title><rect x="783" y="725" width="0" height="15" fill="rgb(217,129,14)"/><text x="786.00" y="735.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::get_payload (1 samples, 0.01%)</title><rect x="783" y="629" width="0" height="15" fill="rgb(220,148,6)"/><text x="786.00" y="639.50"></text></g><g><title>e2d2::interface::packet::Packet&lt;T,M&gt;::payload_size (1 samples, 0.01%)</title><rect x="783" y="613" width="0" height="15" fill="rgb(246,144,4)"/><text x="786.00" y="623.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::fast_path_insert (1 samples, 0.01%)</title><rect x="783" y="613" width="0" height="15" fill="rgb(225,100,47)"/><text x="786.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::write_at_tail (1 samples, 0.01%)</title><rect x="783" y="597" width="0" height="15" fill="rgb(217,58,11)"/><text x="786.00" y="607.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_write (1 samples, 0.01%)</title><rect x="783" y="581" width="0" height="15" fill="rgb(222,2,26)"/><text x="786.00" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut [u8]&gt;::write (1 samples, 0.01%)</title><rect x="783" y="565" width="0" height="15" fill="rgb(229,11,31)"/><text x="786.00" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.01%)</title><rect x="783" y="549" width="0" height="15" fill="rgb(223,211,27)"/><text x="786.00" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="783" y="533" width="0" height="15" fill="rgb(226,47,6)"/><text x="786.00" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="783" y="517" width="0" height="15" fill="rgb(231,4,53)"/><text x="786.00" y="527.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::out_of_order_insert (2,754 samples, 31.27%)</title><rect x="783" y="613" width="369" height="15" fill="rgb(228,226,26)"/><text x="786.00" y="623.50">e2d2::state::reordered_buffer::reordered_buffer::R..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::SegmentList::insert_segment (2,754 samples, 31.27%)</title><rect x="783" y="597" width="369" height="15" fill="rgb(219,47,30)"/><text x="786.00" y="607.50">e2d2::state::reordered_buffer::reordered_buffer::S..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::SegmentList::merge_at_idx (2,754 samples, 31.27%)</title><rect x="783" y="581" width="369" height="15" fill="rgb(226,203,18)"/><text x="786.00" y="591.50">e2d2::state::reordered_buffer::reordered_buffer::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (892 samples, 10.13%)</title><rect x="1033" y="565" width="119" height="15" fill="rgb(246,19,23)"/><text x="1036.00" y="575.50">&lt;alloc::vec::V..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (892 samples, 10.13%)</title><rect x="1033" y="549" width="119" height="15" fill="rgb(239,34,2)"/><text x="1036.00" y="559.50">core::slice::&lt;..</text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (892 samples, 10.13%)</title><rect x="1033" y="533" width="119" height="15" fill="rgb(221,154,2)"/><text x="1036.00" y="543.50">&lt;usize as core..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::add_data (2,756 samples, 31.29%)</title><rect x="783" y="629" width="369" height="15" fill="rgb(212,197,17)"/><text x="786.00" y="639.50">e2d2::state::reordered_buffer::reordered_buffer::R..</text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::slow_path_insert (1 samples, 0.01%)</title><rect x="1152" y="613" width="0" height="15" fill="rgb(242,14,25)"/><text x="1155.00" y="623.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::out_of_order_insert (1 samples, 0.01%)</title><rect x="1152" y="597" width="0" height="15" fill="rgb(205,206,35)"/><text x="1155.00" y="607.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::write_at_offset_from_tail (1 samples, 0.01%)</title><rect x="1152" y="581" width="0" height="15" fill="rgb(230,169,7)"/><text x="1155.00" y="591.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_write (1 samples, 0.01%)</title><rect x="1152" y="565" width="0" height="15" fill="rgb(232,47,17)"/><text x="1155.00" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut [u8]&gt;::write (1 samples, 0.01%)</title><rect x="1152" y="549" width="0" height="15" fill="rgb(224,76,25)"/><text x="1155.00" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.01%)</title><rect x="1152" y="533" width="0" height="15" fill="rgb(209,213,3)"/><text x="1155.00" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="1152" y="517" width="0" height="15" fill="rgb(216,7,1)"/><text x="1155.00" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="1152" y="501" width="0" height="15" fill="rgb(209,46,27)"/><text x="1155.00" y="511.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.01%)</title><rect x="1152" y="261" width="1" height="15" fill="rgb(237,211,50)"/><text x="1155.00" y="271.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.01%)</title><rect x="1152" y="245" width="1" height="15" fill="rgb(223,42,10)"/><text x="1155.00" y="255.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::SegmentList::new (2 samples, 0.02%)</title><rect x="1152" y="597" width="1" height="15" fill="rgb(236,1,32)"/><text x="1155.00" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="1152" y="581" width="1" height="15" fill="rgb(216,138,50)"/><text x="1155.00" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="1152" y="565" width="1" height="15" fill="rgb(252,86,44)"/><text x="1155.00" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="1152" y="549" width="1" height="15" fill="rgb(252,144,35)"/><text x="1155.00" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="1152" y="533" width="1" height="15" fill="rgb(241,62,45)"/><text x="1155.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.02%)</title><rect x="1152" y="517" width="1" height="15" fill="rgb(216,19,27)"/><text x="1155.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="1152" y="501" width="1" height="15" fill="rgb(211,24,4)"/><text x="1155.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (2 samples, 0.02%)</title><rect x="1152" y="485" width="1" height="15" fill="rgb(233,198,25)"/><text x="1155.00" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (2 samples, 0.02%)</title><rect x="1152" y="469" width="1" height="15" fill="rgb(236,221,5)"/><text x="1155.00" y="479.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="1152" y="453" width="1" height="15" fill="rgb(215,116,37)"/><text x="1155.00" y="463.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="1152" y="437" width="1" height="15" fill="rgb(250,153,46)"/><text x="1155.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="1152" y="421" width="1" height="15" fill="rgb(218,171,1)"/><text x="1155.00" y="431.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="1152" y="405" width="1" height="15" fill="rgb(240,0,2)"/><text x="1155.00" y="415.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="1152" y="389" width="1" height="15" fill="rgb(224,72,3)"/><text x="1155.00" y="399.50"></text></g><g><title>sysmalloc (2 samples, 0.02%)</title><rect x="1152" y="373" width="1" height="15" fill="rgb(207,85,13)"/><text x="1155.00" y="383.50"></text></g><g><title>page_fault (2 samples, 0.02%)</title><rect x="1152" y="357" width="1" height="15" fill="rgb(217,145,50)"/><text x="1155.00" y="367.50"></text></g><g><title>do_page_fault (2 samples, 0.02%)</title><rect x="1152" y="341" width="1" height="15" fill="rgb(244,204,10)"/><text x="1155.00" y="351.50"></text></g><g><title>__do_page_fault (2 samples, 0.02%)</title><rect x="1152" y="325" width="1" height="15" fill="rgb(221,118,51)"/><text x="1155.00" y="335.50"></text></g><g><title>handle_mm_fault (2 samples, 0.02%)</title><rect x="1152" y="309" width="1" height="15" fill="rgb(239,35,41)"/><text x="1155.00" y="319.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.02%)</title><rect x="1152" y="293" width="1" height="15" fill="rgb(205,181,16)"/><text x="1155.00" y="303.50"></text></g><g><title>handle_pte_fault (2 samples, 0.02%)</title><rect x="1152" y="277" width="1" height="15" fill="rgb(224,165,53)"/><text x="1155.00" y="287.50"></text></g><g><title>lru_cache_add_active_or_unevictable (1 samples, 0.01%)</title><rect x="1153" y="261" width="0" height="15" fill="rgb(232,27,53)"/><text x="1156.00" y="271.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::new (3 samples, 0.03%)</title><rect x="1152" y="629" width="1" height="15" fill="rgb(221,196,17)"/><text x="1155.00" y="639.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::new_with_segments (3 samples, 0.03%)</title><rect x="1152" y="613" width="1" height="15" fill="rgb(208,128,33)"/><text x="1155.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::new (1 samples, 0.01%)</title><rect x="1153" y="597" width="0" height="15" fill="rgb(212,35,51)"/><text x="1156.00" y="607.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.01%)</title><rect x="1153" y="581" width="0" height="15" fill="rgb(222,13,23)"/><text x="1156.00" y="591.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (1 samples, 0.01%)</title><rect x="1153" y="565" width="0" height="15" fill="rgb(232,176,49)"/><text x="1156.00" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (1 samples, 0.01%)</title><rect x="1153" y="549" width="0" height="15" fill="rgb(224,216,6)"/><text x="1156.00" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="1153" y="533" width="0" height="15" fill="rgb(240,197,10)"/><text x="1156.00" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc_zeroed (1 samples, 0.01%)</title><rect x="1153" y="517" width="0" height="15" fill="rgb(220,187,25)"/><text x="1156.00" y="527.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.01%)</title><rect x="1153" y="501" width="0" height="15" fill="rgb(223,53,50)"/><text x="1156.00" y="511.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.01%)</title><rect x="1153" y="485" width="0" height="15" fill="rgb(253,47,24)"/><text x="1156.00" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.01%)</title><rect x="1153" y="469" width="0" height="15" fill="rgb(238,66,38)"/><text x="1156.00" y="479.50"></text></g><g><title>__libc_calloc (1 samples, 0.01%)</title><rect x="1153" y="453" width="0" height="15" fill="rgb(248,193,36)"/><text x="1156.00" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1153" y="437" width="0" height="15" fill="rgb(245,16,54)"/><text x="1156.00" y="447.50"></text></g><g><title>malloc_consolidate (1 samples, 0.01%)</title><rect x="1153" y="421" width="0" height="15" fill="rgb(238,91,3)"/><text x="1156.00" y="431.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::seq (3 samples, 0.03%)</title><rect x="1153" y="629" width="0" height="15" fill="rgb(238,203,53)"/><text x="1156.00" y="639.50"></text></g><g><title>e2d2::state::reordered_buffer::reordered_buffer::ReorderedBuffer::fast_path_insert (3 samples, 0.03%)</title><rect x="1153" y="613" width="0" height="15" fill="rgb(233,190,49)"/><text x="1156.00" y="623.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::write_at_tail (3 samples, 0.03%)</title><rect x="1153" y="597" width="0" height="15" fill="rgb(230,168,11)"/><text x="1156.00" y="607.50"></text></g><g><title>e2d2::state::ring_buffer::RingBuffer::wrapped_write (3 samples, 0.03%)</title><rect x="1153" y="581" width="0" height="15" fill="rgb(231,2,35)"/><text x="1156.00" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut [u8]&gt;::write (3 samples, 0.03%)</title><rect x="1153" y="565" width="0" height="15" fill="rgb(205,165,10)"/><text x="1156.00" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.03%)</title><rect x="1153" y="549" width="0" height="15" fill="rgb(214,196,13)"/><text x="1156.00" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="1153" y="533" width="0" height="15" fill="rgb(219,198,30)"/><text x="1156.00" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="1153" y="517" width="0" height="15" fill="rgb(217,162,43)"/><text x="1156.00" y="527.50"></text></g><g><title>rustls::msgs::codec::Reader::sub (2 samples, 0.02%)</title><rect x="1153" y="501" width="1" height="15" fill="rgb(250,202,50)"/><text x="1156.00" y="511.50"></text></g><g><title>rustls::msgs::codec::Reader::take (2 samples, 0.02%)</title><rect x="1153" y="485" width="1" height="15" fill="rgb(235,64,5)"/><text x="1156.00" y="495.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="1153" y="469" width="1" height="15" fill="rgb(222,210,5)"/><text x="1156.00" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="1153" y="453" width="1" height="15" fill="rgb(220,113,32)"/><text x="1156.00" y="463.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientExtension as rustls::msgs::codec::Codec&gt;::read (4 samples, 0.05%)</title><rect x="1153" y="517" width="1" height="15" fill="rgb(250,51,7)"/><text x="1156.00" y="527.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::SignatureScheme&gt;&gt;::read (1 samples, 0.01%)</title><rect x="1154" y="501" width="0" height="15" fill="rgb(210,194,35)"/><text x="1157.00" y="511.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (1 samples, 0.01%)</title><rect x="1154" y="485" width="0" height="15" fill="rgb(250,177,24)"/><text x="1157.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="1154" y="469" width="0" height="15" fill="rgb(234,184,33)"/><text x="1157.00" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="1154" y="453" width="0" height="15" fill="rgb(210,212,22)"/><text x="1157.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="1154" y="437" width="0" height="15" fill="rgb(213,81,3)"/><text x="1157.00" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.01%)</title><rect x="1154" y="421" width="0" height="15" fill="rgb(209,220,31)"/><text x="1157.00" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (1 samples, 0.01%)</title><rect x="1154" y="405" width="0" height="15" fill="rgb(233,178,9)"/><text x="1157.00" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="1154" y="389" width="0" height="15" fill="rgb(215,83,25)"/><text x="1157.00" y="399.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="1154" y="373" width="0" height="15" fill="rgb(250,167,48)"/><text x="1157.00" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="1154" y="357" width="0" height="15" fill="rgb(232,174,0)"/><text x="1157.00" y="367.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="1154" y="341" width="0" height="15" fill="rgb(243,5,40)"/><text x="1157.00" y="351.50"></text></g><g><title>pvn_tls::utils::get_server_name (5 samples, 0.06%)</title><rect x="1153" y="629" width="1" height="15" fill="rgb(228,111,2)"/><text x="1156.00" y="639.50"></text></g><g><title>pvn_tls::utils::on_frame (5 samples, 0.06%)</title><rect x="1153" y="613" width="1" height="15" fill="rgb(230,134,3)"/><text x="1156.00" y="623.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (5 samples, 0.06%)</title><rect x="1153" y="597" width="1" height="15" fill="rgb(247,202,45)"/><text x="1156.00" y="607.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (5 samples, 0.06%)</title><rect x="1153" y="581" width="1" height="15" fill="rgb(227,63,21)"/><text x="1156.00" y="591.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (5 samples, 0.06%)</title><rect x="1153" y="565" width="1" height="15" fill="rgb(252,91,6)"/><text x="1156.00" y="575.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (5 samples, 0.06%)</title><rect x="1153" y="549" width="1" height="15" fill="rgb(247,57,5)"/><text x="1156.00" y="559.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (5 samples, 0.06%)</title><rect x="1153" y="533" width="1" height="15" fill="rgb(252,186,3)"/><text x="1156.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="1154" y="517" width="0" height="15" fill="rgb(241,123,4)"/><text x="1157.00" y="527.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="1154" y="501" width="0" height="15" fill="rgb(213,4,11)"/><text x="1157.00" y="511.50"></text></g><g><title>core::ptr::real_drop_in_place (1 samples, 0.01%)</title><rect x="1154" y="613" width="0" height="15" fill="rgb(253,110,22)"/><text x="1157.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (1 samples, 0.01%)</title><rect x="1154" y="597" width="0" height="15" fill="rgb(234,80,54)"/><text x="1157.00" y="607.50"></text></g><g><title>core::ptr::real_drop_in_place (1 samples, 0.01%)</title><rect x="1154" y="581" width="0" height="15" fill="rgb(232,188,16)"/><text x="1157.00" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1154" y="565" width="0" height="15" fill="rgb(249,221,34)"/><text x="1157.00" y="575.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.01%)</title><rect x="1154" y="549" width="0" height="15" fill="rgb(241,1,32)"/><text x="1157.00" y="559.50"></text></g><g><title>core::ptr::real_drop_in_place (1 samples, 0.01%)</title><rect x="1154" y="533" width="0" height="15" fill="rgb(227,127,24)"/><text x="1157.00" y="543.50"></text></g><g><title>core::ptr::real_drop_in_place (1 samples, 0.01%)</title><rect x="1154" y="517" width="0" height="15" fill="rgb(254,127,27)"/><text x="1157.00" y="527.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1154" y="501" width="0" height="15" fill="rgb(247,115,54)"/><text x="1157.00" y="511.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="1154" y="485" width="0" height="15" fill="rgb(227,14,28)"/><text x="1157.00" y="495.50"></text></g><g><title>tcache_put (1 samples, 0.01%)</title><rect x="1154" y="469" width="0" height="15" fill="rgb(231,191,29)"/><text x="1157.00" y="479.50"></text></g><g><title>rustls::msgs::codec::Codec::read_bytes (2 samples, 0.02%)</title><rect x="1154" y="597" width="0" height="15" fill="rgb(235,155,32)"/><text x="1157.00" y="607.50"></text></g><g><title>&lt;rustls::msgs::message::Message as rustls::msgs::codec::Codec&gt;::read (2 samples, 0.02%)</title><rect x="1154" y="581" width="0" height="15" fill="rgb(233,74,37)"/><text x="1157.00" y="591.50"></text></g><g><title>&lt;rustls::msgs::base::Payload as rustls::msgs::codec::Codec&gt;::read (1 samples, 0.01%)</title><rect x="1154" y="565" width="0" height="15" fill="rgb(214,188,22)"/><text x="1157.00" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.01%)</title><rect x="1154" y="549" width="0" height="15" fill="rgb(253,220,38)"/><text x="1157.00" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="1154" y="533" width="0" height="15" fill="rgb(221,52,7)"/><text x="1157.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="1154" y="517" width="0" height="15" fill="rgb(225,134,35)"/><text x="1157.00" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="1154" y="501" width="0" height="15" fill="rgb(224,148,6)"/><text x="1157.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="1154" y="485" width="0" height="15" fill="rgb(210,118,37)"/><text x="1157.00" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (1 samples, 0.01%)</title><rect x="1154" y="469" width="0" height="15" fill="rgb(205,85,41)"/><text x="1157.00" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="1154" y="453" width="0" height="15" fill="rgb(252,211,41)"/><text x="1157.00" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="1154" y="437" width="0" height="15" fill="rgb(252,78,32)"/><text x="1157.00" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="1154" y="421" width="0" height="15" fill="rgb(223,169,8)"/><text x="1157.00" y="431.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="1154" y="405" width="0" height="15" fill="rgb(226,36,28)"/><text x="1157.00" y="415.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1154" y="389" width="0" height="15" fill="rgb(209,109,35)"/><text x="1157.00" y="399.50"></text></g><g><title>&lt;rustls::msgs::enums::CipherSuite as rustls::msgs::codec::Codec&gt;::read (1 samples, 0.01%)</title><rect x="1154" y="517" width="1" height="15" fill="rgb(229,132,33)"/><text x="1157.00" y="527.50"></text></g><g><title>&lt;u16 as rustls::msgs::codec::Codec&gt;::read (1 samples, 0.01%)</title><rect x="1154" y="501" width="1" height="15" fill="rgb(207,124,22)"/><text x="1157.00" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.01%)</title><rect x="1154" y="485" width="1" height="15" fill="rgb(216,107,25)"/><text x="1157.00" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="1154" y="469" width="1" height="15" fill="rgb(225,7,19)"/><text x="1157.00" y="479.50"></text></g><g><title>rustls::msgs::codec::decode_u16 (1 samples, 0.01%)</title><rect x="1154" y="453" width="1" height="15" fill="rgb(250,54,20)"/><text x="1157.00" y="463.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::NamedGroup&gt;&gt;::read (1 samples, 0.01%)</title><rect x="1155" y="501" width="0" height="15" fill="rgb(237,18,35)"/><text x="1158.00" y="511.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (1 samples, 0.01%)</title><rect x="1155" y="485" width="0" height="15" fill="rgb(250,87,35)"/><text x="1158.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="1155" y="469" width="0" height="15" fill="rgb(237,229,9)"/><text x="1158.00" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="1155" y="453" width="0" height="15" fill="rgb(239,109,46)"/><text x="1158.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="1155" y="437" width="0" height="15" fill="rgb(223,16,22)"/><text x="1158.00" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.01%)</title><rect x="1155" y="421" width="0" height="15" fill="rgb(227,90,23)"/><text x="1158.00" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (1 samples, 0.01%)</title><rect x="1155" y="405" width="0" height="15" fill="rgb(238,27,40)"/><text x="1158.00" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="1155" y="389" width="0" height="15" fill="rgb(232,145,52)"/><text x="1158.00" y="399.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="1155" y="373" width="0" height="15" fill="rgb(218,97,45)"/><text x="1158.00" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="1155" y="357" width="0" height="15" fill="rgb(218,48,47)"/><text x="1158.00" y="367.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="1155" y="341" width="0" height="15" fill="rgb(213,121,8)"/><text x="1158.00" y="351.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::ProtocolVersion&gt;&gt;::read (1 samples, 0.01%)</title><rect x="1155" y="501" width="0" height="15" fill="rgb(209,64,46)"/><text x="1158.00" y="511.50"></text></g><g><title>rustls::msgs::codec::read_vec_u8 (1 samples, 0.01%)</title><rect x="1155" y="485" width="0" height="15" fill="rgb(218,210,51)"/><text x="1158.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="1155" y="469" width="0" height="15" fill="rgb(242,223,0)"/><text x="1158.00" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="1155" y="453" width="0" height="15" fill="rgb(212,73,5)"/><text x="1158.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="1155" y="437" width="0" height="15" fill="rgb(249,210,24)"/><text x="1158.00" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.01%)</title><rect x="1155" y="421" width="0" height="15" fill="rgb(245,200,48)"/><text x="1158.00" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (1 samples, 0.01%)</title><rect x="1155" y="405" width="0" height="15" fill="rgb(238,158,29)"/><text x="1158.00" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="1155" y="389" width="0" height="15" fill="rgb(242,54,9)"/><text x="1158.00" y="399.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="1155" y="373" width="0" height="15" fill="rgb(215,28,43)"/><text x="1158.00" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="1155" y="357" width="0" height="15" fill="rgb(213,25,52)"/><text x="1158.00" y="367.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="1155" y="341" width="0" height="15" fill="rgb(230,110,6)"/><text x="1158.00" y="351.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="1155" y="325" width="0" height="15" fill="rgb(240,164,15)"/><text x="1158.00" y="335.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientExtension as rustls::msgs::codec::Codec&gt;::read (4 samples, 0.05%)</title><rect x="1155" y="517" width="0" height="15" fill="rgb(253,185,42)"/><text x="1158.00" y="527.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::SignatureScheme&gt;&gt;::read (2 samples, 0.02%)</title><rect x="1155" y="501" width="0" height="15" fill="rgb(233,46,45)"/><text x="1158.00" y="511.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (2 samples, 0.02%)</title><rect x="1155" y="485" width="0" height="15" fill="rgb(234,171,23)"/><text x="1158.00" y="495.50"></text></g><g><title>&lt;rustls::msgs::enums::SignatureScheme as rustls::msgs::codec::Codec&gt;::read (2 samples, 0.02%)</title><rect x="1155" y="469" width="0" height="15" fill="rgb(219,212,15)"/><text x="1158.00" y="479.50"></text></g><g><title>&lt;u16 as rustls::msgs::codec::Codec&gt;::read (1 samples, 0.01%)</title><rect x="1155" y="453" width="0" height="15" fill="rgb(240,109,39)"/><text x="1158.00" y="463.50"></text></g><g><title>rustls::msgs::codec::Reader::take (1 samples, 0.01%)</title><rect x="1155" y="437" width="0" height="15" fill="rgb(223,37,54)"/><text x="1158.00" y="447.50"></text></g><g><title>pvn_tls::utils::is_client_hello (12 samples, 0.14%)</title><rect x="1154" y="629" width="1" height="15" fill="rgb(217,223,30)"/><text x="1157.00" y="639.50"></text></g><g><title>pvn_tls::utils::on_frame (11 samples, 0.12%)</title><rect x="1154" y="613" width="1" height="15" fill="rgb(227,129,18)"/><text x="1157.00" y="623.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (8 samples, 0.09%)</title><rect x="1154" y="597" width="1" height="15" fill="rgb(212,32,34)"/><text x="1157.00" y="607.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (8 samples, 0.09%)</title><rect x="1154" y="581" width="1" height="15" fill="rgb(217,223,34)"/><text x="1157.00" y="591.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (8 samples, 0.09%)</title><rect x="1154" y="565" width="1" height="15" fill="rgb(237,12,37)"/><text x="1157.00" y="575.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (8 samples, 0.09%)</title><rect x="1154" y="549" width="1" height="15" fill="rgb(241,152,23)"/><text x="1157.00" y="559.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (8 samples, 0.09%)</title><rect x="1154" y="533" width="1" height="15" fill="rgb(242,35,43)"/><text x="1157.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3 samples, 0.03%)</title><rect x="1155" y="517" width="0" height="15" fill="rgb(227,11,44)"/><text x="1158.00" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.03%)</title><rect x="1155" y="501" width="0" height="15" fill="rgb(240,78,28)"/><text x="1158.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.03%)</title><rect x="1155" y="485" width="0" height="15" fill="rgb(241,22,18)"/><text x="1158.00" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (3 samples, 0.03%)</title><rect x="1155" y="469" width="0" height="15" fill="rgb(229,83,8)"/><text x="1158.00" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (3 samples, 0.03%)</title><rect x="1155" y="453" width="0" height="15" fill="rgb(231,60,22)"/><text x="1158.00" y="463.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.03%)</title><rect x="1155" y="437" width="0" height="15" fill="rgb(245,171,12)"/><text x="1158.00" y="447.50"></text></g><g><title>__rdl_realloc (3 samples, 0.03%)</title><rect x="1155" y="421" width="0" height="15" fill="rgb(220,187,22)"/><text x="1158.00" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.03%)</title><rect x="1155" y="405" width="0" height="15" fill="rgb(216,78,28)"/><text x="1158.00" y="415.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="1155" y="389" width="0" height="15" fill="rgb(254,60,32)"/><text x="1158.00" y="399.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="1155" y="373" width="0" height="15" fill="rgb(244,159,15)"/><text x="1158.00" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1155" y="357" width="0" height="15" fill="rgb(209,144,29)"/><text x="1158.00" y="367.50"></text></g><g><title>pvn_tls::utils::is_client_key_exchange (2 samples, 0.02%)</title><rect x="1155" y="629" width="1" height="15" fill="rgb(231,25,47)"/><text x="1158.00" y="639.50"></text></g><g><title>pvn_tls::utils::on_frame (2 samples, 0.02%)</title><rect x="1155" y="613" width="1" height="15" fill="rgb(214,120,17)"/><text x="1158.00" y="623.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (1 samples, 0.01%)</title><rect x="1156" y="597" width="0" height="15" fill="rgb(227,213,23)"/><text x="1159.00" y="607.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (1 samples, 0.01%)</title><rect x="1156" y="581" width="0" height="15" fill="rgb(205,118,22)"/><text x="1159.00" y="591.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (1 samples, 0.01%)</title><rect x="1156" y="565" width="0" height="15" fill="rgb(221,72,37)"/><text x="1159.00" y="575.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (1 samples, 0.01%)</title><rect x="1156" y="549" width="0" height="15" fill="rgb(215,90,23)"/><text x="1159.00" y="559.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (1 samples, 0.01%)</title><rect x="1156" y="533" width="0" height="15" fill="rgb(220,35,14)"/><text x="1159.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="1156" y="517" width="0" height="15" fill="rgb(234,185,33)"/><text x="1159.00" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="1156" y="501" width="0" height="15" fill="rgb(232,45,42)"/><text x="1159.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="1156" y="485" width="0" height="15" fill="rgb(247,136,47)"/><text x="1159.00" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.01%)</title><rect x="1156" y="469" width="0" height="15" fill="rgb(225,227,20)"/><text x="1159.00" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (1 samples, 0.01%)</title><rect x="1156" y="453" width="0" height="15" fill="rgb(231,22,54)"/><text x="1159.00" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="1156" y="437" width="0" height="15" fill="rgb(207,222,18)"/><text x="1159.00" y="447.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="1156" y="421" width="0" height="15" fill="rgb(218,189,39)"/><text x="1159.00" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="1156" y="405" width="0" height="15" fill="rgb(236,69,36)"/><text x="1159.00" y="415.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="1156" y="389" width="0" height="15" fill="rgb(236,104,32)"/><text x="1159.00" y="399.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::NamedGroup&gt;&gt;::read (1 samples, 0.01%)</title><rect x="1156" y="501" width="0" height="15" fill="rgb(228,198,13)"/><text x="1159.00" y="511.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (1 samples, 0.01%)</title><rect x="1156" y="485" width="0" height="15" fill="rgb(224,196,41)"/><text x="1159.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="1156" y="469" width="0" height="15" fill="rgb(223,147,24)"/><text x="1159.00" y="479.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientExtension as rustls::msgs::codec::Codec&gt;::read (3 samples, 0.03%)</title><rect x="1156" y="517" width="0" height="15" fill="rgb(213,223,3)"/><text x="1159.00" y="527.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::msgs::enums::SignatureScheme&gt;&gt;::read (2 samples, 0.02%)</title><rect x="1156" y="501" width="0" height="15" fill="rgb(229,115,28)"/><text x="1159.00" y="511.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (2 samples, 0.02%)</title><rect x="1156" y="485" width="0" height="15" fill="rgb(241,4,4)"/><text x="1159.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.02%)</title><rect x="1156" y="469" width="0" height="15" fill="rgb(251,89,14)"/><text x="1159.00" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.02%)</title><rect x="1156" y="453" width="0" height="15" fill="rgb(253,140,15)"/><text x="1159.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="1156" y="437" width="0" height="15" fill="rgb(228,119,52)"/><text x="1159.00" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (2 samples, 0.02%)</title><rect x="1156" y="421" width="0" height="15" fill="rgb(209,174,29)"/><text x="1159.00" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (2 samples, 0.02%)</title><rect x="1156" y="405" width="0" height="15" fill="rgb(242,75,12)"/><text x="1159.00" y="415.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.02%)</title><rect x="1156" y="389" width="0" height="15" fill="rgb(206,153,51)"/><text x="1159.00" y="399.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="1156" y="373" width="0" height="15" fill="rgb(250,148,30)"/><text x="1159.00" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.02%)</title><rect x="1156" y="357" width="0" height="15" fill="rgb(208,97,6)"/><text x="1159.00" y="367.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="1156" y="341" width="0" height="15" fill="rgb(215,203,17)"/><text x="1159.00" y="351.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="1156" y="325" width="0" height="15" fill="rgb(243,110,14)"/><text x="1159.00" y="335.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="1156" y="309" width="0" height="15" fill="rgb(235,78,37)"/><text x="1159.00" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (1 samples, 0.01%)</title><rect x="1156" y="453" width="0" height="15" fill="rgb(224,73,51)"/><text x="1159.00" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="1156" y="437" width="0" height="15" fill="rgb(234,1,44)"/><text x="1159.00" y="447.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="1156" y="421" width="0" height="15" fill="rgb(211,209,8)"/><text x="1159.00" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="1156" y="405" width="0" height="15" fill="rgb(207,68,24)"/><text x="1159.00" y="415.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="1156" y="389" width="0" height="15" fill="rgb(224,214,4)"/><text x="1159.00" y="399.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="1156" y="373" width="0" height="15" fill="rgb(224,107,39)"/><text x="1159.00" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1156" y="357" width="0" height="15" fill="rgb(250,229,20)"/><text x="1159.00" y="367.50"></text></g><g><title>pvn_tls::utils::is_server_hello (6 samples, 0.07%)</title><rect x="1156" y="629" width="1" height="15" fill="rgb(229,153,25)"/><text x="1159.00" y="639.50"></text></g><g><title>pvn_tls::utils::on_frame (5 samples, 0.06%)</title><rect x="1156" y="613" width="1" height="15" fill="rgb(212,181,52)"/><text x="1159.00" y="623.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (5 samples, 0.06%)</title><rect x="1156" y="597" width="1" height="15" fill="rgb(209,163,11)"/><text x="1159.00" y="607.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (5 samples, 0.06%)</title><rect x="1156" y="581" width="1" height="15" fill="rgb(245,191,22)"/><text x="1159.00" y="591.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (5 samples, 0.06%)</title><rect x="1156" y="565" width="1" height="15" fill="rgb(242,41,16)"/><text x="1159.00" y="575.50"></text></g><g><title>&lt;rustls::msgs::handshake::ClientHelloPayload as rustls::msgs::codec::Codec&gt;::read (5 samples, 0.06%)</title><rect x="1156" y="549" width="1" height="15" fill="rgb(219,59,3)"/><text x="1159.00" y="559.50"></text></g><g><title>rustls::msgs::codec::read_vec_u16 (5 samples, 0.06%)</title><rect x="1156" y="533" width="1" height="15" fill="rgb(228,96,41)"/><text x="1159.00" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.02%)</title><rect x="1156" y="517" width="1" height="15" fill="rgb(231,210,1)"/><text x="1159.00" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.02%)</title><rect x="1156" y="501" width="1" height="15" fill="rgb(239,215,22)"/><text x="1159.00" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="1156" y="485" width="1" height="15" fill="rgb(210,167,10)"/><text x="1159.00" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (2 samples, 0.02%)</title><rect x="1156" y="469" width="1" height="15" fill="rgb(243,174,6)"/><text x="1159.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::amortized_new_size (1 samples, 0.01%)</title><rect x="1156" y="453" width="1" height="15" fill="rgb(237,114,29)"/><text x="1159.00" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.01%)</title><rect x="1156" y="437" width="1" height="15" fill="rgb(237,3,10)"/><text x="1159.00" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.01%)</title><rect x="1156" y="421" width="1" height="15" fill="rgb(239,45,27)"/><text x="1159.00" y="431.50"></text></g><g><title>core::ptr::real_drop_in_place (1 samples, 0.01%)</title><rect x="1157" y="613" width="0" height="15" fill="rgb(225,12,4)"/><text x="1160.00" y="623.50"></text></g><g><title>core::ptr::real_drop_in_place (1 samples, 0.01%)</title><rect x="1157" y="597" width="0" height="15" fill="rgb(224,118,30)"/><text x="1160.00" y="607.50"></text></g><g><title>pvn_tls::utils::parse_tls_frame (2 samples, 0.02%)</title><rect x="1157" y="629" width="0" height="15" fill="rgb(219,131,35)"/><text x="1160.00" y="639.50"></text></g><g><title>pvn_tls::utils::on_frame (1 samples, 0.01%)</title><rect x="1157" y="613" width="0" height="15" fill="rgb(234,109,24)"/><text x="1160.00" y="623.50"></text></g><g><title>rustls::msgs::message::Message::decode_payload (1 samples, 0.01%)</title><rect x="1157" y="597" width="0" height="15" fill="rgb(241,87,10)"/><text x="1160.00" y="607.50"></text></g><g><title>rustls::msgs::message::MessagePayload::decode_given_type (1 samples, 0.01%)</title><rect x="1157" y="581" width="0" height="15" fill="rgb(208,5,23)"/><text x="1160.00" y="591.50"></text></g><g><title>rustls::msgs::handshake::HandshakeMessagePayload::read_version (1 samples, 0.01%)</title><rect x="1157" y="565" width="0" height="15" fill="rgb(251,200,4)"/><text x="1160.00" y="575.50"></text></g><g><title>rustls::msgs::handshake::&lt;impl rustls::msgs::codec::Codec for alloc::vec::Vec&lt;rustls::key::Certificate&gt;&gt;::read (1 samples, 0.01%)</title><rect x="1157" y="549" width="0" height="15" fill="rgb(206,40,11)"/><text x="1160.00" y="559.50"></text></g><g><title>rustls::msgs::codec::read_vec_u24_limited (1 samples, 0.01%)</title><rect x="1157" y="533" width="0" height="15" fill="rgb(234,183,4)"/><text x="1160.00" y="543.50"></text></g><g><title>rustls::msgs::base::&lt;impl rustls::msgs::codec::Codec for rustls::key::Certificate&gt;::read (1 samples, 0.01%)</title><rect x="1157" y="517" width="0" height="15" fill="rgb(224,107,0)"/><text x="1160.00" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.01%)</title><rect x="1157" y="501" width="0" height="15" fill="rgb(240,75,4)"/><text x="1160.00" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="1157" y="485" width="0" height="15" fill="rgb(239,166,15)"/><text x="1160.00" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="1157" y="469" width="0" height="15" fill="rgb(240,89,52)"/><text x="1160.00" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="1157" y="453" width="0" height="15" fill="rgb(235,190,35)"/><text x="1160.00" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="1157" y="437" width="0" height="15" fill="rgb(207,106,42)"/><text x="1160.00" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (1 samples, 0.01%)</title><rect x="1157" y="421" width="0" height="15" fill="rgb(206,209,40)"/><text x="1160.00" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="1157" y="405" width="0" height="15" fill="rgb(219,214,36)"/><text x="1160.00" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="1157" y="389" width="0" height="15" fill="rgb(206,178,25)"/><text x="1160.00" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="1157" y="373" width="0" height="15" fill="rgb(212,196,11)"/><text x="1160.00" y="383.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="1157" y="357" width="0" height="15" fill="rgb(248,86,3)"/><text x="1160.00" y="367.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1157" y="341" width="0" height="15" fill="rgb(233,100,26)"/><text x="1160.00" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="1157" y="613" width="0" height="15" fill="rgb(217,203,24)"/><text x="1160.00" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="1157" y="597" width="0" height="15" fill="rgb(212,68,4)"/><text x="1160.00" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="1157" y="581" width="0" height="15" fill="rgb(233,149,48)"/><text x="1160.00" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="1157" y="565" width="0" height="15" fill="rgb(216,139,54)"/><text x="1160.00" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1 samples, 0.01%)</title><rect x="1157" y="549" width="0" height="15" fill="rgb(240,160,53)"/><text x="1160.00" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (1 samples, 0.01%)</title><rect x="1157" y="533" width="0" height="15" fill="rgb(234,48,45)"/><text x="1160.00" y="543.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="1157" y="517" width="0" height="15" fill="rgb(231,180,28)"/><text x="1160.00" y="527.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="1157" y="501" width="0" height="15" fill="rgb(223,15,35)"/><text x="1160.00" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="1157" y="485" width="0" height="15" fill="rgb(216,119,11)"/><text x="1160.00" y="495.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="1157" y="469" width="0" height="15" fill="rgb(243,139,25)"/><text x="1160.00" y="479.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="1157" y="453" width="0" height="15" fill="rgb(231,216,48)"/><text x="1160.00" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="1157" y="437" width="0" height="15" fill="rgb(232,221,31)"/><text x="1160.00" y="447.50"></text></g><g><title>sysmalloc (1 samples, 0.01%)</title><rect x="1157" y="421" width="0" height="15" fill="rgb(221,62,1)"/><text x="1160.00" y="431.50"></text></g><g><title>grow_heap (1 samples, 0.01%)</title><rect x="1157" y="405" width="0" height="15" fill="rgb(229,33,7)"/><text x="1160.00" y="415.50"></text></g><g><title>__GI___mprotect (1 samples, 0.01%)</title><rect x="1157" y="389" width="0" height="15" fill="rgb(223,132,16)"/><text x="1160.00" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1157" y="373" width="0" height="15" fill="rgb(224,116,6)"/><text x="1160.00" y="383.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1157" y="357" width="0" height="15" fill="rgb(238,172,16)"/><text x="1160.00" y="367.50"></text></g><g><title>sys_mprotect (1 samples, 0.01%)</title><rect x="1157" y="341" width="0" height="15" fill="rgb(231,13,28)"/><text x="1160.00" y="351.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.01%)</title><rect x="1157" y="325" width="0" height="15" fill="rgb(221,71,54)"/><text x="1160.00" y="335.50"></text></g><g><title>mprotect_fixup (1 samples, 0.01%)</title><rect x="1157" y="309" width="0" height="15" fill="rgb(217,31,46)"/><text x="1160.00" y="319.50"></text></g><g><title>perf_event_mmap (1 samples, 0.01%)</title><rect x="1157" y="293" width="0" height="15" fill="rgb(215,128,53)"/><text x="1160.00" y="303.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.01%)</title><rect x="1157" y="277" width="0" height="15" fill="rgb(211,4,8)"/><text x="1160.00" y="287.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.01%)</title><rect x="1157" y="261" width="0" height="15" fill="rgb(234,100,40)"/><text x="1160.00" y="271.50"></text></g><g><title>memcpy_erms (1 samples, 0.01%)</title><rect x="1157" y="245" width="0" height="15" fill="rgb(247,97,44)"/><text x="1160.00" y="255.50"></text></g><g><title>pvn_tls::utils::read_payload (2 samples, 0.02%)</title><rect x="1157" y="629" width="0" height="15" fill="rgb(209,210,32)"/><text x="1160.00" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.01%)</title><rect x="1157" y="613" width="0" height="15" fill="rgb(244,201,16)"/><text x="1160.00" y="623.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="1157" y="597" width="0" height="15" fill="rgb(243,39,40)"/><text x="1160.00" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 0.01%)</title><rect x="1157" y="581" width="0" height="15" fill="rgb(205,49,0)"/><text x="1160.00" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (1 samples, 0.01%)</title><rect x="1157" y="565" width="0" height="15" fill="rgb(246,29,28)"/><text x="1160.00" y="575.50"></text></g><g><title>ring::digest::digest (1 samples, 0.01%)</title><rect x="1157" y="389" width="0" height="15" fill="rgb(232,19,9)"/><text x="1160.00" y="399.50"></text></g><g><title>ring::digest::Context::update (1 samples, 0.01%)</title><rect x="1157" y="373" width="0" height="15" fill="rgb(242,134,48)"/><text x="1160.00" y="383.50"></text></g><g><title>GFp_sha256_block_data_order_avx (1 samples, 0.01%)</title><rect x="1157" y="357" width="0" height="15" fill="rgb(248,212,36)"/><text x="1160.00" y="367.50"></text></g><g><title>ring::rsa::bigint::elem_mul_ (1 samples, 0.01%)</title><rect x="1157" y="357" width="0" height="15" fill="rgb(213,156,15)"/><text x="1160.00" y="367.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_mul (1 samples, 0.01%)</title><rect x="1157" y="341" width="0" height="15" fill="rgb(205,163,15)"/><text x="1160.00" y="351.50"></text></g><g><title>bn_mulx4x_mont (1 samples, 0.01%)</title><rect x="1157" y="325" width="0" height="15" fill="rgb(219,30,13)"/><text x="1160.00" y="335.50"></text></g><g><title>GFp_bn_sqrx8x_internal (1 samples, 0.01%)</title><rect x="1157" y="309" width="0" height="15" fill="rgb(238,147,22)"/><text x="1160.00" y="319.50"></text></g><g><title>ring::rsa::bigint::elem_exp_vartime (4 samples, 0.05%)</title><rect x="1157" y="389" width="1" height="15" fill="rgb(239,89,44)"/><text x="1160.00" y="399.50"></text></g><g><title>ring::rsa::bigint::elem_exp_vartime_ (4 samples, 0.05%)</title><rect x="1157" y="373" width="1" height="15" fill="rgb(247,181,39)"/><text x="1160.00" y="383.50"></text></g><g><title>ring::rsa::bigint::elem_squared (3 samples, 0.03%)</title><rect x="1157" y="357" width="1" height="15" fill="rgb(242,35,49)"/><text x="1160.00" y="367.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_square (3 samples, 0.03%)</title><rect x="1157" y="341" width="1" height="15" fill="rgb(227,29,19)"/><text x="1160.00" y="351.50"></text></g><g><title>bn_sqr8x_mont (3 samples, 0.03%)</title><rect x="1157" y="325" width="1" height="15" fill="rgb(205,187,19)"/><text x="1160.00" y="335.50"></text></g><g><title>__bn_sqrx8x_reduction (2 samples, 0.02%)</title><rect x="1157" y="309" width="1" height="15" fill="rgb(230,97,34)"/><text x="1160.00" y="319.50"></text></g><g><title>ring::rsa::bigint::BoxedLimbs&lt;M&gt;::positive_minimal_width_from_be_bytes (1 samples, 0.01%)</title><rect x="1158" y="357" width="0" height="15" fill="rgb(211,76,36)"/><text x="1161.00" y="367.50"></text></g><g><title>ring::limb::parse_big_endian_and_pad_consttime (1 samples, 0.01%)</title><rect x="1158" y="341" width="0" height="15" fill="rgb(239,23,18)"/><text x="1161.00" y="351.50"></text></g><g><title>core::slice::&lt;impl core::iter::traits::collect::IntoIterator for &amp;mut [T]&gt;::into_iter (1 samples, 0.01%)</title><rect x="1158" y="325" width="0" height="15" fill="rgb(222,176,29)"/><text x="1161.00" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.01%)</title><rect x="1158" y="309" width="0" height="15" fill="rgb(223,221,42)"/><text x="1161.00" y="319.50"></text></g><g><title>core::ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="1158" y="293" width="0" height="15" fill="rgb(226,85,5)"/><text x="1161.00" y="303.50"></text></g><g><title>core::ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="1158" y="277" width="0" height="15" fill="rgb(250,181,2)"/><text x="1161.00" y="287.50"></text></g><g><title>GFp_bn_sqrx8x_internal (1 samples, 0.01%)</title><rect x="1158" y="261" width="0" height="15" fill="rgb(249,123,36)"/><text x="1161.00" y="271.50"></text></g><g><title>&lt;rustls::verify::WebPKIVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (8 samples, 0.09%)</title><rect x="1157" y="613" width="1" height="15" fill="rgb(248,108,20)"/><text x="1160.00" y="623.50"></text></g><g><title>webpki::EndEntityCert::verify_is_valid_tls_server_cert (8 samples, 0.09%)</title><rect x="1157" y="597" width="1" height="15" fill="rgb(246,10,32)"/><text x="1160.00" y="607.50"></text></g><g><title>webpki::verify_cert::build_chain (8 samples, 0.09%)</title><rect x="1157" y="581" width="1" height="15" fill="rgb(243,214,37)"/><text x="1160.00" y="591.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (8 samples, 0.09%)</title><rect x="1157" y="565" width="1" height="15" fill="rgb(253,224,43)"/><text x="1160.00" y="575.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h7d5a92fee08bd0a2 (8 samples, 0.09%)</title><rect x="1157" y="549" width="1" height="15" fill="rgb(219,130,5)"/><text x="1160.00" y="559.50"></text></g><g><title>webpki::verify_cert::build_chain (8 samples, 0.09%)</title><rect x="1157" y="533" width="1" height="15" fill="rgb(231,135,38)"/><text x="1160.00" y="543.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (8 samples, 0.09%)</title><rect x="1157" y="517" width="1" height="15" fill="rgb(226,63,9)"/><text x="1160.00" y="527.50"></text></g><g><title>webpki::verify_cert::build_chain::_$u7b$$u7b$closure$u7d$$u7d$::h6844014f3662fae0 (8 samples, 0.09%)</title><rect x="1157" y="501" width="1" height="15" fill="rgb(252,25,5)"/><text x="1160.00" y="511.50"></text></g><g><title>webpki::verify_cert::check_signatures (8 samples, 0.09%)</title><rect x="1157" y="485" width="1" height="15" fill="rgb(225,141,44)"/><text x="1160.00" y="495.50"></text></g><g><title>webpki::signed_data::verify_signed_data (8 samples, 0.09%)</title><rect x="1157" y="469" width="1" height="15" fill="rgb(223,95,24)"/><text x="1160.00" y="479.50"></text></g><g><title>webpki::signed_data::verify_signature (8 samples, 0.09%)</title><rect x="1157" y="453" width="1" height="15" fill="rgb(240,209,33)"/><text x="1160.00" y="463.50"></text></g><g><title>ring::signature::verify (8 samples, 0.09%)</title><rect x="1157" y="437" width="1" height="15" fill="rgb(243,36,2)"/><text x="1160.00" y="447.50"></text></g><g><title>ring::rsa::verification::&lt;impl ring::signature::VerificationAlgorithm for ring::rsa::Parameters&gt;::verify (8 samples, 0.09%)</title><rect x="1157" y="421" width="1" height="15" fill="rgb(245,16,12)"/><text x="1160.00" y="431.50"></text></g><g><title>ring::rsa::verification::verify_rsa_ (8 samples, 0.09%)</title><rect x="1157" y="405" width="1" height="15" fill="rgb(245,168,43)"/><text x="1160.00" y="415.50"></text></g><g><title>ring::rsa::verification::Key::from_modulus_and_exponent (3 samples, 0.03%)</title><rect x="1158" y="389" width="0" height="15" fill="rgb(236,217,53)"/><text x="1161.00" y="399.50"></text></g><g><title>ring::rsa::bigint::Modulus&lt;M&gt;::from_be_bytes_with_bit_length (3 samples, 0.03%)</title><rect x="1158" y="373" width="0" height="15" fill="rgb(214,212,13)"/><text x="1161.00" y="383.50"></text></g><g><title>ring::rsa::bigint::Modulus&lt;M&gt;::from_boxed_limbs (2 samples, 0.02%)</title><rect x="1158" y="357" width="0" height="15" fill="rgb(227,6,12)"/><text x="1161.00" y="367.50"></text></g><g><title>ring::rsa::bigint::One&lt;M,ring::arithmetic::montgomery::RR&gt;::newRR (2 samples, 0.02%)</title><rect x="1158" y="341" width="0" height="15" fill="rgb(252,75,22)"/><text x="1161.00" y="351.50"></text></g><g><title>ring::rsa::bigint::elem_exp_vartime_ (2 samples, 0.02%)</title><rect x="1158" y="325" width="0" height="15" fill="rgb(244,167,15)"/><text x="1161.00" y="335.50"></text></g><g><title>ring::rsa::bigint::elem_squared (2 samples, 0.02%)</title><rect x="1158" y="309" width="0" height="15" fill="rgb(240,70,5)"/><text x="1161.00" y="319.50"></text></g><g><title>ring::rsa::bigint::limbs_mont_square (2 samples, 0.02%)</title><rect x="1158" y="293" width="0" height="15" fill="rgb(211,16,47)"/><text x="1161.00" y="303.50"></text></g><g><title>bn_sqr8x_mont (2 samples, 0.02%)</title><rect x="1158" y="277" width="0" height="15" fill="rgb(219,176,0)"/><text x="1161.00" y="287.50"></text></g><g><title>__bn_sqrx8x_reduction (1 samples, 0.01%)</title><rect x="1158" y="261" width="0" height="15" fill="rgb(209,55,35)"/><text x="1161.00" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="1158" y="597" width="0" height="15" fill="rgb(254,64,27)"/><text x="1161.00" y="607.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="1158" y="581" width="0" height="15" fill="rgb(215,36,42)"/><text x="1161.00" y="591.50"></text></g><g><title>pvn_tls::utils::test_extracted_cert (11 samples, 0.12%)</title><rect x="1157" y="629" width="2" height="15" fill="rgb(241,198,28)"/><text x="1160.00" y="639.50"></text></g><g><title>rustls::anchors::RootCertStore::add_server_trust_anchors (3 samples, 0.03%)</title><rect x="1158" y="613" width="1" height="15" fill="rgb(254,61,10)"/><text x="1161.00" y="623.50"></text></g><g><title>rustls::anchors::OwnedTrustAnchor::from_trust_anchor (2 samples, 0.02%)</title><rect x="1158" y="597" width="1" height="15" fill="rgb(252,140,25)"/><text x="1161.00" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.02%)</title><rect x="1158" y="581" width="1" height="15" fill="rgb(215,188,41)"/><text x="1161.00" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="1158" y="565" width="1" height="15" fill="rgb(247,45,40)"/><text x="1161.00" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="1158" y="549" width="1" height="15" fill="rgb(214,106,31)"/><text x="1161.00" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="1158" y="533" width="1" height="15" fill="rgb(214,20,38)"/><text x="1161.00" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="1158" y="517" width="1" height="15" fill="rgb(220,10,52)"/><text x="1161.00" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (2 samples, 0.02%)</title><rect x="1158" y="501" width="1" height="15" fill="rgb(207,196,5)"/><text x="1161.00" y="511.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="1158" y="485" width="1" height="15" fill="rgb(220,24,30)"/><text x="1161.00" y="495.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="1158" y="469" width="1" height="15" fill="rgb(229,15,50)"/><text x="1161.00" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="1158" y="453" width="1" height="15" fill="rgb(235,20,31)"/><text x="1161.00" y="463.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="1158" y="437" width="1" height="15" fill="rgb(240,1,13)"/><text x="1161.00" y="447.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="1159" y="597" width="0" height="15" fill="rgb(235,89,22)"/><text x="1162.00" y="607.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="1159" y="581" width="0" height="15" fill="rgb(211,17,12)"/><text x="1162.00" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.02%)</title><rect x="1159" y="565" width="0" height="15" fill="rgb(254,31,13)"/><text x="1162.00" y="575.50"></text></g><g><title>core::hash::Hasher::write_u32 (2 samples, 0.02%)</title><rect x="1159" y="549" width="0" height="15" fill="rgb(224,69,23)"/><text x="1162.00" y="559.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="1159" y="533" width="0" height="15" fill="rgb(240,13,54)"/><text x="1162.00" y="543.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="1159" y="517" width="0" height="15" fill="rgb(243,46,29)"/><text x="1162.00" y="527.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (1 samples, 0.01%)</title><rect x="1159" y="501" width="0" height="15" fill="rgb(243,113,11)"/><text x="1162.00" y="511.50"></text></g><g><title>core::ptr::&lt;impl *const T&gt;::offset (1 samples, 0.01%)</title><rect x="1159" y="485" width="0" height="15" fill="rgb(245,66,27)"/><text x="1162.00" y="495.50"></text></g><g><title>hashbrown::raw::imp::Group::load (1 samples, 0.01%)</title><rect x="1159" y="581" width="0" height="15" fill="rgb(249,204,39)"/><text x="1162.00" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="1159" y="565" width="0" height="15" fill="rgb(228,17,10)"/><text x="1162.00" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="1159" y="549" width="0" height="15" fill="rgb(228,88,3)"/><text x="1162.00" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (4 samples, 0.05%)</title><rect x="1159" y="613" width="0" height="15" fill="rgb(241,183,49)"/><text x="1162.00" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.02%)</title><rect x="1159" y="597" width="0" height="15" fill="rgb(207,126,36)"/><text x="1162.00" y="607.50"></text></g><g><title>hashbrown::rustc_entry::_$LT$impl$u20$hashbrown..map..HashMap$LT$K$C$V$C$S$GT$$GT$::rustc_entry::_$u7b$$u7b$closure$u7d$$u7d$::hbdd1c7067ff6f2a1 (1 samples, 0.01%)</title><rect x="1159" y="581" width="0" height="15" fill="rgb(226,117,14)"/><text x="1162.00" y="591.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="1159" y="565" width="0" height="15" fill="rgb(247,134,25)"/><text x="1162.00" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.06%)</title><rect x="1159" y="629" width="0" height="15" fill="rgb(252,22,10)"/><text x="1162.00" y="639.50"></text></g><g><title>std::collections::hash::map::map_entry (1 samples, 0.01%)</title><rect x="1159" y="613" width="0" height="15" fill="rgb(211,158,8)"/><text x="1162.00" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (2 samples, 0.02%)</title><rect x="1159" y="517" width="0" height="15" fill="rgb(229,79,47)"/><text x="1162.00" y="527.50"></text></g><g><title>core::hash::Hasher::write_i32 (2 samples, 0.02%)</title><rect x="1159" y="501" width="0" height="15" fill="rgb(235,225,42)"/><text x="1162.00" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="1159" y="485" width="0" height="15" fill="rgb(250,129,43)"/><text x="1162.00" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="1159" y="469" width="0" height="15" fill="rgb(205,229,15)"/><text x="1162.00" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="1159" y="453" width="0" height="15" fill="rgb(220,214,2)"/><text x="1162.00" y="463.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="1159" y="437" width="0" height="15" fill="rgb(214,96,5)"/><text x="1162.00" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (1 samples, 0.01%)</title><rect x="1159" y="517" width="1" height="15" fill="rgb(238,222,49)"/><text x="1162.00" y="527.50"></text></g><g><title>core::hash::Hasher::write_u16 (1 samples, 0.01%)</title><rect x="1159" y="501" width="1" height="15" fill="rgb(210,108,36)"/><text x="1162.00" y="511.50"></text></g><g><title>&lt;e2d2::utils::flow::Flow as core::hash::Hash&gt;::hash (4 samples, 0.05%)</title><rect x="1159" y="533" width="1" height="15" fill="rgb(243,14,23)"/><text x="1162.00" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.01%)</title><rect x="1160" y="517" width="0" height="15" fill="rgb(226,87,13)"/><text x="1163.00" y="527.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.01%)</title><rect x="1160" y="501" width="0" height="15" fill="rgb(216,206,48)"/><text x="1163.00" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="1160" y="485" width="0" height="15" fill="rgb(220,229,17)"/><text x="1163.00" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="1160" y="469" width="0" height="15" fill="rgb(245,143,27)"/><text x="1163.00" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="1160" y="453" width="0" height="15" fill="rgb(251,88,39)"/><text x="1163.00" y="463.50"></text></g><g><title>core::cmp::min (1 samples, 0.01%)</title><rect x="1160" y="437" width="0" height="15" fill="rgb(205,64,8)"/><text x="1163.00" y="447.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.01%)</title><rect x="1160" y="421" width="0" height="15" fill="rgb(250,0,54)"/><text x="1163.00" y="431.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.06%)</title><rect x="1159" y="549" width="1" height="15" fill="rgb(238,218,27)"/><text x="1162.00" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="1160" y="533" width="0" height="15" fill="rgb(230,140,47)"/><text x="1163.00" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="1160" y="517" width="0" height="15" fill="rgb(230,105,32)"/><text x="1163.00" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="1160" y="501" width="0" height="15" fill="rgb(227,66,11)"/><text x="1163.00" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="1160" y="485" width="0" height="15" fill="rgb(221,182,43)"/><text x="1163.00" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="1160" y="469" width="0" height="15" fill="rgb(249,26,33)"/><text x="1163.00" y="479.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (7 samples, 0.08%)</title><rect x="1159" y="629" width="1" height="15" fill="rgb(247,68,45)"/><text x="1162.00" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (7 samples, 0.08%)</title><rect x="1159" y="613" width="1" height="15" fill="rgb(236,36,37)"/><text x="1162.00" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (7 samples, 0.08%)</title><rect x="1159" y="597" width="1" height="15" fill="rgb(219,148,1)"/><text x="1162.00" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (7 samples, 0.08%)</title><rect x="1159" y="581" width="1" height="15" fill="rgb(252,221,23)"/><text x="1162.00" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (7 samples, 0.08%)</title><rect x="1159" y="565" width="1" height="15" fill="rgb(241,78,54)"/><text x="1162.00" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.02%)</title><rect x="1160" y="549" width="0" height="15" fill="rgb(250,96,34)"/><text x="1163.00" y="559.50"></text></g><g><title>hashbrown::raw::imp::Group::load (2 samples, 0.02%)</title><rect x="1160" y="533" width="0" height="15" fill="rgb(215,52,22)"/><text x="1163.00" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.02%)</title><rect x="1160" y="517" width="0" height="15" fill="rgb(223,216,23)"/><text x="1163.00" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="1160" y="501" width="0" height="15" fill="rgb(227,171,9)"/><text x="1163.00" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.05%)</title><rect x="1161" y="453" width="0" height="15" fill="rgb(217,85,13)"/><text x="1164.00" y="463.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (3 samples, 0.03%)</title><rect x="1161" y="437" width="0" height="15" fill="rgb(246,152,22)"/><text x="1164.00" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.03%)</title><rect x="1161" y="421" width="0" height="15" fill="rgb(216,13,40)"/><text x="1164.00" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.03%)</title><rect x="1161" y="405" width="0" height="15" fill="rgb(236,47,29)"/><text x="1164.00" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.03%)</title><rect x="1161" y="389" width="0" height="15" fill="rgb(233,140,36)"/><text x="1164.00" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="1161" y="373" width="0" height="15" fill="rgb(240,28,15)"/><text x="1164.00" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="1161" y="357" width="0" height="15" fill="rgb(210,185,52)"/><text x="1164.00" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="1162" y="325" width="1" height="15" fill="rgb(243,28,48)"/><text x="1165.00" y="335.50"></text></g><g><title>__pthread_disable_asynccancel (4 samples, 0.05%)</title><rect x="1163" y="325" width="0" height="15" fill="rgb(238,18,0)"/><text x="1166.00" y="335.50"></text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.01%)</title><rect x="1163" y="325" width="0" height="15" fill="rgb(215,81,17)"/><text x="1166.00" y="335.50"></text></g><g><title>__fget (1 samples, 0.01%)</title><rect x="1166" y="261" width="0" height="15" fill="rgb(212,97,17)"/><text x="1169.00" y="271.50"></text></g><g><title>__fdget_pos (5 samples, 0.06%)</title><rect x="1166" y="277" width="1" height="15" fill="rgb(250,117,37)"/><text x="1169.00" y="287.50"></text></g><g><title>__fget_light (4 samples, 0.05%)</title><rect x="1166" y="261" width="1" height="15" fill="rgb(229,212,26)"/><text x="1169.00" y="271.50"></text></g><g><title>__fget (4 samples, 0.05%)</title><rect x="1166" y="245" width="1" height="15" fill="rgb(231,203,31)"/><text x="1169.00" y="255.50"></text></g><g><title>__fget_light (3 samples, 0.03%)</title><rect x="1167" y="277" width="0" height="15" fill="rgb(213,69,5)"/><text x="1170.00" y="287.50"></text></g><g><title>__fsnotify_parent (1 samples, 0.01%)</title><rect x="1167" y="261" width="0" height="15" fill="rgb(228,109,28)"/><text x="1170.00" y="271.50"></text></g><g><title>__indirect_thunk_start (1 samples, 0.01%)</title><rect x="1167" y="261" width="1" height="15" fill="rgb(222,67,33)"/><text x="1170.00" y="271.50"></text></g><g><title>n_tty_write (1 samples, 0.01%)</title><rect x="1168" y="245" width="0" height="15" fill="rgb(225,179,10)"/><text x="1171.00" y="255.50"></text></g><g><title>__check_heap_object (2 samples, 0.02%)</title><rect x="1168" y="213" width="0" height="15" fill="rgb(218,119,48)"/><text x="1171.00" y="223.50"></text></g><g><title>__check_object_size (5 samples, 0.06%)</title><rect x="1168" y="229" width="1" height="15" fill="rgb(214,129,54)"/><text x="1171.00" y="239.50"></text></g><g><title>__virt_addr_valid (2 samples, 0.02%)</title><rect x="1168" y="213" width="1" height="15" fill="rgb(210,204,10)"/><text x="1171.00" y="223.50"></text></g><g><title>add_wait_queue (1 samples, 0.01%)</title><rect x="1169" y="229" width="0" height="15" fill="rgb(222,125,24)"/><text x="1172.00" y="239.50"></text></g><g><title>copy_user_generic_unrolled (2 samples, 0.02%)</title><rect x="1169" y="229" width="0" height="15" fill="rgb(214,101,10)"/><text x="1172.00" y="239.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="1170" y="213" width="0" height="15" fill="rgb(253,157,18)"/><text x="1173.00" y="223.50"></text></g><g><title>add_wait_queue (1 samples, 0.01%)</title><rect x="1170" y="213" width="0" height="15" fill="rgb(232,99,11)"/><text x="1173.00" y="223.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="1170" y="197" width="0" height="15" fill="rgb(211,36,47)"/><text x="1173.00" y="207.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="1171" y="181" width="0" height="15" fill="rgb(228,26,4)"/><text x="1174.00" y="191.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="1171" y="181" width="0" height="15" fill="rgb(216,63,37)"/><text x="1174.00" y="191.50"></text></g><g><title>tty_flip_buffer_push (3 samples, 0.03%)</title><rect x="1171" y="181" width="0" height="15" fill="rgb(212,194,52)"/><text x="1174.00" y="191.50"></text></g><g><title>queue_work_on (2 samples, 0.02%)</title><rect x="1171" y="165" width="0" height="15" fill="rgb(233,216,22)"/><text x="1174.00" y="175.50"></text></g><g><title>do_output_char (12 samples, 0.14%)</title><rect x="1170" y="213" width="2" height="15" fill="rgb(253,221,17)"/><text x="1173.00" y="223.50"></text></g><g><title>pty_write (9 samples, 0.10%)</title><rect x="1170" y="197" width="2" height="15" fill="rgb(251,177,21)"/><text x="1173.00" y="207.50"></text></g><g><title>tty_insert_flip_string_fixed_flag (2 samples, 0.02%)</title><rect x="1171" y="181" width="1" height="15" fill="rgb(248,101,26)"/><text x="1174.00" y="191.50"></text></g><g><title>down_read (1 samples, 0.01%)</title><rect x="1172" y="213" width="0" height="15" fill="rgb(207,194,36)"/><text x="1175.00" y="223.50"></text></g><g><title>mutex_lock (3 samples, 0.03%)</title><rect x="1172" y="213" width="0" height="15" fill="rgb(233,227,26)"/><text x="1175.00" y="223.50"></text></g><g><title>rcu_all_qs (1 samples, 0.01%)</title><rect x="1172" y="197" width="0" height="15" fill="rgb(233,217,46)"/><text x="1175.00" y="207.50"></text></g><g><title>mutex_unlock (1 samples, 0.01%)</title><rect x="1172" y="213" width="0" height="15" fill="rgb(243,116,40)"/><text x="1175.00" y="223.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="1172" y="197" width="0" height="15" fill="rgb(235,156,16)"/><text x="1175.00" y="207.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="1172" y="197" width="1" height="15" fill="rgb(213,31,5)"/><text x="1175.00" y="207.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="1174" y="149" width="0" height="15" fill="rgb(237,176,53)"/><text x="1177.00" y="159.50"></text></g><g><title>cpumask_next_and (1 samples, 0.01%)</title><rect x="1174" y="149" width="0" height="15" fill="rgb(232,180,4)"/><text x="1177.00" y="159.50"></text></g><g><title>find_first_bit (1 samples, 0.01%)</title><rect x="1174" y="149" width="0" height="15" fill="rgb(219,68,18)"/><text x="1177.00" y="159.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="1175" y="101" width="0" height="15" fill="rgb(219,179,8)"/><text x="1178.00" y="111.50"></text></g><g><title>_raw_spin_lock_irqsave (5 samples, 0.06%)</title><rect x="1175" y="101" width="1" height="15" fill="rgb(219,202,44)"/><text x="1178.00" y="111.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="1176" y="101" width="0" height="15" fill="rgb(238,83,27)"/><text x="1179.00" y="111.50"></text></g><g><title>idle_cpu (1 samples, 0.01%)</title><rect x="1176" y="85" width="0" height="15" fill="rgb(221,198,50)"/><text x="1179.00" y="95.50"></text></g><g><title>select_task_rq_fair (12 samples, 0.14%)</title><rect x="1176" y="101" width="2" height="15" fill="rgb(248,228,5)"/><text x="1179.00" y="111.50"></text></g><g><title>select_idle_sibling (9 samples, 0.10%)</title><rect x="1176" y="85" width="2" height="15" fill="rgb(249,24,6)"/><text x="1179.00" y="95.50"></text></g><g><title>idle_cpu (7 samples, 0.08%)</title><rect x="1177" y="69" width="1" height="15" fill="rgb(215,187,19)"/><text x="1180.00" y="79.50"></text></g><g><title>account_entity_enqueue (2 samples, 0.02%)</title><rect x="1178" y="53" width="0" height="15" fill="rgb(249,113,8)"/><text x="1181.00" y="63.50"></text></g><g><title>__enqueue_entity (2 samples, 0.02%)</title><rect x="1179" y="37" width="0" height="15" fill="rgb(252,136,44)"/><text x="1182.00" y="47.50"></text></g><g><title>enqueue_entity (8 samples, 0.09%)</title><rect x="1178" y="53" width="1" height="15" fill="rgb(238,66,15)"/><text x="1181.00" y="63.50"></text></g><g><title>update_load_avg (2 samples, 0.02%)</title><rect x="1179" y="37" width="0" height="15" fill="rgb(231,176,37)"/><text x="1182.00" y="47.50"></text></g><g><title>activate_task (14 samples, 0.16%)</title><rect x="1178" y="85" width="1" height="15" fill="rgb(221,186,6)"/><text x="1181.00" y="95.50"></text></g><g><title>enqueue_task_fair (14 samples, 0.16%)</title><rect x="1178" y="69" width="1" height="15" fill="rgb(252,140,21)"/><text x="1181.00" y="79.50"></text></g><g><title>update_cfs_group (1 samples, 0.01%)</title><rect x="1179" y="53" width="0" height="15" fill="rgb(214,160,49)"/><text x="1182.00" y="63.50"></text></g><g><title>check_preempt_curr (1 samples, 0.01%)</title><rect x="1179" y="85" width="1" height="15" fill="rgb(253,81,11)"/><text x="1182.00" y="95.50"></text></g><g><title>kthread_data (2 samples, 0.02%)</title><rect x="1180" y="85" width="0" height="15" fill="rgb(234,140,39)"/><text x="1183.00" y="95.50"></text></g><g><title>check_preempt_curr (5 samples, 0.06%)</title><rect x="1180" y="69" width="1" height="15" fill="rgb(254,29,53)"/><text x="1183.00" y="79.50"></text></g><g><title>resched_curr (4 samples, 0.05%)</title><rect x="1180" y="53" width="1" height="15" fill="rgb(246,101,27)"/><text x="1183.00" y="63.50"></text></g><g><title>ttwu_do_activate (26 samples, 0.30%)</title><rect x="1178" y="101" width="3" height="15" fill="rgb(226,28,31)"/><text x="1181.00" y="111.50"></text></g><g><title>ttwu_do_wakeup (9 samples, 0.10%)</title><rect x="1180" y="85" width="1" height="15" fill="rgb(213,92,3)"/><text x="1183.00" y="95.50"></text></g><g><title>resched_curr (2 samples, 0.02%)</title><rect x="1181" y="69" width="0" height="15" fill="rgb(220,3,27)"/><text x="1184.00" y="79.50"></text></g><g><title>native_sched_clock (1 samples, 0.01%)</title><rect x="1181" y="69" width="0" height="15" fill="rgb(212,178,17)"/><text x="1184.00" y="79.50"></text></g><g><title>__queue_work (58 samples, 0.66%)</title><rect x="1174" y="165" width="7" height="15" fill="rgb(250,46,17)"/><text x="1177.00" y="175.50"></text></g><g><title>insert_work (53 samples, 0.60%)</title><rect x="1174" y="149" width="7" height="15" fill="rgb(218,67,48)"/><text x="1177.00" y="159.50"></text></g><g><title>wake_up_process (51 samples, 0.58%)</title><rect x="1175" y="133" width="6" height="15" fill="rgb(233,164,34)"/><text x="1178.00" y="143.50"></text></g><g><title>try_to_wake_up (51 samples, 0.58%)</title><rect x="1175" y="117" width="6" height="15" fill="rgb(211,19,38)"/><text x="1178.00" y="127.50"></text></g><g><title>update_rq_clock (3 samples, 0.03%)</title><rect x="1181" y="101" width="0" height="15" fill="rgb(209,155,6)"/><text x="1184.00" y="111.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.02%)</title><rect x="1181" y="85" width="0" height="15" fill="rgb(212,159,42)"/><text x="1184.00" y="95.50"></text></g><g><title>sched_clock (1 samples, 0.01%)</title><rect x="1181" y="69" width="0" height="15" fill="rgb(241,33,37)"/><text x="1184.00" y="79.50"></text></g><g><title>native_sched_clock (1 samples, 0.01%)</title><rect x="1181" y="53" width="0" height="15" fill="rgb(206,76,50)"/><text x="1184.00" y="63.50"></text></g><g><title>tty_flip_buffer_push (67 samples, 0.76%)</title><rect x="1173" y="197" width="9" height="15" fill="rgb(240,30,36)"/><text x="1176.00" y="207.50"></text></g><g><title>queue_work_on (67 samples, 0.76%)</title><rect x="1173" y="181" width="9" height="15" fill="rgb(214,164,9)"/><text x="1176.00" y="191.50"></text></g><g><title>cpumask_next_and (1 samples, 0.01%)</title><rect x="1181" y="165" width="1" height="15" fill="rgb(219,92,21)"/><text x="1184.00" y="175.50"></text></g><g><title>pty_write (72 samples, 0.82%)</title><rect x="1172" y="213" width="10" height="15" fill="rgb(234,112,27)"/><text x="1175.00" y="223.50"></text></g><g><title>tty_insert_flip_string_fixed_flag (3 samples, 0.03%)</title><rect x="1182" y="197" width="0" height="15" fill="rgb(251,97,5)"/><text x="1185.00" y="207.50"></text></g><g><title>__tty_buffer_request_room (3 samples, 0.03%)</title><rect x="1182" y="181" width="0" height="15" fill="rgb(211,5,30)"/><text x="1185.00" y="191.50"></text></g><g><title>tty_insert_flip_string_fixed_flag (1 samples, 0.01%)</title><rect x="1182" y="213" width="0" height="15" fill="rgb(225,228,28)"/><text x="1185.00" y="223.50"></text></g><g><title>tty_write_room (2 samples, 0.02%)</title><rect x="1182" y="213" width="0" height="15" fill="rgb(249,95,17)"/><text x="1185.00" y="223.50"></text></g><g><title>tty_buffer_space_avail (2 samples, 0.02%)</title><rect x="1182" y="197" width="0" height="15" fill="rgb(205,117,32)"/><text x="1185.00" y="207.50"></text></g><g><title>n_tty_write (101 samples, 1.15%)</title><rect x="1169" y="229" width="14" height="15" fill="rgb(221,108,6)"/><text x="1172.00" y="239.50"></text></g><g><title>up_read (1 samples, 0.01%)</title><rect x="1182" y="213" width="1" height="15" fill="rgb(213,193,11)"/><text x="1185.00" y="223.50"></text></g><g><title>pty_write (1 samples, 0.01%)</title><rect x="1183" y="229" width="0" height="15" fill="rgb(210,43,28)"/><text x="1186.00" y="239.50"></text></g><g><title>tty_ldisc_deref (1 samples, 0.01%)</title><rect x="1183" y="229" width="0" height="15" fill="rgb(251,29,33)"/><text x="1186.00" y="239.50"></text></g><g><title>ldsem_up_read (1 samples, 0.01%)</title><rect x="1183" y="213" width="0" height="15" fill="rgb(237,54,43)"/><text x="1186.00" y="223.50"></text></g><g><title>tty_paranoia_check (1 samples, 0.01%)</title><rect x="1183" y="229" width="0" height="15" fill="rgb(219,101,24)"/><text x="1186.00" y="239.50"></text></g><g><title>tty_write_lock (1 samples, 0.01%)</title><rect x="1183" y="229" width="0" height="15" fill="rgb(243,41,10)"/><text x="1186.00" y="239.50"></text></g><g><title>mutex_trylock (1 samples, 0.01%)</title><rect x="1183" y="213" width="0" height="15" fill="rgb(243,169,39)"/><text x="1186.00" y="223.50"></text></g><g><title>tty_write_room (1 samples, 0.01%)</title><rect x="1183" y="229" width="0" height="15" fill="rgb(237,154,22)"/><text x="1186.00" y="239.50"></text></g><g><title>__vfs_write (119 samples, 1.35%)</title><rect x="1168" y="261" width="15" height="15" fill="rgb(242,217,27)"/><text x="1171.00" y="271.50"></text></g><g><title>tty_write (118 samples, 1.34%)</title><rect x="1168" y="245" width="15" height="15" fill="rgb(244,200,47)"/><text x="1171.00" y="255.50"></text></g><g><title>tty_write_unlock (2 samples, 0.02%)</title><rect x="1183" y="229" width="0" height="15" fill="rgb(210,97,4)"/><text x="1186.00" y="239.50"></text></g><g><title>__wake_up (2 samples, 0.02%)</title><rect x="1183" y="213" width="0" height="15" fill="rgb(226,139,10)"/><text x="1186.00" y="223.50"></text></g><g><title>__wake_up_common_lock (2 samples, 0.02%)</title><rect x="1183" y="197" width="0" height="15" fill="rgb(239,123,53)"/><text x="1186.00" y="207.50"></text></g><g><title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="1183" y="181" width="0" height="15" fill="rgb(228,60,5)"/><text x="1186.00" y="191.50"></text></g><g><title>fsnotify (2 samples, 0.02%)</title><rect x="1183" y="261" width="1" height="15" fill="rgb(224,42,5)"/><text x="1186.00" y="271.50"></text></g><g><title>apparmor_file_permission (2 samples, 0.02%)</title><rect x="1184" y="245" width="0" height="15" fill="rgb(244,128,7)"/><text x="1187.00" y="255.50"></text></g><g><title>rw_verify_area (3 samples, 0.03%)</title><rect x="1184" y="261" width="0" height="15" fill="rgb(224,2,14)"/><text x="1187.00" y="271.50"></text></g><g><title>security_file_permission (1 samples, 0.01%)</title><rect x="1184" y="245" width="0" height="15" fill="rgb(216,96,31)"/><text x="1187.00" y="255.50"></text></g><g><title>apparmor_file_permission (1 samples, 0.01%)</title><rect x="1184" y="229" width="0" height="15" fill="rgb(216,151,49)"/><text x="1187.00" y="239.50"></text></g><g><title>common_file_perm (1 samples, 0.01%)</title><rect x="1184" y="213" width="0" height="15" fill="rgb(212,96,17)"/><text x="1187.00" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (160 samples, 1.82%)</title><rect x="1163" y="325" width="22" height="15" fill="rgb(217,82,27)"/><text x="1166.00" y="335.50">e..</text></g><g><title>do_syscall_64 (159 samples, 1.81%)</title><rect x="1163" y="309" width="22" height="15" fill="rgb(245,81,34)"/><text x="1166.00" y="319.50">d..</text></g><g><title>sys_write (139 samples, 1.58%)</title><rect x="1166" y="293" width="19" height="15" fill="rgb(239,61,49)"/><text x="1169.00" y="303.50"></text></g><g><title>vfs_write (130 samples, 1.48%)</title><rect x="1167" y="277" width="18" height="15" fill="rgb(222,134,22)"/><text x="1170.00" y="287.50"></text></g><g><title>tty_write (4 samples, 0.05%)</title><rect x="1184" y="261" width="1" height="15" fill="rgb(239,156,43)"/><text x="1187.00" y="271.50"></text></g><g><title>&lt;std::io::stdio::Maybe&lt;W&gt; as std::io::Write&gt;::write (181 samples, 2.05%)</title><rect x="1161" y="405" width="25" height="15" fill="rgb(219,32,29)"/><text x="1164.00" y="415.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (181 samples, 2.05%)</title><rect x="1161" y="389" width="25" height="15" fill="rgb(229,153,17)"/><text x="1164.00" y="399.50">&lt;..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (181 samples, 2.05%)</title><rect x="1161" y="373" width="25" height="15" fill="rgb(245,169,21)"/><text x="1164.00" y="383.50">&lt;..</text></g><g><title>std::sys::unix::fd::FileDesc::write (181 samples, 2.05%)</title><rect x="1161" y="357" width="25" height="15" fill="rgb(209,205,4)"/><text x="1164.00" y="367.50">s..</text></g><g><title>__libc_write (180 samples, 2.04%)</title><rect x="1162" y="341" width="24" height="15" fill="rgb(249,67,8)"/><text x="1165.00" y="351.50">_..</text></g><g><title>syscall_return_via_sysret (7 samples, 0.08%)</title><rect x="1185" y="325" width="1" height="15" fill="rgb(241,157,34)"/><text x="1188.00" y="335.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (182 samples, 2.07%)</title><rect x="1161" y="453" width="25" height="15" fill="rgb(236,14,47)"/><text x="1164.00" y="463.50">&lt;..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (182 samples, 2.07%)</title><rect x="1161" y="437" width="25" height="15" fill="rgb(211,106,29)"/><text x="1164.00" y="447.50">&lt;..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (182 samples, 2.07%)</title><rect x="1161" y="421" width="25" height="15" fill="rgb(248,204,8)"/><text x="1164.00" y="431.50">s..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::drain (1 samples, 0.01%)</title><rect x="1186" y="405" width="0" height="15" fill="rgb(217,169,46)"/><text x="1189.00" y="415.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (187 samples, 2.12%)</title><rect x="1161" y="469" width="25" height="15" fill="rgb(232,178,47)"/><text x="1164.00" y="479.50">&lt;..</text></g><g><title>std::memchr::memrchr (1 samples, 0.01%)</title><rect x="1186" y="453" width="0" height="15" fill="rgb(213,71,29)"/><text x="1189.00" y="463.50"></text></g><g><title>std::sys::unix::memchr::memrchr (1 samples, 0.01%)</title><rect x="1186" y="437" width="0" height="15" fill="rgb(215,77,21)"/><text x="1189.00" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.01%)</title><rect x="1186" y="421" width="0" height="15" fill="rgb(223,62,38)"/><text x="1189.00" y="431.50"></text></g><g><title>__memrchr_avx2 (1 samples, 0.01%)</title><rect x="1186" y="405" width="0" height="15" fill="rgb(232,147,4)"/><text x="1189.00" y="415.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (192 samples, 2.18%)</title><rect x="1160" y="517" width="26" height="15" fill="rgb(210,3,51)"/><text x="1163.00" y="527.50">&lt;..</text></g><g><title>std::io::Write::write_all (190 samples, 2.16%)</title><rect x="1161" y="501" width="25" height="15" fill="rgb(237,156,49)"/><text x="1164.00" y="511.50">s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (188 samples, 2.13%)</title><rect x="1161" y="485" width="25" height="15" fill="rgb(243,38,23)"/><text x="1164.00" y="495.50">&lt;..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.01%)</title><rect x="1186" y="469" width="0" height="15" fill="rgb(243,172,48)"/><text x="1189.00" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.01%)</title><rect x="1186" y="453" width="0" height="15" fill="rgb(237,186,38)"/><text x="1189.00" y="463.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.01%)</title><rect x="1186" y="437" width="0" height="15" fill="rgb(252,13,11)"/><text x="1189.00" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="1186" y="421" width="0" height="15" fill="rgb(244,145,10)"/><text x="1189.00" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="1186" y="405" width="0" height="15" fill="rgb(234,80,24)"/><text x="1189.00" y="415.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="1186" y="389" width="0" height="15" fill="rgb(239,26,21)"/><text x="1189.00" y="399.50"></text></g><g><title>core::mem::swap (1 samples, 0.01%)</title><rect x="1186" y="373" width="0" height="15" fill="rgb(217,141,30)"/><text x="1189.00" y="383.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.01%)</title><rect x="1186" y="357" width="0" height="15" fill="rgb(217,12,0)"/><text x="1189.00" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="1186" y="341" width="0" height="15" fill="rgb(215,175,20)"/><text x="1189.00" y="351.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="1186" y="437" width="0" height="15" fill="rgb(226,58,0)"/><text x="1189.00" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="1186" y="421" width="0" height="15" fill="rgb(213,30,33)"/><text x="1189.00" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (1 samples, 0.01%)</title><rect x="1186" y="405" width="0" height="15" fill="rgb(222,142,2)"/><text x="1189.00" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.01%)</title><rect x="1186" y="389" width="0" height="15" fill="rgb(213,101,10)"/><text x="1189.00" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="1186" y="373" width="0" height="15" fill="rgb(231,199,51)"/><text x="1189.00" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.01%)</title><rect x="1186" y="357" width="0" height="15" fill="rgb(209,202,16)"/><text x="1189.00" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="1186" y="341" width="0" height="15" fill="rgb(235,5,2)"/><text x="1189.00" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="1186" y="325" width="0" height="15" fill="rgb(243,207,43)"/><text x="1189.00" y="335.50"></text></g><g><title>std::io::Write::write_fmt (197 samples, 2.24%)</title><rect x="1160" y="549" width="27" height="15" fill="rgb(238,164,35)"/><text x="1163.00" y="559.50">s..</text></g><g><title>core::fmt::write (197 samples, 2.24%)</title><rect x="1160" y="533" width="27" height="15" fill="rgb(224,120,38)"/><text x="1163.00" y="543.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4 samples, 0.05%)</title><rect x="1186" y="517" width="1" height="15" fill="rgb(244,124,1)"/><text x="1189.00" y="527.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (4 samples, 0.05%)</title><rect x="1186" y="501" width="1" height="15" fill="rgb(254,16,25)"/><text x="1189.00" y="511.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="1186" y="485" width="1" height="15" fill="rgb(251,85,39)"/><text x="1189.00" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="1186" y="469" width="1" height="15" fill="rgb(235,126,33)"/><text x="1189.00" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="1186" y="453" width="1" height="15" fill="rgb(217,80,48)"/><text x="1189.00" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.01%)</title><rect x="1186" y="437" width="1" height="15" fill="rgb(236,182,35)"/><text x="1189.00" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.01%)</title><rect x="1186" y="421" width="1" height="15" fill="rgb(215,80,42)"/><text x="1189.00" y="431.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.01%)</title><rect x="1186" y="405" width="1" height="15" fill="rgb(209,40,4)"/><text x="1189.00" y="415.50"></text></g><g><title>intel_pmu_handle_irq (1 samples, 0.01%)</title><rect x="1187" y="261" width="0" height="15" fill="rgb(245,223,33)"/><text x="1190.00" y="271.50"></text></g><g><title>native_flush_tlb_one_user (1 samples, 0.01%)</title><rect x="1187" y="261" width="0" height="15" fill="rgb(238,86,42)"/><text x="1190.00" y="271.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (204 samples, 2.32%)</title><rect x="1160" y="565" width="27" height="15" fill="rgb(252,64,29)"/><text x="1163.00" y="575.50">&lt;..</text></g><g><title>std::io::stdio::Stdout::lock (7 samples, 0.08%)</title><rect x="1187" y="549" width="0" height="15" fill="rgb(232,130,35)"/><text x="1190.00" y="559.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (7 samples, 0.08%)</title><rect x="1187" y="533" width="0" height="15" fill="rgb(231,85,39)"/><text x="1190.00" y="543.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (7 samples, 0.08%)</title><rect x="1187" y="517" width="0" height="15" fill="rgb(252,196,25)"/><text x="1190.00" y="527.50"></text></g><g><title>__GI___pthread_mutex_lock (7 samples, 0.08%)</title><rect x="1187" y="501" width="0" height="15" fill="rgb(245,197,48)"/><text x="1190.00" y="511.50"></text></g><g><title>__lll_lock_wait (6 samples, 0.07%)</title><rect x="1187" y="485" width="0" height="15" fill="rgb(220,3,9)"/><text x="1190.00" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="1187" y="469" width="0" height="15" fill="rgb(216,184,30)"/><text x="1190.00" y="479.50"></text></g><g><title>do_syscall_64 (6 samples, 0.07%)</title><rect x="1187" y="453" width="0" height="15" fill="rgb(249,103,46)"/><text x="1190.00" y="463.50"></text></g><g><title>sys_futex (6 samples, 0.07%)</title><rect x="1187" y="437" width="0" height="15" fill="rgb(209,172,5)"/><text x="1190.00" y="447.50"></text></g><g><title>do_futex (6 samples, 0.07%)</title><rect x="1187" y="421" width="0" height="15" fill="rgb(234,184,8)"/><text x="1190.00" y="431.50"></text></g><g><title>futex_wait (6 samples, 0.07%)</title><rect x="1187" y="405" width="0" height="15" fill="rgb(241,59,52)"/><text x="1190.00" y="415.50"></text></g><g><title>futex_wait_queue_me (6 samples, 0.07%)</title><rect x="1187" y="389" width="0" height="15" fill="rgb(221,26,9)"/><text x="1190.00" y="399.50"></text></g><g><title>schedule (6 samples, 0.07%)</title><rect x="1187" y="373" width="0" height="15" fill="rgb(234,58,53)"/><text x="1190.00" y="383.50"></text></g><g><title>__schedule (6 samples, 0.07%)</title><rect x="1187" y="357" width="0" height="15" fill="rgb(215,137,49)"/><text x="1190.00" y="367.50"></text></g><g><title>finish_task_switch (6 samples, 0.07%)</title><rect x="1187" y="341" width="0" height="15" fill="rgb(228,214,34)"/><text x="1190.00" y="351.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.07%)</title><rect x="1187" y="325" width="0" height="15" fill="rgb(240,179,37)"/><text x="1190.00" y="335.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.07%)</title><rect x="1187" y="309" width="0" height="15" fill="rgb(211,196,20)"/><text x="1190.00" y="319.50"></text></g><g><title>intel_pmu_enable_all (6 samples, 0.07%)</title><rect x="1187" y="293" width="0" height="15" fill="rgb(219,204,22)"/><text x="1190.00" y="303.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (6 samples, 0.07%)</title><rect x="1187" y="277" width="0" height="15" fill="rgb(253,59,54)"/><text x="1190.00" y="287.50"></text></g><g><title>native_write_msr (4 samples, 0.05%)</title><rect x="1187" y="261" width="0" height="15" fill="rgb(205,57,17)"/><text x="1190.00" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="1187" y="533" width="1" height="15" fill="rgb(209,143,12)"/><text x="1190.00" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.01%)</title><rect x="1187" y="517" width="1" height="15" fill="rgb(231,90,21)"/><text x="1190.00" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.01%)</title><rect x="1187" y="501" width="1" height="15" fill="rgb(243,83,20)"/><text x="1190.00" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (3,022 samples, 34.31%)</title><rect x="783" y="661" width="405" height="15" fill="rgb(254,200,14)"/><text x="786.00" y="671.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;..</text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h98ce98c98d7b80a2 (3,022 samples, 34.31%)</title><rect x="783" y="645" width="405" height="15" fill="rgb(243,54,17)"/><text x="786.00" y="655.50">pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h..</text></g><g><title>std::io::stdio::_print (206 samples, 2.34%)</title><rect x="1160" y="629" width="28" height="15" fill="rgb(213,217,12)"/><text x="1163.00" y="639.50">s..</text></g><g><title>std::io::stdio::print_to (206 samples, 2.34%)</title><rect x="1160" y="613" width="28" height="15" fill="rgb(242,159,51)"/><text x="1163.00" y="623.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (206 samples, 2.34%)</title><rect x="1160" y="597" width="28" height="15" fill="rgb(221,220,33)"/><text x="1163.00" y="607.50">s..</text></g><g><title>std::io::stdio::print_to::_$u7b$$u7b$closure$u7d$$u7d$::h0249537fb9ef42b4 (206 samples, 2.34%)</title><rect x="1160" y="581" width="28" height="15" fill="rgb(230,140,51)"/><text x="1163.00" y="591.50">s..</text></g><g><title>std::io::stdio::stdout (2 samples, 0.02%)</title><rect x="1187" y="565" width="1" height="15" fill="rgb(246,135,3)"/><text x="1190.00" y="575.50"></text></g><g><title>std::io::lazy::Lazy&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="1187" y="549" width="1" height="15" fill="rgb(206,90,43)"/><text x="1190.00" y="559.50"></text></g><g><title>std::sys_common::mutex::Mutex::lock (1 samples, 0.01%)</title><rect x="1188" y="533" width="0" height="15" fill="rgb(214,66,7)"/><text x="1191.00" y="543.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (1 samples, 0.01%)</title><rect x="1188" y="517" width="0" height="15" fill="rgb(219,225,47)"/><text x="1191.00" y="527.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (1 samples, 0.01%)</title><rect x="1188" y="501" width="0" height="15" fill="rgb(227,71,8)"/><text x="1191.00" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.01%)</title><rect x="1188" y="485" width="0" height="15" fill="rgb(209,211,46)"/><text x="1191.00" y="495.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (3,024 samples, 34.33%)</title><rect x="783" y="725" width="405" height="15" fill="rgb(251,207,44)"/><text x="786.00" y="735.50">&lt;e2d2::operators::composition_batch::CompositionBatch a..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (3,024 samples, 34.33%)</title><rect x="783" y="709" width="405" height="15" fill="rgb(206,75,34)"/><text x="786.00" y="719.50">&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as ..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (3,024 samples, 34.33%)</title><rect x="783" y="693" width="405" height="15" fill="rgb(227,46,11)"/><text x="786.00" y="703.50">&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as ..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (3,024 samples, 34.33%)</title><rect x="783" y="677" width="405" height="15" fill="rgb(254,100,6)"/><text x="786.00" y="687.50">&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; ..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2 samples, 0.02%)</title><rect x="1188" y="661" width="0" height="15" fill="rgb(249,147,34)"/><text x="1191.00" y="671.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (2 samples, 0.02%)</title><rect x="1188" y="645" width="0" height="15" fill="rgb(226,145,24)"/><text x="1191.00" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnMut&lt;A&gt;&gt;::call_mut (2 samples, 0.02%)</title><rect x="1188" y="629" width="0" height="15" fill="rgb(236,134,35)"/><text x="1191.00" y="639.50"></text></g><g><title>pvn_tls::nf::validator::_$u7b$$u7b$closure$u7d$$u7d$::h3f779dbe4e978258 (1 samples, 0.01%)</title><rect x="1188" y="613" width="0" height="15" fill="rgb(209,68,35)"/><text x="1191.00" y="623.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (3,025 samples, 34.34%)</title><rect x="783" y="757" width="405" height="15" fill="rgb(220,214,27)"/><text x="786.00" y="767.50">&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (3,025 samples, 34.34%)</title><rect x="783" y="741" width="405" height="15" fill="rgb(228,42,18)"/><text x="786.00" y="751.50">&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2..</text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::send_q (1 samples, 0.01%)</title><rect x="1188" y="725" width="0" height="15" fill="rgb(225,179,0)"/><text x="1191.00" y="735.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketTx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::send (1 samples, 0.01%)</title><rect x="1188" y="709" width="0" height="15" fill="rgb(209,107,41)"/><text x="1191.00" y="719.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketTx&gt;::send (1 samples, 0.01%)</title><rect x="1188" y="693" width="0" height="15" fill="rgb(224,145,31)"/><text x="1191.00" y="703.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::send_queue (1 samples, 0.01%)</title><rect x="1188" y="677" width="0" height="15" fill="rgb(247,186,44)"/><text x="1191.00" y="687.50"></text></g><g><title>send_pkts (1 samples, 0.01%)</title><rect x="1188" y="661" width="0" height="15" fill="rgb(252,25,30)"/><text x="1191.00" y="671.50"></text></g><g><title>rte_eth_tx_burst (1 samples, 0.01%)</title><rect x="1188" y="645" width="0" height="15" fill="rgb(212,193,1)"/><text x="1191.00" y="655.50"></text></g><g><title>i40e_xmit_pkts_vec (1 samples, 0.01%)</title><rect x="1188" y="629" width="0" height="15" fill="rgb(253,199,5)"/><text x="1191.00" y="639.50"></text></g><g><title>i40e_xmit_fixed_burst_vec (1 samples, 0.01%)</title><rect x="1188" y="613" width="0" height="15" fill="rgb(243,191,13)"/><text x="1191.00" y="623.50"></text></g><g><title>vtx (1 samples, 0.01%)</title><rect x="1188" y="597" width="0" height="15" fill="rgb(235,44,46)"/><text x="1191.00" y="607.50"></text></g><g><title>vtx1 (1 samples, 0.01%)</title><rect x="1188" y="581" width="0" height="15" fill="rgb(208,156,32)"/><text x="1191.00" y="591.50"></text></g><g><title>sched-3 (3,061 samples, 34.75%)</title><rect x="778" y="981" width="410" height="15" fill="rgb(250,202,50)"/><text x="781.00" y="991.50">sched-3</text></g><g><title>__GI___clone (3,046 samples, 34.58%)</title><rect x="780" y="965" width="408" height="15" fill="rgb(242,154,34)"/><text x="783.00" y="975.50">__GI___clone</text></g><g><title>start_thread (3,046 samples, 34.58%)</title><rect x="780" y="949" width="408" height="15" fill="rgb(247,2,31)"/><text x="783.00" y="959.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,046 samples, 34.58%)</title><rect x="780" y="933" width="408" height="15" fill="rgb(248,221,25)"/><text x="783.00" y="943.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys_common::thread::start_thread (3,046 samples, 34.58%)</title><rect x="780" y="917" width="408" height="15" fill="rgb(239,154,19)"/><text x="783.00" y="927.50">std::sys_common::thread::start_thread</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3,046 samples, 34.58%)</title><rect x="780" y="901" width="408" height="15" fill="rgb(220,144,36)"/><text x="783.00" y="911.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3,046 samples, 34.58%)</title><rect x="780" y="885" width="408" height="15" fill="rgb(248,1,20)"/><text x="783.00" y="895.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;..</text></g><g><title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f59d60f147d050 (3,046 samples, 34.58%)</title><rect x="780" y="869" width="408" height="15" fill="rgb(207,99,31)"/><text x="783.00" y="879.50">core::ops::function::FnOnce::call_once$u7b$$u7b$vtable...</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,046 samples, 34.58%)</title><rect x="780" y="853" width="408" height="15" fill="rgb(241,165,0)"/><text x="783.00" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$closure$u7d$$u7d$::h008d40440c8a9600 (3,046 samples, 34.58%)</title><rect x="780" y="837" width="408" height="15" fill="rgb(229,135,47)"/><text x="783.00" y="847.50">e2d2::scheduler::context::NetBricksContext::start_sched..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (3,038 samples, 34.49%)</title><rect x="781" y="821" width="407" height="15" fill="rgb(228,221,50)"/><text x="784.00" y="831.50">e2d2::scheduler::standalone_scheduler::StandaloneSchedu..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (3,038 samples, 34.49%)</title><rect x="781" y="805" width="407" height="15" fill="rgb(211,97,48)"/><text x="784.00" y="815.50">e2d2::scheduler::standalone_scheduler::StandaloneSchedu..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_loop (3,038 samples, 34.49%)</title><rect x="781" y="789" width="407" height="15" fill="rgb(230,35,24)"/><text x="784.00" y="799.50">e2d2::scheduler::standalone_scheduler::StandaloneSchedu..</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::execute_internal (3,038 samples, 34.49%)</title><rect x="781" y="773" width="407" height="15" fill="rgb(252,133,32)"/><text x="784.00" y="783.50">e2d2::scheduler::standalone_scheduler::StandaloneSchedu..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (1 samples, 0.01%)</title><rect x="1188" y="757" width="0" height="15" fill="rgb(206,172,13)"/><text x="1191.00" y="767.50"></text></g><g><title>std::sync::mpsc::sync::Packet&lt;T&gt;::try_recv (1 samples, 0.01%)</title><rect x="1188" y="741" width="0" height="15" fill="rgb(247,40,27)"/><text x="1191.00" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="1188" y="725" width="0" height="15" fill="rgb(247,136,10)"/><text x="1191.00" y="735.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (1 samples, 0.01%)</title><rect x="1188" y="709" width="0" height="15" fill="rgb(215,90,46)"/><text x="1191.00" y="719.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (1 samples, 0.01%)</title><rect x="1188" y="693" width="0" height="15" fill="rgb(244,35,20)"/><text x="1191.00" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.01%)</title><rect x="1188" y="677" width="0" height="15" fill="rgb(206,47,50)"/><text x="1191.00" y="687.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.01%)</title><rect x="1188" y="853" width="0" height="15" fill="rgb(225,113,49)"/><text x="1191.00" y="863.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="1188" y="837" width="0" height="15" fill="rgb(220,229,47)"/><text x="1191.00" y="847.50"></text></g><g><title>ghes_notify_nmi (1 samples, 0.01%)</title><rect x="1188" y="549" width="1" height="15" fill="rgb(205,92,15)"/><text x="1191.00" y="559.50"></text></g><g><title>intel_pmu_handle_irq (1 samples, 0.01%)</title><rect x="1189" y="549" width="0" height="15" fill="rgb(242,206,22)"/><text x="1192.00" y="559.50"></text></g><g><title>__set_cpus_allowed_ptr (6 samples, 0.07%)</title><rect x="1188" y="693" width="1" height="15" fill="rgb(210,144,49)"/><text x="1191.00" y="703.50"></text></g><g><title>stop_one_cpu (6 samples, 0.07%)</title><rect x="1188" y="677" width="1" height="15" fill="rgb(233,127,30)"/><text x="1191.00" y="687.50"></text></g><g><title>_cond_resched (6 samples, 0.07%)</title><rect x="1188" y="661" width="1" height="15" fill="rgb(228,125,45)"/><text x="1191.00" y="671.50"></text></g><g><title>__schedule (6 samples, 0.07%)</title><rect x="1188" y="645" width="1" height="15" fill="rgb(233,19,23)"/><text x="1191.00" y="655.50"></text></g><g><title>finish_task_switch (6 samples, 0.07%)</title><rect x="1188" y="629" width="1" height="15" fill="rgb(234,99,8)"/><text x="1191.00" y="639.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.07%)</title><rect x="1188" y="613" width="1" height="15" fill="rgb(252,48,12)"/><text x="1191.00" y="623.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.07%)</title><rect x="1188" y="597" width="1" height="15" fill="rgb(225,15,29)"/><text x="1191.00" y="607.50"></text></g><g><title>intel_pmu_enable_all (6 samples, 0.07%)</title><rect x="1188" y="581" width="1" height="15" fill="rgb(251,163,49)"/><text x="1191.00" y="591.50"></text></g><g><title>__intel_pmu_enable_all.constprop.19 (6 samples, 0.07%)</title><rect x="1188" y="565" width="1" height="15" fill="rgb(208,158,0)"/><text x="1191.00" y="575.50"></text></g><g><title>native_write_msr (4 samples, 0.05%)</title><rect x="1189" y="549" width="0" height="15" fill="rgb(232,9,37)"/><text x="1192.00" y="559.50"></text></g><g><title>__pthread_setaffinity_new (7 samples, 0.08%)</title><rect x="1188" y="773" width="1" height="15" fill="rgb(227,155,17)"/><text x="1191.00" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="1188" y="757" width="1" height="15" fill="rgb(243,17,52)"/><text x="1191.00" y="767.50"></text></g><g><title>do_syscall_64 (7 samples, 0.08%)</title><rect x="1188" y="741" width="1" height="15" fill="rgb(229,50,42)"/><text x="1191.00" y="751.50"></text></g><g><title>sys_sched_setaffinity (7 samples, 0.08%)</title><rect x="1188" y="725" width="1" height="15" fill="rgb(240,104,2)"/><text x="1191.00" y="735.50"></text></g><g><title>sched_setaffinity (7 samples, 0.08%)</title><rect x="1188" y="709" width="1" height="15" fill="rgb(243,109,36)"/><text x="1191.00" y="719.50"></text></g><g><title>free_cpumask_var (1 samples, 0.01%)</title><rect x="1189" y="693" width="0" height="15" fill="rgb(253,173,4)"/><text x="1192.00" y="703.50"></text></g><g><title>kfree (1 samples, 0.01%)</title><rect x="1189" y="677" width="0" height="15" fill="rgb(221,128,29)"/><text x="1192.00" y="687.50"></text></g><g><title>__slab_free (1 samples, 0.01%)</title><rect x="1189" y="661" width="0" height="15" fill="rgb(237,210,45)"/><text x="1192.00" y="671.50"></text></g><g><title>cmpxchg_double_slab.isra.61 (1 samples, 0.01%)</title><rect x="1189" y="645" width="0" height="15" fill="rgb(217,99,24)"/><text x="1192.00" y="655.50"></text></g><g><title>all (8,808 samples, 100%)</title><rect x="10" y="997" width="1180" height="15" fill="rgb(227,187,20)"/><text x="13.00" y="1007.50"></text></g><g><title>sched-4 (9 samples, 0.10%)</title><rect x="1188" y="981" width="2" height="15" fill="rgb(218,201,48)"/><text x="1191.00" y="991.50"></text></g><g><title>__GI___clone (9 samples, 0.10%)</title><rect x="1188" y="965" width="2" height="15" fill="rgb(244,41,16)"/><text x="1191.00" y="975.50"></text></g><g><title>start_thread (9 samples, 0.10%)</title><rect x="1188" y="949" width="2" height="15" fill="rgb(236,112,28)"/><text x="1191.00" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 0.10%)</title><rect x="1188" y="933" width="2" height="15" fill="rgb(226,96,32)"/><text x="1191.00" y="943.50"></text></g><g><title>std::sys_common::thread::start_thread (9 samples, 0.10%)</title><rect x="1188" y="917" width="2" height="15" fill="rgb(243,178,25)"/><text x="1191.00" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.10%)</title><rect x="1188" y="901" width="2" height="15" fill="rgb(252,210,34)"/><text x="1191.00" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.10%)</title><rect x="1188" y="885" width="2" height="15" fill="rgb(220,161,42)"/><text x="1191.00" y="895.50"></text></g><g><title>core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h85f59d60f147d050 (9 samples, 0.10%)</title><rect x="1188" y="869" width="2" height="15" fill="rgb(249,174,27)"/><text x="1191.00" y="879.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.09%)</title><rect x="1188" y="853" width="2" height="15" fill="rgb(250,76,12)"/><text x="1191.00" y="863.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_$u7b$$u7b$closure$u7d$$u7d$::h008d40440c8a9600 (8 samples, 0.09%)</title><rect x="1188" y="837" width="2" height="15" fill="rgb(251,65,49)"/><text x="1191.00" y="847.50"></text></g><g><title>e2d2::interface::dpdk::init_thread (8 samples, 0.09%)</title><rect x="1188" y="821" width="2" height="15" fill="rgb(207,156,1)"/><text x="1191.00" y="831.50"></text></g><g><title>init_thread (8 samples, 0.09%)</title><rect x="1188" y="805" width="2" height="15" fill="rgb(220,167,22)"/><text x="1191.00" y="815.50"></text></g><g><title>rte_thread_set_affinity (8 samples, 0.09%)</title><rect x="1188" y="789" width="2" height="15" fill="rgb(242,209,17)"/><text x="1191.00" y="799.50"></text></g><g><title>eal_cpuset_socket_id (1 samples, 0.01%)</title><rect x="1189" y="773" width="1" height="15" fill="rgb(226,221,6)"/><text x="1192.00" y="783.50"></text></g><g><title>eal_cpu_socket_id (1 samples, 0.01%)</title><rect x="1189" y="757" width="1" height="15" fill="rgb(214,39,26)"/><text x="1192.00" y="767.50"></text></g><g><title>__access (1 samples, 0.01%)</title><rect x="1189" y="741" width="1" height="15" fill="rgb(238,61,4)"/><text x="1192.00" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1189" y="725" width="1" height="15" fill="rgb(220,205,17)"/><text x="1192.00" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1189" y="709" width="1" height="15" fill="rgb(216,71,52)"/><text x="1192.00" y="719.50"></text></g><g><title>sys_access (1 samples, 0.01%)</title><rect x="1189" y="693" width="1" height="15" fill="rgb(217,29,40)"/><text x="1192.00" y="703.50"></text></g><g><title>user_path_at_empty (1 samples, 0.01%)</title><rect x="1189" y="677" width="1" height="15" fill="rgb(240,81,37)"/><text x="1192.00" y="687.50"></text></g><g><title>filename_lookup (1 samples, 0.01%)</title><rect x="1189" y="661" width="1" height="15" fill="rgb(235,176,40)"/><text x="1192.00" y="671.50"></text></g><g><title>path_lookupat (1 samples, 0.01%)</title><rect x="1189" y="645" width="1" height="15" fill="rgb(215,190,35)"/><text x="1192.00" y="655.50"></text></g><g><title>walk_component (1 samples, 0.01%)</title><rect x="1189" y="629" width="1" height="15" fill="rgb(238,100,20)"/><text x="1192.00" y="639.50"></text></g><g><title>lookup_fast (1 samples, 0.01%)</title><rect x="1189" y="613" width="1" height="15" fill="rgb(246,145,23)"/><text x="1192.00" y="623.50"></text></g><g><title>kernfs_dop_revalidate (1 samples, 0.01%)</title><rect x="1189" y="597" width="1" height="15" fill="rgb(231,48,41)"/><text x="1192.00" y="607.50"></text></g></g></svg>