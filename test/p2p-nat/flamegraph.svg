<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="757.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="757.00"> </text><svg id="frames" x="10" width="1180"><g><title>pvn_p2p_nat::main (3,214 samples, 0.86%)</title><rect x="0.0972%" y="677" width="0.8581%" height="15" fill="rgb(227,0,7)"/><text x="0.3472%" y="687.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (3,214 samples, 0.86%)</title><rect x="0.0972%" y="661" width="0.8581%" height="15" fill="rgb(217,0,24)"/><text x="0.3472%" y="671.50"></text></g><g><title>init_system_whitelisted (3,214 samples, 0.86%)</title><rect x="0.0972%" y="645" width="0.8581%" height="15" fill="rgb(221,193,54)"/><text x="0.3472%" y="655.50"></text></g><g><title>init_eal (3,214 samples, 0.86%)</title><rect x="0.0972%" y="629" width="0.8581%" height="15" fill="rgb(248,212,6)"/><text x="0.3472%" y="639.50"></text></g><g><title>rte_eal_init (3,214 samples, 0.86%)</title><rect x="0.0972%" y="613" width="0.8581%" height="15" fill="rgb(208,68,35)"/><text x="0.3472%" y="623.50"></text></g><g><title>rte_eal_memory_init (3,214 samples, 0.86%)</title><rect x="0.0972%" y="597" width="0.8581%" height="15" fill="rgb(232,128,0)"/><text x="0.3472%" y="607.50"></text></g><g><title>rte_eal_hugepage_init (3,214 samples, 0.86%)</title><rect x="0.0972%" y="581" width="0.8581%" height="15" fill="rgb(207,160,47)"/><text x="0.3472%" y="591.50"></text></g><g><title>map_all_hugepages (3,214 samples, 0.86%)</title><rect x="0.0972%" y="565" width="0.8581%" height="15" fill="rgb(228,23,34)"/><text x="0.3472%" y="575.50"></text></g><g><title>__GI___mmap64 (3,213 samples, 0.86%)</title><rect x="0.0975%" y="549" width="0.8579%" height="15" fill="rgb(218,30,26)"/><text x="0.3475%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,213 samples, 0.86%)</title><rect x="0.0975%" y="533" width="0.8579%" height="15" fill="rgb(220,122,19)"/><text x="0.3475%" y="543.50"></text></g><g><title>do_syscall_64 (3,213 samples, 0.86%)</title><rect x="0.0975%" y="517" width="0.8579%" height="15" fill="rgb(250,228,42)"/><text x="0.3475%" y="527.50"></text></g><g><title>sys_mmap (3,213 samples, 0.86%)</title><rect x="0.0975%" y="501" width="0.8579%" height="15" fill="rgb(240,193,28)"/><text x="0.3475%" y="511.50"></text></g><g><title>sys_mmap_pgoff (3,213 samples, 0.86%)</title><rect x="0.0975%" y="485" width="0.8579%" height="15" fill="rgb(216,20,37)"/><text x="0.3475%" y="495.50"></text></g><g><title>vm_mmap_pgoff (3,213 samples, 0.86%)</title><rect x="0.0975%" y="469" width="0.8579%" height="15" fill="rgb(206,188,39)"/><text x="0.3475%" y="479.50"></text></g><g><title>__mm_populate (3,213 samples, 0.86%)</title><rect x="0.0975%" y="453" width="0.8579%" height="15" fill="rgb(217,207,13)"/><text x="0.3475%" y="463.50"></text></g><g><title>populate_vma_page_range (3,213 samples, 0.86%)</title><rect x="0.0975%" y="437" width="0.8579%" height="15" fill="rgb(231,73,38)"/><text x="0.3475%" y="447.50"></text></g><g><title>__get_user_pages (3,213 samples, 0.86%)</title><rect x="0.0975%" y="421" width="0.8579%" height="15" fill="rgb(225,20,46)"/><text x="0.3475%" y="431.50"></text></g><g><title>follow_hugetlb_page (3,213 samples, 0.86%)</title><rect x="0.0975%" y="405" width="0.8579%" height="15" fill="rgb(210,31,41)"/><text x="0.3475%" y="415.50"></text></g><g><title>hugetlb_fault (3,173 samples, 0.85%)</title><rect x="0.1081%" y="389" width="0.8472%" height="15" fill="rgb(221,200,47)"/><text x="0.3581%" y="399.50"></text></g><g><title>hugetlb_no_page (3,173 samples, 0.85%)</title><rect x="0.1081%" y="373" width="0.8472%" height="15" fill="rgb(226,26,5)"/><text x="0.3581%" y="383.50"></text></g><g><title>clear_page_erms (3,016 samples, 0.81%)</title><rect x="0.1501%" y="357" width="0.8053%" height="15" fill="rgb(249,33,26)"/><text x="0.4001%" y="367.50"></text></g><g><title>[unknown] (3,372 samples, 0.90%)</title><rect x="0.0558%" y="693" width="0.9003%" height="15" fill="rgb(235,183,28)"/><text x="0.3058%" y="703.50"></text></g><g><title>e2d2::interface::port::phy_port::PmdPort::new_dpdk_port (461 samples, 0.12%)</title><rect x="0.9865%" y="597" width="0.1231%" height="15" fill="rgb(221,5,38)"/><text x="1.2365%" y="607.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (465 samples, 0.12%)</title><rect x="0.9865%" y="613" width="0.1242%" height="15" fill="rgb(247,18,42)"/><text x="1.2365%" y="623.50"></text></g><g><title>__libc_start_main (582 samples, 0.16%)</title><rect x="0.9614%" y="677" width="0.1554%" height="15" fill="rgb(241,131,45)"/><text x="1.2114%" y="687.50"></text></g><g><title>main (582 samples, 0.16%)</title><rect x="0.9614%" y="661" width="0.1554%" height="15" fill="rgb(249,31,29)"/><text x="1.2114%" y="671.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (582 samples, 0.16%)</title><rect x="0.9614%" y="645" width="0.1554%" height="15" fill="rgb(225,111,53)"/><text x="1.2114%" y="655.50"></text></g><g><title>pvn_p2p_nat::main (582 samples, 0.16%)</title><rect x="0.9614%" y="629" width="0.1554%" height="15" fill="rgb(238,160,17)"/><text x="1.2114%" y="639.50"></text></g><g><title>_start (589 samples, 0.16%)</title><rect x="0.9614%" y="693" width="0.1573%" height="15" fill="rgb(214,148,48)"/><text x="1.2114%" y="703.50"></text></g><g><title>pvn-p2p-nat (3,983 samples, 1.06%)</title><rect x="0.0558%" y="709" width="1.0634%" height="15" fill="rgb(232,36,49)"/><text x="0.3058%" y="719.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (1,886 samples, 0.50%)</title><rect x="1.2151%" y="677" width="0.5035%" height="15" fill="rgb(209,103,24)"/><text x="1.4651%" y="687.50"></text></g><g><title>[pvn-p2p-nat] (1,887 samples, 0.50%)</title><rect x="1.2151%" y="693" width="0.5038%" height="15" fill="rgb(229,88,8)"/><text x="1.4651%" y="703.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (5,374 samples, 1.43%)</title><rect x="1.7189%" y="677" width="1.4348%" height="15" fill="rgb(213,181,19)"/><text x="1.9689%" y="687.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (1,747 samples, 0.47%)</title><rect x="2.6873%" y="661" width="0.4664%" height="15" fill="rgb(254,191,54)"/><text x="2.9373%" y="671.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (1,747 samples, 0.47%)</title><rect x="2.6873%" y="645" width="0.4664%" height="15" fill="rgb(241,83,37)"/><text x="2.9373%" y="655.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (1,747 samples, 0.47%)</title><rect x="2.6873%" y="629" width="0.4664%" height="15" fill="rgb(233,36,39)"/><text x="2.9373%" y="639.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (1,747 samples, 0.47%)</title><rect x="2.6873%" y="613" width="0.4664%" height="15" fill="rgb(226,3,54)"/><text x="2.9373%" y="623.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (1,747 samples, 0.47%)</title><rect x="2.6873%" y="597" width="0.4664%" height="15" fill="rgb(245,192,40)"/><text x="2.9373%" y="607.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (1,747 samples, 0.47%)</title><rect x="2.6873%" y="581" width="0.4664%" height="15" fill="rgb(238,167,29)"/><text x="2.9373%" y="591.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (1,747 samples, 0.47%)</title><rect x="2.6873%" y="565" width="0.4664%" height="15" fill="rgb(232,182,51)"/><text x="2.9373%" y="575.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (1,747 samples, 0.47%)</title><rect x="2.6873%" y="549" width="0.4664%" height="15" fill="rgb(231,60,39)"/><text x="2.9373%" y="559.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (1,747 samples, 0.47%)</title><rect x="2.6873%" y="533" width="0.4664%" height="15" fill="rgb(208,69,12)"/><text x="2.9373%" y="543.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (1,747 samples, 0.47%)</title><rect x="2.6873%" y="517" width="0.4664%" height="15" fill="rgb(235,93,37)"/><text x="2.9373%" y="527.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (27,786 samples, 7.42%)</title><rect x="3.1537%" y="677" width="7.4187%" height="15" fill="rgb(213,116,39)"/><text x="3.4037%" y="687.50">&lt;e2d2::ope..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (26,276 samples, 7.02%)</title><rect x="3.5569%" y="661" width="7.0155%" height="15" fill="rgb(222,207,29)"/><text x="3.8069%" y="671.50">&lt;e2d2::op..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (26,276 samples, 7.02%)</title><rect x="3.5569%" y="645" width="7.0155%" height="15" fill="rgb(206,96,30)"/><text x="3.8069%" y="655.50">&lt;e2d2::op..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (1,643 samples, 0.44%)</title><rect x="10.1337%" y="629" width="0.4387%" height="15" fill="rgb(218,138,4)"/><text x="10.3837%" y="639.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (1,643 samples, 0.44%)</title><rect x="10.1337%" y="613" width="0.4387%" height="15" fill="rgb(250,191,14)"/><text x="10.3837%" y="623.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (4,956 samples, 1.32%)</title><rect x="10.5724%" y="677" width="1.3232%" height="15" fill="rgb(239,60,40)"/><text x="10.8224%" y="687.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (1,802 samples, 0.48%)</title><rect x="11.4145%" y="661" width="0.4811%" height="15" fill="rgb(206,27,48)"/><text x="11.6645%" y="671.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (1,801 samples, 0.48%)</title><rect x="11.4148%" y="645" width="0.4809%" height="15" fill="rgb(225,35,8)"/><text x="11.6648%" y="655.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (1,885 samples, 0.50%)</title><rect x="11.8956%" y="677" width="0.5033%" height="15" fill="rgb(250,213,24)"/><text x="12.1456%" y="687.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (14,098 samples, 3.76%)</title><rect x="12.3989%" y="677" width="3.7641%" height="15" fill="rgb(247,123,22)"/><text x="12.6489%" y="687.50">&lt;e2d..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (1,716 samples, 0.46%)</title><rect x="17.1607%" y="645" width="0.4582%" height="15" fill="rgb(231,138,38)"/><text x="17.4107%" y="655.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (1,803 samples, 0.48%)</title><rect x="17.6189%" y="645" width="0.4814%" height="15" fill="rgb(231,145,46)"/><text x="17.8689%" y="655.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (11,354 samples, 3.03%)</title><rect x="16.1630%" y="677" width="3.0314%" height="15" fill="rgb(251,118,11)"/><text x="16.4130%" y="687.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (7,617 samples, 2.03%)</title><rect x="17.1607%" y="661" width="2.0337%" height="15" fill="rgb(217,147,25)"/><text x="17.4107%" y="671.50">&lt;..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (4,098 samples, 1.09%)</title><rect x="18.1003%" y="645" width="1.0941%" height="15" fill="rgb(247,81,37)"/><text x="18.3503%" y="655.50"></text></g><g><title>[pvn-p2p-nat] (1,755 samples, 0.47%)</title><rect x="19.1944%" y="677" width="0.4686%" height="15" fill="rgb(209,12,38)"/><text x="19.4444%" y="687.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (1,755 samples, 0.47%)</title><rect x="19.1944%" y="661" width="0.4686%" height="15" fill="rgb(227,1,9)"/><text x="19.4444%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (1,797 samples, 0.48%)</title><rect x="19.6630%" y="677" width="0.4798%" height="15" fill="rgb(248,47,43)"/><text x="19.9130%" y="687.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (4,825 samples, 1.29%)</title><rect x="20.1428%" y="677" width="1.2882%" height="15" fill="rgb(221,10,30)"/><text x="20.3928%" y="687.50"></text></g><g><title>i40e_recv_pkts_vec (3,873 samples, 1.03%)</title><rect x="21.4310%" y="677" width="1.0341%" height="15" fill="rgb(210,229,1)"/><text x="21.6810%" y="687.50"></text></g><g><title>[unknown] (88,525 samples, 23.64%)</title><rect x="1.7189%" y="693" width="23.6356%" height="15" fill="rgb(222,148,37)"/><text x="1.9689%" y="703.50">[unknown]</text></g><g><title>recv_pkts (10,822 samples, 2.89%)</title><rect x="22.4651%" y="677" width="2.8894%" height="15" fill="rgb(234,67,33)"/><text x="22.7151%" y="687.50">re..</text></g><g><title>rte_eth_rx_burst (1,802 samples, 0.48%)</title><rect x="24.8734%" y="661" width="0.4811%" height="15" fill="rgb(247,98,35)"/><text x="25.1234%" y="671.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::clear_packets (1,838 samples, 0.49%)</title><rect x="43.0506%" y="389" width="0.4907%" height="15" fill="rgb(247,138,52)"/><text x="43.3006%" y="399.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::consume_batch (1,838 samples, 0.49%)</title><rect x="43.0506%" y="373" width="0.4907%" height="15" fill="rgb(213,79,30)"/><text x="43.3006%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (1,838 samples, 0.49%)</title><rect x="43.0506%" y="357" width="0.4907%" height="15" fill="rgb(246,177,23)"/><text x="43.3006%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,772 samples, 0.47%)</title><rect x="44.5078%" y="309" width="0.4731%" height="15" fill="rgb(230,62,27)"/><text x="44.7578%" y="319.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act::_{{closure}} (1,772 samples, 0.47%)</title><rect x="44.5078%" y="293" width="0.4731%" height="15" fill="rgb(216,154,8)"/><text x="44.7578%" y="303.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (1,797 samples, 0.48%)</title><rect x="44.9809%" y="293" width="0.4798%" height="15" fill="rgb(244,35,45)"/><text x="45.2309%" y="303.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::free_packet_batch (1,794 samples, 0.48%)</title><rect x="44.9817%" y="277" width="0.4790%" height="15" fill="rgb(251,115,12)"/><text x="45.2317%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::capacity (1,833 samples, 0.49%)</title><rect x="45.4610%" y="277" width="0.4894%" height="15" fill="rgb(240,54,50)"/><text x="45.7110%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1,846 samples, 0.49%)</title><rect x="46.4475%" y="229" width="0.4929%" height="15" fill="rgb(233,84,52)"/><text x="46.6975%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_store (1,846 samples, 0.49%)</title><rect x="46.4475%" y="213" width="0.4929%" height="15" fill="rgb(207,117,47)"/><text x="46.6975%" y="223.50"></text></g><g><title>_recv_raw_pkts_vec (3,587 samples, 0.96%)</title><rect x="50.2869%" y="181" width="0.9577%" height="15" fill="rgb(249,43,39)"/><text x="50.5369%" y="191.50"></text></g><g><title>i40e_recv_pkts_vec (5,433 samples, 1.45%)</title><rect x="49.7953%" y="197" width="1.4506%" height="15" fill="rgb(209,38,44)"/><text x="50.0453%" y="207.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (17,976 samples, 4.80%)</title><rect x="46.4467%" y="261" width="4.7995%" height="15" fill="rgb(236,212,23)"/><text x="46.6967%" y="271.50">&lt;e2d2:..</text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (17,976 samples, 4.80%)</title><rect x="46.4467%" y="245" width="4.7995%" height="15" fill="rgb(242,79,21)"/><text x="46.6967%" y="255.50">e2d2::..</text></g><g><title>recv_pkts (16,127 samples, 4.31%)</title><rect x="46.9404%" y="229" width="4.3058%" height="15" fill="rgb(211,96,35)"/><text x="47.1904%" y="239.50">recv_..</text></g><g><title>rte_eth_rx_burst (14,384 samples, 3.84%)</title><rect x="47.4058%" y="213" width="3.8404%" height="15" fill="rgb(253,215,40)"/><text x="47.6558%" y="223.50">rte_..</text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (19,834 samples, 5.30%)</title><rect x="45.9509%" y="277" width="5.2955%" height="15" fill="rgb(211,81,21)"/><text x="46.2009%" y="287.50">e2d2::..</text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (25,242 samples, 6.74%)</title><rect x="44.5078%" y="325" width="6.7394%" height="15" fill="rgb(208,190,38)"/><text x="44.7578%" y="335.50">&lt;e2d2::op..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (23,470 samples, 6.27%)</title><rect x="44.9809%" y="309" width="6.2663%" height="15" fill="rgb(235,213,38)"/><text x="45.2309%" y="319.50">e2d2::op..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (21,673 samples, 5.79%)</title><rect x="45.4607%" y="293" width="5.7865%" height="15" fill="rgb(237,122,38)"/><text x="45.7107%" y="303.50">e2d2::o..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (27,029 samples, 7.22%)</title><rect x="44.0312%" y="357" width="7.2166%" height="15" fill="rgb(244,218,35)"/><text x="44.2812%" y="367.50">&lt;e2d2::ope..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (27,028 samples, 7.22%)</title><rect x="44.0315%" y="341" width="7.2163%" height="15" fill="rgb(240,68,47)"/><text x="44.2815%" y="351.50">&lt;e2d2::ope..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (30,692 samples, 8.19%)</title><rect x="43.5413%" y="389" width="8.1946%" height="15" fill="rgb(210,16,53)"/><text x="43.7913%" y="399.50">&lt;e2d2::oper..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (30,690 samples, 8.19%)</title><rect x="43.5418%" y="373" width="8.1940%" height="15" fill="rgb(235,124,12)"/><text x="43.7918%" y="383.50">&lt;e2d2::oper..</text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (1,828 samples, 0.49%)</title><rect x="51.2478%" y="357" width="0.4881%" height="15" fill="rgb(224,169,11)"/><text x="51.4978%" y="367.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1,828 samples, 0.49%)</title><rect x="51.2478%" y="341" width="0.4881%" height="15" fill="rgb(250,166,2)"/><text x="51.4978%" y="351.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1,828 samples, 0.49%)</title><rect x="51.2478%" y="325" width="0.4881%" height="15" fill="rgb(242,216,29)"/><text x="51.4978%" y="335.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1,828 samples, 0.49%)</title><rect x="51.2478%" y="309" width="0.4881%" height="15" fill="rgb(230,116,27)"/><text x="51.4978%" y="319.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (1,828 samples, 0.49%)</title><rect x="51.2478%" y="293" width="0.4881%" height="15" fill="rgb(228,99,48)"/><text x="51.4978%" y="303.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (32,538 samples, 8.69%)</title><rect x="43.0506%" y="405" width="8.6874%" height="15" fill="rgb(253,11,6)"/><text x="43.3006%" y="415.50">&lt;e2d2::opera..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1,790 samples, 0.48%)</title><rect x="56.0029%" y="325" width="0.4779%" height="15" fill="rgb(247,143,39)"/><text x="56.2529%" y="335.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1,789 samples, 0.48%)</title><rect x="56.0032%" y="309" width="0.4777%" height="15" fill="rgb(236,97,10)"/><text x="56.2532%" y="319.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,789 samples, 0.48%)</title><rect x="56.0032%" y="293" width="0.4777%" height="15" fill="rgb(233,208,19)"/><text x="56.2532%" y="303.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (11,336 samples, 3.03%)</title><rect x="56.0029%" y="341" width="3.0266%" height="15" fill="rgb(216,164,2)"/><text x="56.2529%" y="351.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (9,546 samples, 2.55%)</title><rect x="56.4809%" y="325" width="2.5487%" height="15" fill="rgb(220,129,5)"/><text x="56.7309%" y="335.50">&lt;e..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (620 samples, 0.17%)</title><rect x="59.4533%" y="245" width="0.1655%" height="15" fill="rgb(242,17,10)"/><text x="59.7033%" y="255.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act::_{{closure}} (620 samples, 0.17%)</title><rect x="59.4533%" y="229" width="0.1655%" height="15" fill="rgb(242,107,0)"/><text x="59.7033%" y="239.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (1,717 samples, 0.46%)</title><rect x="59.7310%" y="229" width="0.4584%" height="15" fill="rgb(251,28,31)"/><text x="59.9810%" y="239.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::free_packet_batch (863 samples, 0.23%)</title><rect x="59.9590%" y="213" width="0.2304%" height="15" fill="rgb(233,223,10)"/><text x="60.2090%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (862 samples, 0.23%)</title><rect x="59.9593%" y="197" width="0.2301%" height="15" fill="rgb(215,21,27)"/><text x="60.2093%" y="207.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (571 samples, 0.15%)</title><rect x="60.2594%" y="149" width="0.1525%" height="15" fill="rgb(232,23,21)"/><text x="60.5094%" y="159.50"></text></g><g><title>core::cmp::min (1,232 samples, 0.33%)</title><rect x="60.2594%" y="181" width="0.3289%" height="15" fill="rgb(244,5,23)"/><text x="60.5094%" y="191.50"></text></g><g><title>core::cmp::Ord::min (1,232 samples, 0.33%)</title><rect x="60.2594%" y="165" width="0.3289%" height="15" fill="rgb(226,81,46)"/><text x="60.5094%" y="175.50"></text></g><g><title>core::cmp::min_by (661 samples, 0.18%)</title><rect x="60.4118%" y="149" width="0.1765%" height="15" fill="rgb(247,70,30)"/><text x="60.6618%" y="159.50"></text></g><g><title>&lt;e2d2::queues::mpsc_mbuf_queue::MpscConsumer as e2d2::interface::PacketRx&gt;::recv (1,678 samples, 0.45%)</title><rect x="60.2594%" y="213" width="0.4480%" height="15" fill="rgb(212,68,19)"/><text x="60.5094%" y="223.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue (1,678 samples, 0.45%)</title><rect x="60.2594%" y="197" width="0.4480%" height="15" fill="rgb(240,187,13)"/><text x="60.5094%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (434 samples, 0.12%)</title><rect x="60.5915%" y="181" width="0.1159%" height="15" fill="rgb(223,113,26)"/><text x="60.8415%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (434 samples, 0.12%)</title><rect x="60.5915%" y="165" width="0.1159%" height="15" fill="rgb(206,192,2)"/><text x="60.8415%" y="175.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (5,814 samples, 1.55%)</title><rect x="59.4533%" y="261" width="1.5523%" height="15" fill="rgb(241,108,4)"/><text x="59.7033%" y="271.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (5,194 samples, 1.39%)</title><rect x="59.6188%" y="245" width="1.3868%" height="15" fill="rgb(247,173,49)"/><text x="59.8688%" y="255.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (3,057 samples, 0.82%)</title><rect x="60.1894%" y="229" width="0.8162%" height="15" fill="rgb(224,114,35)"/><text x="60.4394%" y="239.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::add_to_batch (1,109 samples, 0.30%)</title><rect x="60.7095%" y="213" width="0.2961%" height="15" fill="rgb(245,159,27)"/><text x="60.9595%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (1,109 samples, 0.30%)</title><rect x="60.7095%" y="197" width="0.2961%" height="15" fill="rgb(245,172,44)"/><text x="60.9595%" y="207.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (5,831 samples, 1.56%)</title><rect x="59.4504%" y="277" width="1.5568%" height="15" fill="rgb(236,23,11)"/><text x="59.7004%" y="287.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (10,180 samples, 2.72%)</title><rect x="59.2103%" y="309" width="2.7180%" height="15" fill="rgb(205,117,38)"/><text x="59.4603%" y="319.50">&lt;e..</text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::act (10,180 samples, 2.72%)</title><rect x="59.2103%" y="293" width="2.7180%" height="15" fill="rgb(237,72,25)"/><text x="59.4603%" y="303.50">&lt;e..</text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (3,449 samples, 0.92%)</title><rect x="61.0075%" y="277" width="0.9209%" height="15" fill="rgb(244,70,9)"/><text x="61.2575%" y="287.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (3,449 samples, 0.92%)</title><rect x="61.0075%" y="261" width="0.9209%" height="15" fill="rgb(217,125,39)"/><text x="61.2575%" y="271.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (3,449 samples, 0.92%)</title><rect x="61.0075%" y="245" width="0.9209%" height="15" fill="rgb(235,36,10)"/><text x="61.2575%" y="255.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (3,449 samples, 0.92%)</title><rect x="61.0075%" y="229" width="0.9209%" height="15" fill="rgb(251,123,47)"/><text x="61.2575%" y="239.50"></text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (717 samples, 0.19%)</title><rect x="61.9321%" y="309" width="0.1914%" height="15" fill="rgb(221,13,13)"/><text x="62.1821%" y="319.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (717 samples, 0.19%)</title><rect x="61.9321%" y="293" width="0.1914%" height="15" fill="rgb(238,131,9)"/><text x="62.1821%" y="303.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (717 samples, 0.19%)</title><rect x="61.9321%" y="277" width="0.1914%" height="15" fill="rgb(211,50,8)"/><text x="62.1821%" y="287.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (717 samples, 0.19%)</title><rect x="61.9321%" y="261" width="0.1914%" height="15" fill="rgb(245,182,24)"/><text x="62.1821%" y="271.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (717 samples, 0.19%)</title><rect x="61.9321%" y="245" width="0.1914%" height="15" fill="rgb(242,14,37)"/><text x="62.1821%" y="255.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (717 samples, 0.19%)</title><rect x="61.9321%" y="229" width="0.1914%" height="15" fill="rgb(246,228,12)"/><text x="62.1821%" y="239.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (11,593 samples, 3.10%)</title><rect x="59.0296%" y="341" width="3.0953%" height="15" fill="rgb(213,55,15)"/><text x="59.2796%" y="351.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (11,592 samples, 3.09%)</title><rect x="59.0299%" y="325" width="3.0950%" height="15" fill="rgb(209,9,3)"/><text x="59.2799%" y="335.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (37,166 samples, 9.92%)</title><rect x="52.2031%" y="357" width="9.9231%" height="15" fill="rgb(230,59,30)"/><text x="52.4531%" y="367.50">&lt;e2d2::operato..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (854 samples, 0.23%)</title><rect x="62.3702%" y="325" width="0.2280%" height="15" fill="rgb(209,121,21)"/><text x="62.6202%" y="335.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act::_{{closure}} (854 samples, 0.23%)</title><rect x="62.3702%" y="309" width="0.2280%" height="15" fill="rgb(220,109,13)"/><text x="62.6202%" y="319.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (3,969 samples, 1.06%)</title><rect x="62.6073%" y="309" width="1.0597%" height="15" fill="rgb(232,18,1)"/><text x="62.8573%" y="319.50"></text></g><g><title>core::cmp::min (811 samples, 0.22%)</title><rect x="63.6921%" y="261" width="0.2165%" height="15" fill="rgb(215,41,42)"/><text x="63.9421%" y="271.50"></text></g><g><title>core::cmp::Ord::min (811 samples, 0.22%)</title><rect x="63.6921%" y="245" width="0.2165%" height="15" fill="rgb(224,123,36)"/><text x="63.9421%" y="255.50"></text></g><g><title>core::cmp::min_by (809 samples, 0.22%)</title><rect x="63.6926%" y="229" width="0.2160%" height="15" fill="rgb(240,125,3)"/><text x="63.9426%" y="239.50"></text></g><g><title>&lt;e2d2::queues::mpsc_mbuf_queue::MpscConsumer as e2d2::interface::PacketRx&gt;::recv (948 samples, 0.25%)</title><rect x="63.6918%" y="293" width="0.2531%" height="15" fill="rgb(205,98,50)"/><text x="63.9418%" y="303.50"></text></g><g><title>e2d2::queues::mpsc_mbuf_queue::MpscQueue::dequeue (948 samples, 0.25%)</title><rect x="63.6918%" y="277" width="0.2531%" height="15" fill="rgb(205,185,37)"/><text x="63.9418%" y="287.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::add_to_batch (1,542 samples, 0.41%)</title><rect x="63.9738%" y="293" width="0.4117%" height="15" fill="rgb(238,207,15)"/><text x="64.2238%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (1,542 samples, 0.41%)</title><rect x="63.9738%" y="277" width="0.4117%" height="15" fill="rgb(213,199,42)"/><text x="64.2238%" y="287.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (7,549 samples, 2.02%)</title><rect x="62.3702%" y="341" width="2.0155%" height="15" fill="rgb(235,201,11)"/><text x="62.6202%" y="351.50">&lt;..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (6,695 samples, 1.79%)</title><rect x="62.5982%" y="325" width="1.7875%" height="15" fill="rgb(207,46,11)"/><text x="62.8482%" y="335.50">e..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (2,692 samples, 0.72%)</title><rect x="63.6670%" y="309" width="0.7187%" height="15" fill="rgb(241,35,35)"/><text x="63.9170%" y="319.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (47,377 samples, 12.65%)</title><rect x="51.7380%" y="373" width="12.6493%" height="15" fill="rgb(243,32,47)"/><text x="51.9880%" y="383.50">&lt;e2d2::operators::c..</text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (8,469 samples, 2.26%)</title><rect x="62.1262%" y="357" width="2.2612%" height="15" fill="rgb(247,202,23)"/><text x="62.3762%" y="367.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1,829 samples, 0.49%)</title><rect x="65.2449%" y="325" width="0.4883%" height="15" fill="rgb(219,102,11)"/><text x="65.4949%" y="335.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1,827 samples, 0.49%)</title><rect x="65.2455%" y="309" width="0.4878%" height="15" fill="rgb(243,110,44)"/><text x="65.4955%" y="319.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,827 samples, 0.49%)</title><rect x="65.2455%" y="293" width="0.4878%" height="15" fill="rgb(222,74,54)"/><text x="65.4955%" y="303.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (479 samples, 0.13%)</title><rect x="66.5356%" y="261" width="0.1279%" height="15" fill="rgb(216,99,12)"/><text x="66.7856%" y="271.50"></text></g><g><title>&lt;e2d2::operators::add_metadata::AddMetadataBatch&lt;M,V&gt; as e2d2::operators::act::Act&gt;::done (479 samples, 0.13%)</title><rect x="66.5356%" y="245" width="0.1279%" height="15" fill="rgb(226,22,26)"/><text x="66.7856%" y="255.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (1,617 samples, 0.43%)</title><rect x="66.2320%" y="293" width="0.4317%" height="15" fill="rgb(217,163,10)"/><text x="66.4820%" y="303.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::done (1,617 samples, 0.43%)</title><rect x="66.2320%" y="277" width="0.4317%" height="15" fill="rgb(213,25,53)"/><text x="66.4820%" y="287.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::done (902 samples, 0.24%)</title><rect x="66.6637%" y="293" width="0.2408%" height="15" fill="rgb(252,105,26)"/><text x="66.9137%" y="303.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (902 samples, 0.24%)</title><rect x="66.6637%" y="277" width="0.2408%" height="15" fill="rgb(220,39,43)"/><text x="66.9137%" y="287.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (902 samples, 0.24%)</title><rect x="66.6637%" y="261" width="0.2408%" height="15" fill="rgb(229,68,48)"/><text x="66.9137%" y="271.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::free_packet_batch (902 samples, 0.24%)</title><rect x="66.6637%" y="245" width="0.2408%" height="15" fill="rgb(252,8,32)"/><text x="66.9137%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (902 samples, 0.24%)</title><rect x="66.6637%" y="229" width="0.2408%" height="15" fill="rgb(223,20,43)"/><text x="66.9137%" y="239.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (4,388 samples, 1.17%)</title><rect x="65.7333%" y="325" width="1.1716%" height="15" fill="rgb(229,81,49)"/><text x="65.9833%" y="335.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (2,520 samples, 0.67%)</title><rect x="66.2320%" y="309" width="0.6728%" height="15" fill="rgb(236,28,36)"/><text x="66.4820%" y="319.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::done (7,619 samples, 2.03%)</title><rect x="64.8719%" y="341" width="2.0342%" height="15" fill="rgb(249,185,26)"/><text x="65.1219%" y="351.50">&lt;..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (8,464 samples, 2.26%)</title><rect x="64.8719%" y="357" width="2.2598%" height="15" fill="rgb(249,174,33)"/><text x="65.1219%" y="367.50">&lt;..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (845 samples, 0.23%)</title><rect x="66.9062%" y="341" width="0.2256%" height="15" fill="rgb(233,201,37)"/><text x="67.1562%" y="351.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (10,280 samples, 2.74%)</title><rect x="64.3873%" y="373" width="2.7447%" height="15" fill="rgb(221,78,26)"/><text x="64.6373%" y="383.50">&lt;e..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1,344 samples, 0.36%)</title><rect x="67.6166%" y="325" width="0.3588%" height="15" fill="rgb(250,127,30)"/><text x="67.8666%" y="335.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1,311 samples, 0.35%)</title><rect x="67.6254%" y="309" width="0.3500%" height="15" fill="rgb(230,49,44)"/><text x="67.8754%" y="319.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,311 samples, 0.35%)</title><rect x="67.6254%" y="293" width="0.3500%" height="15" fill="rgb(229,67,23)"/><text x="67.8754%" y="303.50"></text></g><g><title>&lt;e2d2::operators::merge_batch::MergeBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (22,749 samples, 6.07%)</title><rect x="67.1766%" y="341" width="6.0738%" height="15" fill="rgb(249,83,47)"/><text x="67.4266%" y="351.50">&lt;e2d2::o..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (19,757 samples, 5.27%)</title><rect x="67.9755%" y="325" width="5.2750%" height="15" fill="rgb(215,43,3)"/><text x="68.2255%" y="335.50">&lt;e2d2:..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (22,923 samples, 6.12%)</title><rect x="67.1320%" y="373" width="6.1203%" height="15" fill="rgb(238,154,13)"/><text x="67.3820%" y="383.50">&lt;e2d2::o..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (22,759 samples, 6.08%)</title><rect x="67.1758%" y="357" width="6.0765%" height="15" fill="rgb(219,56,2)"/><text x="67.4258%" y="367.50">&lt;e2d2::o..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (82,434 samples, 22.01%)</title><rect x="51.7380%" y="389" width="22.0093%" height="15" fill="rgb(233,0,4)"/><text x="51.9880%" y="399.50">&lt;e2d2::operators::send_batch::SendB..</text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::send_q (1,854 samples, 0.50%)</title><rect x="73.2523%" y="373" width="0.4950%" height="15" fill="rgb(235,30,7)"/><text x="73.5023%" y="383.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (82,437 samples, 22.01%)</title><rect x="51.7380%" y="405" width="22.0101%" height="15" fill="rgb(250,79,13)"/><text x="51.9880%" y="415.50">&lt;e2d2::operators::send_batch::SendB..</text></g><g><title>__GI___pthread_mutex_lock (42,421 samples, 11.33%)</title><rect x="73.7481%" y="405" width="11.3261%" height="15" fill="rgb(211,146,34)"/><text x="73.9981%" y="415.50">__GI___pthread_mu..</text></g><g><title>__pthread_mutex_unlock_usercnt (48,688 samples, 13.00%)</title><rect x="85.5375%" y="389" width="12.9994%" height="15" fill="rgb(228,22,38)"/><text x="85.7875%" y="399.50">__pthread_mutex_unlo..</text></g><g><title>__GI___pthread_mutex_unlock (50,426 samples, 13.46%)</title><rect x="85.0743%" y="405" width="13.4634%" height="15" fill="rgb(235,168,5)"/><text x="85.3243%" y="415.50">__GI___pthread_mutex..</text></g><g><title>__handle_mm_fault (395 samples, 0.11%)</title><rect x="98.6087%" y="37" width="0.1055%" height="15" fill="rgb(221,155,16)"/><text x="98.8587%" y="47.50"></text></g><g><title>handle_mm_fault (413 samples, 0.11%)</title><rect x="98.6055%" y="53" width="0.1103%" height="15" fill="rgb(215,215,53)"/><text x="98.8555%" y="63.50"></text></g><g><title>__do_page_fault (452 samples, 0.12%)</title><rect x="98.5980%" y="69" width="0.1207%" height="15" fill="rgb(223,4,10)"/><text x="98.8480%" y="79.50"></text></g><g><title>page_fault (458 samples, 0.12%)</title><rect x="98.5969%" y="101" width="0.1223%" height="15" fill="rgb(234,103,6)"/><text x="98.8469%" y="111.50"></text></g><g><title>do_page_fault (455 samples, 0.12%)</title><rect x="98.5978%" y="85" width="0.1215%" height="15" fill="rgb(227,97,0)"/><text x="98.8478%" y="95.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::add_pipeline_to_run::_{{closure}} (901 samples, 0.24%)</title><rect x="98.5436%" y="405" width="0.2406%" height="15" fill="rgb(234,150,53)"/><text x="98.7936%" y="415.50"></text></g><g><title>pvn_p2p_nat::main::_{{closure}} (901 samples, 0.24%)</title><rect x="98.5436%" y="389" width="0.2406%" height="15" fill="rgb(228,201,54)"/><text x="98.7936%" y="399.50"></text></g><g><title>pvn_p2p_nat::p2p_test (901 samples, 0.24%)</title><rect x="98.5436%" y="373" width="0.2406%" height="15" fill="rgb(222,22,37)"/><text x="98.7936%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (901 samples, 0.24%)</title><rect x="98.5436%" y="357" width="0.2406%" height="15" fill="rgb(237,53,32)"/><text x="98.7936%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (901 samples, 0.24%)</title><rect x="98.5436%" y="341" width="0.2406%" height="15" fill="rgb(233,25,53)"/><text x="98.7936%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (901 samples, 0.24%)</title><rect x="98.5436%" y="325" width="0.2406%" height="15" fill="rgb(210,40,34)"/><text x="98.7936%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (901 samples, 0.24%)</title><rect x="98.5436%" y="309" width="0.2406%" height="15" fill="rgb(241,220,44)"/><text x="98.7936%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (901 samples, 0.24%)</title><rect x="98.5436%" y="293" width="0.2406%" height="15" fill="rgb(235,28,35)"/><text x="98.7936%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (901 samples, 0.24%)</title><rect x="98.5436%" y="277" width="0.2406%" height="15" fill="rgb(210,56,17)"/><text x="98.7936%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (901 samples, 0.24%)</title><rect x="98.5436%" y="261" width="0.2406%" height="15" fill="rgb(224,130,29)"/><text x="98.7936%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (901 samples, 0.24%)</title><rect x="98.5436%" y="245" width="0.2406%" height="15" fill="rgb(235,212,8)"/><text x="98.7936%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (901 samples, 0.24%)</title><rect x="98.5436%" y="229" width="0.2406%" height="15" fill="rgb(223,33,50)"/><text x="98.7936%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (901 samples, 0.24%)</title><rect x="98.5436%" y="213" width="0.2406%" height="15" fill="rgb(219,149,13)"/><text x="98.7936%" y="223.50"></text></g><g><title>pvn_p2p_nat::p2p_test::_{{closure}} (901 samples, 0.24%)</title><rect x="98.5436%" y="197" width="0.2406%" height="15" fill="rgb(250,156,29)"/><text x="98.7936%" y="207.50"></text></g><g><title>pvn_p2p_nat::nf::p2p (901 samples, 0.24%)</title><rect x="98.5436%" y="181" width="0.2406%" height="15" fill="rgb(216,193,19)"/><text x="98.7936%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (897 samples, 0.24%)</title><rect x="98.5446%" y="165" width="0.2395%" height="15" fill="rgb(216,135,14)"/><text x="98.7946%" y="175.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (897 samples, 0.24%)</title><rect x="98.5446%" y="149" width="0.2395%" height="15" fill="rgb(241,47,5)"/><text x="98.7946%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (897 samples, 0.24%)</title><rect x="98.5446%" y="133" width="0.2395%" height="15" fill="rgb(233,42,35)"/><text x="98.7946%" y="143.50"></text></g><g><title>__memset_avx2_erms (897 samples, 0.24%)</title><rect x="98.5446%" y="117" width="0.2395%" height="15" fill="rgb(231,13,6)"/><text x="98.7946%" y="127.50"></text></g><g><title>__GI___clone (275,040 samples, 73.43%)</title><rect x="25.3545%" y="693" width="73.4339%" height="15" fill="rgb(207,181,40)"/><text x="25.6045%" y="703.50">__GI___clone</text></g><g><title>start_thread (275,040 samples, 73.43%)</title><rect x="25.3545%" y="677" width="73.4339%" height="15" fill="rgb(254,173,49)"/><text x="25.6045%" y="687.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (275,040 samples, 73.43%)</title><rect x="25.3545%" y="661" width="73.4339%" height="15" fill="rgb(221,1,38)"/><text x="25.6045%" y="671.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys_common::thread::start_thread (275,040 samples, 73.43%)</title><rect x="25.3545%" y="645" width="73.4339%" height="15" fill="rgb(206,124,46)"/><text x="25.6045%" y="655.50">std::sys_common::thread::start_thread</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (275,040 samples, 73.43%)</title><rect x="25.3545%" y="629" width="73.4339%" height="15" fill="rgb(249,21,11)"/><text x="25.6045%" y="639.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (275,040 samples, 73.43%)</title><rect x="25.3545%" y="613" width="73.4339%" height="15" fill="rgb(222,201,40)"/><text x="25.6045%" y="623.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (275,040 samples, 73.43%)</title><rect x="25.3545%" y="597" width="73.4339%" height="15" fill="rgb(235,61,29)"/><text x="25.6045%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (275,040 samples, 73.43%)</title><rect x="25.3545%" y="581" width="73.4339%" height="15" fill="rgb(219,207,3)"/><text x="25.6045%" y="591.50">std::thread::Builder::spawn_unchecked::_{{closure}}</text></g><g><title>std::panic::catch_unwind (275,040 samples, 73.43%)</title><rect x="25.3545%" y="565" width="73.4339%" height="15" fill="rgb(222,56,46)"/><text x="25.6045%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (275,040 samples, 73.43%)</title><rect x="25.3545%" y="549" width="73.4339%" height="15" fill="rgb(239,76,54)"/><text x="25.6045%" y="559.50">std::panicking::try</text></g><g><title>__rust_maybe_catch_panic (275,040 samples, 73.43%)</title><rect x="25.3545%" y="533" width="73.4339%" height="15" fill="rgb(231,124,27)"/><text x="25.6045%" y="543.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call (275,040 samples, 73.43%)</title><rect x="25.3545%" y="517" width="73.4339%" height="15" fill="rgb(249,195,6)"/><text x="25.6045%" y="527.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (275,040 samples, 73.43%)</title><rect x="25.3545%" y="501" width="73.4339%" height="15" fill="rgb(237,174,47)"/><text x="25.6045%" y="511.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (275,040 samples, 73.43%)</title><rect x="25.3545%" y="485" width="73.4339%" height="15" fill="rgb(206,201,31)"/><text x="25.6045%" y="495.50">std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (275,040 samples, 73.43%)</title><rect x="25.3545%" y="469" width="73.4339%" height="15" fill="rgb(231,57,52)"/><text x="25.6045%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_{{closure}} (275,040 samples, 73.43%)</title><rect x="25.3545%" y="453" width="73.4339%" height="15" fill="rgb(248,177,22)"/><text x="25.6045%" y="463.50">e2d2::scheduler::context::NetBricksContext::start_scheduler::_{{closure}}</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (275,032 samples, 73.43%)</title><rect x="25.3566%" y="437" width="73.4317%" height="15" fill="rgb(215,211,37)"/><text x="25.6066%" y="447.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (275,032 samples, 73.43%)</title><rect x="25.3566%" y="421" width="73.4317%" height="15" fill="rgb(241,128,51)"/><text x="25.6066%" y="431.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request</text></g><g><title>sched-4 (365,816 samples, 97.67%)</title><rect x="1.1192%" y="709" width="97.6705%" height="15" fill="rgb(227,165,31)"/><text x="1.3692%" y="719.50">sched-4</text></g><g><title>native_write_msr (1,321 samples, 0.35%)</title><rect x="99.1125%" y="565" width="0.3527%" height="15" fill="rgb(228,167,24)"/><text x="99.3625%" y="575.50"></text></g><g><title>__intel_pmu_enable_all.constprop.23 (2,211 samples, 0.59%)</title><rect x="98.9107%" y="581" width="0.5903%" height="15" fill="rgb(228,143,12)"/><text x="99.1607%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (2,244 samples, 0.60%)</title><rect x="98.9043%" y="629" width="0.5991%" height="15" fill="rgb(249,149,8)"/><text x="99.1543%" y="639.50"></text></g><g><title>x86_pmu_enable (2,231 samples, 0.60%)</title><rect x="98.9077%" y="613" width="0.5957%" height="15" fill="rgb(243,35,44)"/><text x="99.1577%" y="623.50"></text></g><g><title>intel_tfa_pmu_enable_all (2,220 samples, 0.59%)</title><rect x="98.9107%" y="597" width="0.5927%" height="15" fill="rgb(246,89,9)"/><text x="99.1607%" y="607.50"></text></g><g><title>schedule_tail (2,258 samples, 0.60%)</title><rect x="98.9040%" y="661" width="0.6029%" height="15" fill="rgb(233,213,13)"/><text x="99.1540%" y="671.50"></text></g><g><title>finish_task_switch (2,258 samples, 0.60%)</title><rect x="98.9040%" y="645" width="0.6029%" height="15" fill="rgb(233,141,41)"/><text x="99.1540%" y="655.50"></text></g><g><title>ret_from_fork (2,262 samples, 0.60%)</title><rect x="98.9040%" y="677" width="0.6039%" height="15" fill="rgb(239,167,4)"/><text x="99.1540%" y="687.50"></text></g><g><title>event_base_loop (409 samples, 0.11%)</title><rect x="99.5661%" y="629" width="0.1092%" height="15" fill="rgb(209,217,16)"/><text x="99.8161%" y="639.50"></text></g><g><title>[libevent-2.1.so.6.0.2] (409 samples, 0.11%)</title><rect x="99.5661%" y="613" width="0.1092%" height="15" fill="rgb(219,88,35)"/><text x="99.8161%" y="623.50"></text></g><g><title>ThreadFunc (741 samples, 0.20%)</title><rect x="99.5087%" y="661" width="0.1978%" height="15" fill="rgb(220,193,23)"/><text x="99.7587%" y="671.50"></text></g><g><title>libeventThreadFunc (569 samples, 0.15%)</title><rect x="99.5547%" y="645" width="0.1519%" height="15" fill="rgb(230,90,52)"/><text x="99.8047%" y="655.50"></text></g><g><title>__handle_mm_fault (391 samples, 0.10%)</title><rect x="99.8273%" y="37" width="0.1044%" height="15" fill="rgb(252,106,19)"/><text x="100.0773%" y="47.50"></text></g><g><title>handle_mm_fault (402 samples, 0.11%)</title><rect x="99.8259%" y="53" width="0.1073%" height="15" fill="rgb(206,74,20)"/><text x="100.0759%" y="63.50"></text></g><g><title>__do_page_fault (455 samples, 0.12%)</title><rect x="99.8166%" y="69" width="0.1215%" height="15" fill="rgb(230,138,44)"/><text x="100.0666%" y="79.50"></text></g><g><title>page_fault (460 samples, 0.12%)</title><rect x="99.8155%" y="101" width="0.1228%" height="15" fill="rgb(235,182,43)"/><text x="100.0655%" y="111.50"></text></g><g><title>do_page_fault (459 samples, 0.12%)</title><rect x="99.8158%" y="85" width="0.1226%" height="15" fill="rgb(242,16,51)"/><text x="100.0658%" y="95.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,047 samples, 0.28%)</title><rect x="99.7143%" y="661" width="0.2795%" height="15" fill="rgb(248,9,4)"/><text x="99.9643%" y="671.50"></text></g><g><title>std::sys_common::thread::start_thread (1,047 samples, 0.28%)</title><rect x="99.7143%" y="645" width="0.2795%" height="15" fill="rgb(210,31,22)"/><text x="99.9643%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,047 samples, 0.28%)</title><rect x="99.7143%" y="629" width="0.2795%" height="15" fill="rgb(239,54,39)"/><text x="99.9643%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,047 samples, 0.28%)</title><rect x="99.7143%" y="613" width="0.2795%" height="15" fill="rgb(230,99,41)"/><text x="99.9643%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,047 samples, 0.28%)</title><rect x="99.7143%" y="597" width="0.2795%" height="15" fill="rgb(253,106,12)"/><text x="99.9643%" y="607.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (1,047 samples, 0.28%)</title><rect x="99.7143%" y="581" width="0.2795%" height="15" fill="rgb(213,46,41)"/><text x="99.9643%" y="591.50"></text></g><g><title>std::panic::catch_unwind (1,047 samples, 0.28%)</title><rect x="99.7143%" y="565" width="0.2795%" height="15" fill="rgb(215,133,35)"/><text x="99.9643%" y="575.50"></text></g><g><title>std::panicking::try (1,047 samples, 0.28%)</title><rect x="99.7143%" y="549" width="0.2795%" height="15" fill="rgb(213,28,5)"/><text x="99.9643%" y="559.50"></text></g><g><title>__rust_maybe_catch_panic (1,047 samples, 0.28%)</title><rect x="99.7143%" y="533" width="0.2795%" height="15" fill="rgb(215,77,49)"/><text x="99.9643%" y="543.50"></text></g><g><title>std::panicking::try::do_call (1,047 samples, 0.28%)</title><rect x="99.7143%" y="517" width="0.2795%" height="15" fill="rgb(248,100,22)"/><text x="99.9643%" y="527.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (1,047 samples, 0.28%)</title><rect x="99.7143%" y="501" width="0.2795%" height="15" fill="rgb(208,67,9)"/><text x="99.9643%" y="511.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (1,047 samples, 0.28%)</title><rect x="99.7143%" y="485" width="0.2795%" height="15" fill="rgb(219,133,21)"/><text x="99.9643%" y="495.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,047 samples, 0.28%)</title><rect x="99.7143%" y="469" width="0.2795%" height="15" fill="rgb(246,46,29)"/><text x="99.9643%" y="479.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_{{closure}} (1,047 samples, 0.28%)</title><rect x="99.7143%" y="453" width="0.2795%" height="15" fill="rgb(246,185,52)"/><text x="99.9643%" y="463.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (1,047 samples, 0.28%)</title><rect x="99.7143%" y="437" width="0.2795%" height="15" fill="rgb(252,136,11)"/><text x="99.9643%" y="447.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (1,047 samples, 0.28%)</title><rect x="99.7143%" y="421" width="0.2795%" height="15" fill="rgb(219,138,53)"/><text x="99.9643%" y="431.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::add_pipeline_to_run::_{{closure}} (908 samples, 0.24%)</title><rect x="99.7514%" y="405" width="0.2424%" height="15" fill="rgb(211,51,23)"/><text x="100.0014%" y="415.50"></text></g><g><title>pvn_p2p_nat::main::_{{closure}} (908 samples, 0.24%)</title><rect x="99.7514%" y="389" width="0.2424%" height="15" fill="rgb(247,221,28)"/><text x="100.0014%" y="399.50"></text></g><g><title>pvn_p2p_nat::p2p_test (908 samples, 0.24%)</title><rect x="99.7514%" y="373" width="0.2424%" height="15" fill="rgb(251,222,45)"/><text x="100.0014%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (908 samples, 0.24%)</title><rect x="99.7514%" y="357" width="0.2424%" height="15" fill="rgb(217,162,53)"/><text x="100.0014%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (908 samples, 0.24%)</title><rect x="99.7514%" y="341" width="0.2424%" height="15" fill="rgb(229,93,14)"/><text x="100.0014%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (908 samples, 0.24%)</title><rect x="99.7514%" y="325" width="0.2424%" height="15" fill="rgb(209,67,49)"/><text x="100.0014%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (908 samples, 0.24%)</title><rect x="99.7514%" y="309" width="0.2424%" height="15" fill="rgb(213,87,29)"/><text x="100.0014%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (908 samples, 0.24%)</title><rect x="99.7514%" y="293" width="0.2424%" height="15" fill="rgb(205,151,52)"/><text x="100.0014%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (908 samples, 0.24%)</title><rect x="99.7514%" y="277" width="0.2424%" height="15" fill="rgb(253,215,39)"/><text x="100.0014%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (908 samples, 0.24%)</title><rect x="99.7514%" y="261" width="0.2424%" height="15" fill="rgb(221,220,41)"/><text x="100.0014%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (908 samples, 0.24%)</title><rect x="99.7514%" y="245" width="0.2424%" height="15" fill="rgb(218,133,21)"/><text x="100.0014%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (908 samples, 0.24%)</title><rect x="99.7514%" y="229" width="0.2424%" height="15" fill="rgb(221,193,43)"/><text x="100.0014%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (908 samples, 0.24%)</title><rect x="99.7514%" y="213" width="0.2424%" height="15" fill="rgb(240,128,52)"/><text x="100.0014%" y="223.50"></text></g><g><title>pvn_p2p_nat::p2p_test::_{{closure}} (908 samples, 0.24%)</title><rect x="99.7514%" y="197" width="0.2424%" height="15" fill="rgb(253,114,12)"/><text x="100.0014%" y="207.50"></text></g><g><title>pvn_p2p_nat::nf::p2p (908 samples, 0.24%)</title><rect x="99.7514%" y="181" width="0.2424%" height="15" fill="rgb(215,223,47)"/><text x="100.0014%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (905 samples, 0.24%)</title><rect x="99.7522%" y="165" width="0.2416%" height="15" fill="rgb(248,225,23)"/><text x="100.0022%" y="175.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (905 samples, 0.24%)</title><rect x="99.7522%" y="149" width="0.2416%" height="15" fill="rgb(250,108,0)"/><text x="100.0022%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (905 samples, 0.24%)</title><rect x="99.7522%" y="133" width="0.2416%" height="15" fill="rgb(228,208,7)"/><text x="100.0022%" y="143.50"></text></g><g><title>__memset_avx2_erms (905 samples, 0.24%)</title><rect x="99.7522%" y="117" width="0.2416%" height="15" fill="rgb(244,45,10)"/><text x="100.0022%" y="127.50"></text></g><g><title>__GI___clone (4,133 samples, 1.10%)</title><rect x="98.8917%" y="693" width="1.1035%" height="15" fill="rgb(207,125,25)"/><text x="99.1417%" y="703.50"></text></g><g><title>start_thread (1,825 samples, 0.49%)</title><rect x="99.5079%" y="677" width="0.4873%" height="15" fill="rgb(210,195,18)"/><text x="99.7579%" y="687.50"></text></g><g><title>all (374,541 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(249,80,12)"/><text x="0.2500%" y="735.50"></text></g><g><title>sched-5 (4,533 samples, 1.21%)</title><rect x="98.7897%" y="709" width="1.2103%" height="15" fill="rgb(221,65,9)"/><text x="99.0397%" y="719.50"></text></g></svg></svg>