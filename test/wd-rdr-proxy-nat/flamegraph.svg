<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180"><g><title>chromium-browse (1,089 samples, 0.21%)</title><rect x="0.1785%" y="661" width="0.2088%" height="15" fill="rgb(227,0,7)"/><text x="0.4285%" y="671.50"></text></g><g><title>__mm_populate (3,136 samples, 0.60%)</title><rect x="0.5017%" y="405" width="0.6014%" height="15" fill="rgb(217,0,24)"/><text x="0.7517%" y="415.50"></text></g><g><title>populate_vma_page_range (3,136 samples, 0.60%)</title><rect x="0.5017%" y="389" width="0.6014%" height="15" fill="rgb(221,193,54)"/><text x="0.7517%" y="399.50"></text></g><g><title>__get_user_pages (3,136 samples, 0.60%)</title><rect x="0.5017%" y="373" width="0.6014%" height="15" fill="rgb(248,212,6)"/><text x="0.7517%" y="383.50"></text></g><g><title>follow_hugetlb_page (3,136 samples, 0.60%)</title><rect x="0.5017%" y="357" width="0.6014%" height="15" fill="rgb(208,68,35)"/><text x="0.7517%" y="367.50"></text></g><g><title>hugetlb_fault (3,097 samples, 0.59%)</title><rect x="0.5091%" y="341" width="0.5939%" height="15" fill="rgb(232,128,0)"/><text x="0.7591%" y="351.50"></text></g><g><title>hugetlb_no_page (3,097 samples, 0.59%)</title><rect x="0.5091%" y="325" width="0.5939%" height="15" fill="rgb(207,160,47)"/><text x="0.7591%" y="335.50"></text></g><g><title>clear_page_erms (2,960 samples, 0.57%)</title><rect x="0.5354%" y="309" width="0.5676%" height="15" fill="rgb(228,23,34)"/><text x="0.7854%" y="319.50"></text></g><g><title>__GI___mmap64 (3,138 samples, 0.60%)</title><rect x="0.5017%" y="501" width="0.6018%" height="15" fill="rgb(218,30,26)"/><text x="0.7517%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,138 samples, 0.60%)</title><rect x="0.5017%" y="485" width="0.6018%" height="15" fill="rgb(220,122,19)"/><text x="0.7517%" y="495.50"></text></g><g><title>do_syscall_64 (3,138 samples, 0.60%)</title><rect x="0.5017%" y="469" width="0.6018%" height="15" fill="rgb(250,228,42)"/><text x="0.7517%" y="479.50"></text></g><g><title>sys_mmap (3,138 samples, 0.60%)</title><rect x="0.5017%" y="453" width="0.6018%" height="15" fill="rgb(240,193,28)"/><text x="0.7517%" y="463.50"></text></g><g><title>sys_mmap_pgoff (3,138 samples, 0.60%)</title><rect x="0.5017%" y="437" width="0.6018%" height="15" fill="rgb(216,20,37)"/><text x="0.7517%" y="447.50"></text></g><g><title>vm_mmap_pgoff (3,138 samples, 0.60%)</title><rect x="0.5017%" y="421" width="0.6018%" height="15" fill="rgb(206,188,39)"/><text x="0.7517%" y="431.50"></text></g><g><title>map_all_hugepages (3,139 samples, 0.60%)</title><rect x="0.5017%" y="517" width="0.6020%" height="15" fill="rgb(217,207,13)"/><text x="0.7517%" y="527.50"></text></g><g><title>pvn_rdr_wd_nat::main (3,140 samples, 0.60%)</title><rect x="0.5017%" y="629" width="0.6022%" height="15" fill="rgb(231,73,38)"/><text x="0.7517%" y="639.50"></text></g><g><title>e2d2::scheduler::context::initialize_system (3,140 samples, 0.60%)</title><rect x="0.5017%" y="613" width="0.6022%" height="15" fill="rgb(225,20,46)"/><text x="0.7517%" y="623.50"></text></g><g><title>init_system_whitelisted (3,140 samples, 0.60%)</title><rect x="0.5017%" y="597" width="0.6022%" height="15" fill="rgb(210,31,41)"/><text x="0.7517%" y="607.50"></text></g><g><title>init_eal (3,140 samples, 0.60%)</title><rect x="0.5017%" y="581" width="0.6022%" height="15" fill="rgb(221,200,47)"/><text x="0.7517%" y="591.50"></text></g><g><title>rte_eal_init (3,140 samples, 0.60%)</title><rect x="0.5017%" y="565" width="0.6022%" height="15" fill="rgb(226,26,5)"/><text x="0.7517%" y="575.50"></text></g><g><title>rte_eal_memory_init (3,140 samples, 0.60%)</title><rect x="0.5017%" y="549" width="0.6022%" height="15" fill="rgb(249,33,26)"/><text x="0.7517%" y="559.50"></text></g><g><title>rte_eal_hugepage_init (3,140 samples, 0.60%)</title><rect x="0.5017%" y="533" width="0.6022%" height="15" fill="rgb(235,183,28)"/><text x="0.7517%" y="543.50"></text></g><g><title>[unknown] (3,252 samples, 0.62%)</title><rect x="0.4846%" y="645" width="0.6236%" height="15" fill="rgb(221,5,38)"/><text x="0.7346%" y="655.50"></text></g><g><title>_start (807 samples, 0.15%)</title><rect x="1.1117%" y="645" width="0.1548%" height="15" fill="rgb(247,18,42)"/><text x="1.3617%" y="655.50"></text></g><g><title>__libc_start_main (807 samples, 0.15%)</title><rect x="1.1117%" y="629" width="0.1548%" height="15" fill="rgb(241,131,45)"/><text x="1.3617%" y="639.50"></text></g><g><title>main (807 samples, 0.15%)</title><rect x="1.1117%" y="613" width="0.1548%" height="15" fill="rgb(249,31,29)"/><text x="1.3617%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (807 samples, 0.15%)</title><rect x="1.1117%" y="597" width="0.1548%" height="15" fill="rgb(225,111,53)"/><text x="1.3617%" y="607.50"></text></g><g><title>pvn_rdr_wd_nat::main (807 samples, 0.15%)</title><rect x="1.1117%" y="581" width="0.1548%" height="15" fill="rgb(238,160,17)"/><text x="1.3617%" y="591.50"></text></g><g><title>pvn-rdr-wd-nat (4,086 samples, 0.78%)</title><rect x="0.4836%" y="661" width="0.7836%" height="15" fill="rgb(214,148,48)"/><text x="0.7336%" y="671.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (9,856 samples, 1.89%)</title><rect x="1.3428%" y="629" width="1.8901%" height="15" fill="rgb(232,36,49)"/><text x="1.5928%" y="639.50">&lt;..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2,466 samples, 0.47%)</title><rect x="2.7599%" y="613" width="0.4729%" height="15" fill="rgb(209,103,24)"/><text x="3.0099%" y="623.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2,466 samples, 0.47%)</title><rect x="2.7599%" y="597" width="0.4729%" height="15" fill="rgb(229,88,8)"/><text x="3.0099%" y="607.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2,466 samples, 0.47%)</title><rect x="2.7599%" y="581" width="0.4729%" height="15" fill="rgb(213,181,19)"/><text x="3.0099%" y="591.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (2,466 samples, 0.47%)</title><rect x="2.7599%" y="565" width="0.4729%" height="15" fill="rgb(254,191,54)"/><text x="3.0099%" y="575.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (2,466 samples, 0.47%)</title><rect x="2.7599%" y="549" width="0.4729%" height="15" fill="rgb(241,83,37)"/><text x="3.0099%" y="559.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (2,466 samples, 0.47%)</title><rect x="2.7599%" y="533" width="0.4729%" height="15" fill="rgb(233,36,39)"/><text x="3.0099%" y="543.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (2,466 samples, 0.47%)</title><rect x="2.7599%" y="517" width="0.4729%" height="15" fill="rgb(226,3,54)"/><text x="3.0099%" y="527.50"></text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (2,466 samples, 0.47%)</title><rect x="2.7599%" y="501" width="0.4729%" height="15" fill="rgb(245,192,40)"/><text x="3.0099%" y="511.50"></text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (2,466 samples, 0.47%)</title><rect x="2.7599%" y="485" width="0.4729%" height="15" fill="rgb(238,167,29)"/><text x="3.0099%" y="495.50"></text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (2,466 samples, 0.47%)</title><rect x="2.7599%" y="469" width="0.4729%" height="15" fill="rgb(232,182,51)"/><text x="3.0099%" y="479.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (39,521 samples, 7.58%)</title><rect x="3.2328%" y="629" width="7.5789%" height="15" fill="rgb(231,60,39)"/><text x="3.4828%" y="639.50">&lt;e2d2::ope..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (13,755 samples, 2.64%)</title><rect x="10.8118%" y="629" width="2.6378%" height="15" fill="rgb(208,69,12)"/><text x="11.0618%" y="639.50">&lt;e..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (2,428 samples, 0.47%)</title><rect x="13.4495%" y="629" width="0.4656%" height="15" fill="rgb(235,93,37)"/><text x="13.6995%" y="639.50"></text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (19,975 samples, 3.83%)</title><rect x="13.9152%" y="629" width="3.8306%" height="15" fill="rgb(213,116,39)"/><text x="14.1652%" y="639.50">&lt;e2d..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (2,847 samples, 0.55%)</title><rect x="18.6743%" y="597" width="0.5460%" height="15" fill="rgb(222,207,29)"/><text x="18.9243%" y="607.50"></text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (2,442 samples, 0.47%)</title><rect x="19.2203%" y="597" width="0.4683%" height="15" fill="rgb(206,96,30)"/><text x="19.4703%" y="607.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (17,113 samples, 3.28%)</title><rect x="17.7458%" y="629" width="3.2817%" height="15" fill="rgb(218,138,4)"/><text x="17.9958%" y="639.50">&lt;e2..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (12,271 samples, 2.35%)</title><rect x="18.6743%" y="613" width="2.3532%" height="15" fill="rgb(250,191,14)"/><text x="18.9243%" y="623.50">&lt;..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (6,982 samples, 1.34%)</title><rect x="19.6886%" y="597" width="1.3389%" height="15" fill="rgb(239,60,40)"/><text x="19.9386%" y="607.50"></text></g><g><title>[pvn-rdr-wd-nat] (2,386 samples, 0.46%)</title><rect x="21.0275%" y="629" width="0.4576%" height="15" fill="rgb(206,27,48)"/><text x="21.2775%" y="639.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (2,386 samples, 0.46%)</title><rect x="21.0275%" y="613" width="0.4576%" height="15" fill="rgb(225,35,8)"/><text x="21.2775%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (2,289 samples, 0.44%)</title><rect x="21.4853%" y="629" width="0.4390%" height="15" fill="rgb(250,213,24)"/><text x="21.7353%" y="639.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (6,071 samples, 1.16%)</title><rect x="21.9250%" y="629" width="1.1642%" height="15" fill="rgb(247,123,22)"/><text x="22.1750%" y="639.50"></text></g><g><title>i40e_recv_pkts_vec (4,822 samples, 0.92%)</title><rect x="23.0892%" y="629" width="0.9247%" height="15" fill="rgb(231,138,38)"/><text x="23.3392%" y="639.50"></text></g><g><title>recv_pkts (16,430 samples, 3.15%)</title><rect x="24.0143%" y="629" width="3.1508%" height="15" fill="rgb(231,145,46)"/><text x="24.2643%" y="639.50">rec..</text></g><g><title>rte_eth_rx_burst (2,343 samples, 0.45%)</title><rect x="26.7158%" y="613" width="0.4493%" height="15" fill="rgb(251,118,11)"/><text x="26.9658%" y="623.50"></text></g><g><title>[unknown] (134,655 samples, 25.82%)</title><rect x="1.3426%" y="645" width="25.8227%" height="15" fill="rgb(217,147,25)"/><text x="1.5926%" y="655.50">[unknown]</text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::clear_packets (2,370 samples, 0.45%)</title><rect x="44.6970%" y="341" width="0.4545%" height="15" fill="rgb(247,81,37)"/><text x="44.9470%" y="351.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::consume_batch (2,370 samples, 0.45%)</title><rect x="44.6970%" y="325" width="0.4545%" height="15" fill="rgb(209,12,38)"/><text x="44.9470%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (2,370 samples, 0.45%)</title><rect x="44.6970%" y="309" width="0.4545%" height="15" fill="rgb(227,1,9)"/><text x="44.9470%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2,416 samples, 0.46%)</title><rect x="45.6242%" y="261" width="0.4633%" height="15" fill="rgb(248,47,43)"/><text x="45.8742%" y="271.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act::_{{closure}} (2,416 samples, 0.46%)</title><rect x="45.6242%" y="245" width="0.4633%" height="15" fill="rgb(221,10,30)"/><text x="45.8742%" y="255.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::deallocate_batch (2,399 samples, 0.46%)</title><rect x="46.0875%" y="245" width="0.4601%" height="15" fill="rgb(210,229,1)"/><text x="46.3375%" y="255.50"></text></g><g><title>e2d2::operators::packet_batch::PacketBatch::free_packet_batch (2,397 samples, 0.46%)</title><rect x="46.0879%" y="229" width="0.4597%" height="15" fill="rgb(222,148,37)"/><text x="46.3379%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::capacity (2,415 samples, 0.46%)</title><rect x="46.5476%" y="229" width="0.4631%" height="15" fill="rgb(234,67,33)"/><text x="46.7976%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (2,373 samples, 0.46%)</title><rect x="47.4836%" y="181" width="0.4551%" height="15" fill="rgb(247,98,35)"/><text x="47.7336%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_store (2,373 samples, 0.46%)</title><rect x="47.4836%" y="165" width="0.4551%" height="15" fill="rgb(247,138,52)"/><text x="47.7336%" y="175.50"></text></g><g><title>_recv_raw_pkts_vec (7,318 samples, 1.40%)</title><rect x="50.2499%" y="133" width="1.4034%" height="15" fill="rgb(213,79,30)"/><text x="50.4999%" y="143.50"></text></g><g><title>i40e_recv_pkts_vec (9,803 samples, 1.88%)</title><rect x="49.7737%" y="149" width="1.8799%" height="15" fill="rgb(246,177,23)"/><text x="50.0237%" y="159.50">i..</text></g><g><title>&lt;e2d2::interface::port::phy_port::PortQueue as e2d2::interface::PacketRx&gt;::recv (21,789 samples, 4.18%)</title><rect x="47.4754%" y="213" width="4.1785%" height="15" fill="rgb(230,62,27)"/><text x="47.7254%" y="223.50">&lt;e2d2..</text></g><g><title>e2d2::interface::port::phy_port::PortQueue::recv_queue (21,789 samples, 4.18%)</title><rect x="47.4754%" y="197" width="4.1785%" height="15" fill="rgb(216,154,8)"/><text x="47.7254%" y="207.50">e2d2:..</text></g><g><title>recv_pkts (19,373 samples, 3.72%)</title><rect x="47.9387%" y="181" width="3.7151%" height="15" fill="rgb(244,35,45)"/><text x="48.1887%" y="191.50">recv..</text></g><g><title>rte_eth_rx_burst (17,065 samples, 3.27%)</title><rect x="48.3813%" y="165" width="3.2725%" height="15" fill="rgb(251,115,12)"/><text x="48.6313%" y="175.50">rte..</text></g><g><title>e2d2::interface::port::&lt;impl e2d2::interface::PacketRx for e2d2::allocators::cache_aligned::CacheAligned&lt;T&gt;&gt;::recv (24,213 samples, 4.64%)</title><rect x="47.0109%" y="229" width="4.6433%" height="15" fill="rgb(240,54,50)"/><text x="47.2609%" y="239.50">e2d2:..</text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::act::Act&gt;::act (31,480 samples, 6.04%)</title><rect x="45.6242%" y="277" width="6.0369%" height="15" fill="rgb(233,84,52)"/><text x="45.8742%" y="287.50">&lt;e2d2::o..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv (29,064 samples, 5.57%)</title><rect x="46.0875%" y="261" width="5.5736%" height="15" fill="rgb(207,117,47)"/><text x="46.3375%" y="271.50">e2d2::o..</text></g><g><title>e2d2::operators::packet_batch::PacketBatch::recv_internal (26,665 samples, 5.11%)</title><rect x="46.5476%" y="245" width="5.1135%" height="15" fill="rgb(249,43,39)"/><text x="46.7976%" y="255.50">e2d2::..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (33,907 samples, 6.50%)</title><rect x="45.1601%" y="309" width="6.5023%" height="15" fill="rgb(209,38,44)"/><text x="45.4101%" y="319.50">&lt;e2d2::op..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (33,869 samples, 6.50%)</title><rect x="45.1674%" y="293" width="6.4950%" height="15" fill="rgb(236,212,23)"/><text x="45.4174%" y="303.50">&lt;e2d2::op..</text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (36,329 samples, 6.97%)</title><rect x="45.1515%" y="341" width="6.9668%" height="15" fill="rgb(242,79,21)"/><text x="45.4015%" y="351.50">&lt;e2d2::op..</text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::act::Act&gt;::act (36,325 samples, 6.97%)</title><rect x="45.1523%" y="325" width="6.9660%" height="15" fill="rgb(211,96,35)"/><text x="45.4023%" y="335.50">&lt;e2d2::op..</text></g><g><title>e2d2::operators::iterator::PayloadEnumerator&lt;T,M&gt;::next (2,377 samples, 0.46%)</title><rect x="51.6624%" y="309" width="0.4558%" height="15" fill="rgb(253,215,40)"/><text x="51.9124%" y="319.50"></text></g><g><title>&lt;e2d2::operators::parsed_batch::ParsedBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (2,377 samples, 0.46%)</title><rect x="51.6624%" y="293" width="0.4558%" height="15" fill="rgb(211,81,21)"/><text x="51.9124%" y="303.50"></text></g><g><title>&lt;e2d2::operators::transform_batch::TransformBatch&lt;T,V&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (2,377 samples, 0.46%)</title><rect x="51.6624%" y="277" width="0.4558%" height="15" fill="rgb(208,190,38)"/><text x="51.9124%" y="287.50"></text></g><g><title>&lt;e2d2::operators::receive_batch::ReceiveBatch&lt;T&gt; as e2d2::operators::iterator::BatchIterator&gt;::next_payload (2,377 samples, 0.46%)</title><rect x="51.6624%" y="261" width="0.4558%" height="15" fill="rgb(235,213,38)"/><text x="51.9124%" y="271.50"></text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::iterator::BatchIterator&gt;::next_payload (2,377 samples, 0.46%)</title><rect x="51.6624%" y="245" width="0.4558%" height="15" fill="rgb(237,122,38)"/><text x="51.9124%" y="255.50"></text></g><g><title>&lt;e2d2::operators::group_by::GroupByProducer&lt;T,V&gt; as e2d2::scheduler::Executable&gt;::execute (38,744 samples, 7.43%)</title><rect x="44.6968%" y="357" width="7.4299%" height="15" fill="rgb(244,218,35)"/><text x="44.9468%" y="367.50">&lt;e2d2::ope..</text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (9,926 samples, 1.90%)</title><rect x="62.0721%" y="293" width="1.9035%" height="15" fill="rgb(240,68,47)"/><text x="62.3221%" y="303.50">&lt;..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::act (59,431 samples, 11.40%)</title><rect x="52.5856%" y="309" width="11.3970%" height="15" fill="rgb(210,16,53)"/><text x="52.8356%" y="319.50">&lt;e2d2::operators:..</text></g><g><title>&lt;e2d2::operators::restore_header::RestoreHeader&lt;T,M,V&gt; as e2d2::operators::act::Act&gt;::act (11,274 samples, 2.16%)</title><rect x="63.9829%" y="309" width="2.1620%" height="15" fill="rgb(235,124,12)"/><text x="64.2329%" y="319.50">&lt;..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::act (73,096 samples, 14.02%)</title><rect x="52.1275%" y="325" width="14.0176%" height="15" fill="rgb(224,169,11)"/><text x="52.3775%" y="335.50">&lt;e2d2::operators::com..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (2,357 samples, 0.45%)</title><rect x="68.5577%" y="293" width="0.4520%" height="15" fill="rgb(250,166,2)"/><text x="68.8077%" y="303.50"></text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::done (12,489 samples, 2.40%)</title><rect x="66.6158%" y="309" width="2.3950%" height="15" fill="rgb(242,216,29)"/><text x="66.8658%" y="319.50">&lt;e..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::done (14,945 samples, 2.87%)</title><rect x="66.1451%" y="325" width="2.8660%" height="15" fill="rgb(230,116,27)"/><text x="66.3951%" y="335.50">&lt;e..</text></g><g><title>&lt;e2d2::operators::composition_batch::CompositionBatch as e2d2::operators::act::Act&gt;::get_packet_batch (28,621 samples, 5.49%)</title><rect x="69.0110%" y="325" width="5.4886%" height="15" fill="rgb(228,99,48)"/><text x="69.2610%" y="335.50">&lt;e2d2::..</text></g><g><title>&lt;e2d2::operators::reset_parse::ResetParsingBatch&lt;V&gt; as e2d2::operators::act::Act&gt;::get_packet_batch (28,266 samples, 5.42%)</title><rect x="69.0791%" y="309" width="5.4205%" height="15" fill="rgb(253,11,6)"/><text x="69.3291%" y="319.50">&lt;e2d2::..</text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::operators::act::Act&gt;::act (119,070 samples, 22.83%)</title><rect x="52.1275%" y="341" width="22.8340%" height="15" fill="rgb(247,143,39)"/><text x="52.3775%" y="351.50">&lt;e2d2::operators::send_batch::SendBa..</text></g><g><title>&lt;e2d2::operators::packet_batch::PacketBatch as e2d2::operators::act::Act&gt;::send_q (2,408 samples, 0.46%)</title><rect x="74.4997%" y="325" width="0.4618%" height="15" fill="rgb(236,97,10)"/><text x="74.7497%" y="335.50"></text></g><g><title>&lt;e2d2::operators::send_batch::SendBatch&lt;Port,V&gt; as e2d2::scheduler::Executable&gt;::execute (119,077 samples, 22.84%)</title><rect x="52.1267%" y="357" width="22.8353%" height="15" fill="rgb(233,208,19)"/><text x="52.3767%" y="367.50">&lt;e2d2::operators::send_batch::SendBa..</text></g><g><title>__GI___pthread_mutex_lock (62,501 samples, 11.99%)</title><rect x="74.9620%" y="357" width="11.9858%" height="15" fill="rgb(216,164,2)"/><text x="75.2120%" y="367.50">__GI___pthread_mut..</text></g><g><title>__pthread_mutex_unlock_usercnt (63,912 samples, 12.26%)</title><rect x="87.2295%" y="341" width="12.2564%" height="15" fill="rgb(220,129,5)"/><text x="87.4795%" y="351.50">__pthread_mutex_un..</text></g><g><title>__GI___pthread_mutex_unlock (65,382 samples, 12.54%)</title><rect x="86.9478%" y="357" width="12.5383%" height="15" fill="rgb(242,17,10)"/><text x="87.1978%" y="367.50">__GI___pthread_mute..</text></g><g><title>e2d2::scheduler::context::NetBricksContext::add_pipeline_to_run::_{{closure}} (1,051 samples, 0.20%)</title><rect x="99.4924%" y="357" width="0.2015%" height="15" fill="rgb(242,107,0)"/><text x="99.7424%" y="367.50"></text></g><g><title>pvn_rdr_wd_nat::main::_{{closure}} (1,051 samples, 0.20%)</title><rect x="99.4924%" y="341" width="0.2015%" height="15" fill="rgb(251,28,31)"/><text x="99.7424%" y="351.50"></text></g><g><title>pvn_rdr_wd_nat::rdr_proxy_test (1,051 samples, 0.20%)</title><rect x="99.4924%" y="325" width="0.2015%" height="15" fill="rgb(233,223,10)"/><text x="99.7424%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,051 samples, 0.20%)</title><rect x="99.4924%" y="309" width="0.2015%" height="15" fill="rgb(215,21,27)"/><text x="99.7424%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,051 samples, 0.20%)</title><rect x="99.4924%" y="293" width="0.2015%" height="15" fill="rgb(232,23,21)"/><text x="99.7424%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1,051 samples, 0.20%)</title><rect x="99.4924%" y="277" width="0.2015%" height="15" fill="rgb(244,5,23)"/><text x="99.7424%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,051 samples, 0.20%)</title><rect x="99.4924%" y="261" width="0.2015%" height="15" fill="rgb(226,81,46)"/><text x="99.7424%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,051 samples, 0.20%)</title><rect x="99.4924%" y="245" width="0.2015%" height="15" fill="rgb(247,70,30)"/><text x="99.7424%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,051 samples, 0.20%)</title><rect x="99.4924%" y="229" width="0.2015%" height="15" fill="rgb(212,68,19)"/><text x="99.7424%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,051 samples, 0.20%)</title><rect x="99.4924%" y="213" width="0.2015%" height="15" fill="rgb(240,187,13)"/><text x="99.7424%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,051 samples, 0.20%)</title><rect x="99.4924%" y="197" width="0.2015%" height="15" fill="rgb(223,113,26)"/><text x="99.7424%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (1,051 samples, 0.20%)</title><rect x="99.4924%" y="181" width="0.2015%" height="15" fill="rgb(206,192,2)"/><text x="99.7424%" y="191.50"></text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (1,051 samples, 0.20%)</title><rect x="99.4924%" y="165" width="0.2015%" height="15" fill="rgb(241,108,4)"/><text x="99.7424%" y="175.50"></text></g><g><title>pvn_rdr_wd_nat::rdr_proxy_test::_{{closure}} (1,051 samples, 0.20%)</title><rect x="99.4924%" y="149" width="0.2015%" height="15" fill="rgb(247,173,49)"/><text x="99.7424%" y="159.50"></text></g><g><title>pvn_rdr_wd_nat::nf::rdr_proxy (1,051 samples, 0.20%)</title><rect x="99.4924%" y="133" width="0.2015%" height="15" fill="rgb(224,114,35)"/><text x="99.7424%" y="143.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (867 samples, 0.17%)</title><rect x="99.5277%" y="117" width="0.1663%" height="15" fill="rgb(245,159,27)"/><text x="99.7777%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (867 samples, 0.17%)</title><rect x="99.5277%" y="101" width="0.1663%" height="15" fill="rgb(245,172,44)"/><text x="99.7777%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (867 samples, 0.17%)</title><rect x="99.5277%" y="85" width="0.1663%" height="15" fill="rgb(236,23,11)"/><text x="99.7777%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (867 samples, 0.17%)</title><rect x="99.5277%" y="69" width="0.1663%" height="15" fill="rgb(205,117,38)"/><text x="99.7777%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (867 samples, 0.17%)</title><rect x="99.5277%" y="53" width="0.1663%" height="15" fill="rgb(237,72,25)"/><text x="99.7777%" y="63.50"></text></g><g><title>__memset_avx2_erms (867 samples, 0.17%)</title><rect x="99.5277%" y="37" width="0.1663%" height="15" fill="rgb(244,70,9)"/><text x="99.7777%" y="47.50"></text></g><g><title>std::panic::catch_unwind (378,144 samples, 72.52%)</title><rect x="27.1798%" y="517" width="72.5164%" height="15" fill="rgb(217,125,39)"/><text x="27.4298%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (378,144 samples, 72.52%)</title><rect x="27.1798%" y="501" width="72.5164%" height="15" fill="rgb(235,36,10)"/><text x="27.4298%" y="511.50">std::panicking::try</text></g><g><title>__rust_maybe_catch_panic (378,144 samples, 72.52%)</title><rect x="27.1798%" y="485" width="72.5164%" height="15" fill="rgb(251,123,47)"/><text x="27.4298%" y="495.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call (378,144 samples, 72.52%)</title><rect x="27.1798%" y="469" width="72.5164%" height="15" fill="rgb(221,13,13)"/><text x="27.4298%" y="479.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (378,144 samples, 72.52%)</title><rect x="27.1798%" y="453" width="72.5164%" height="15" fill="rgb(238,131,9)"/><text x="27.4298%" y="463.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (378,144 samples, 72.52%)</title><rect x="27.1798%" y="437" width="72.5164%" height="15" fill="rgb(211,50,8)"/><text x="27.4298%" y="447.50">std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (378,144 samples, 72.52%)</title><rect x="27.1798%" y="421" width="72.5164%" height="15" fill="rgb(245,182,24)"/><text x="27.4298%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_{{closure}} (378,144 samples, 72.52%)</title><rect x="27.1798%" y="405" width="72.5164%" height="15" fill="rgb(242,14,37)"/><text x="27.4298%" y="415.50">e2d2::scheduler::context::NetBricksContext::start_scheduler::_{{closure}}</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (378,136 samples, 72.51%)</title><rect x="27.1814%" y="389" width="72.5149%" height="15" fill="rgb(246,228,12)"/><text x="27.4314%" y="399.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (378,136 samples, 72.51%)</title><rect x="27.1814%" y="373" width="72.5149%" height="15" fill="rgb(213,55,15)"/><text x="27.4314%" y="383.50">e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (378,201 samples, 72.53%)</title><rect x="27.1691%" y="581" width="72.5273%" height="15" fill="rgb(209,9,3)"/><text x="27.4191%" y="591.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (378,201 samples, 72.53%)</title><rect x="27.1691%" y="565" width="72.5273%" height="15" fill="rgb(230,59,30)"/><text x="27.4191%" y="575.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (378,201 samples, 72.53%)</title><rect x="27.1691%" y="549" width="72.5273%" height="15" fill="rgb(209,121,21)"/><text x="27.4191%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (378,145 samples, 72.52%)</title><rect x="27.1798%" y="533" width="72.5166%" height="15" fill="rgb(220,109,13)"/><text x="27.4298%" y="543.50">std::thread::Builder::spawn_unchecked::_{{closure}}</text></g><g><title>__GI___clone (378,222 samples, 72.53%)</title><rect x="27.1653%" y="645" width="72.5314%" height="15" fill="rgb(232,18,1)"/><text x="27.4153%" y="655.50">__GI___clone</text></g><g><title>start_thread (378,202 samples, 72.53%)</title><rect x="27.1691%" y="629" width="72.5275%" height="15" fill="rgb(215,41,42)"/><text x="27.4191%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (378,202 samples, 72.53%)</title><rect x="27.1691%" y="613" width="72.5275%" height="15" fill="rgb(224,123,36)"/><text x="27.4191%" y="623.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys_common::thread::start_thread (378,202 samples, 72.53%)</title><rect x="27.1691%" y="597" width="72.5275%" height="15" fill="rgb(240,125,3)"/><text x="27.4191%" y="607.50">std::sys_common::thread::start_thread</text></g><g><title>sched-4 (513,280 samples, 98.43%)</title><rect x="1.2680%" y="661" width="98.4313%" height="15" fill="rgb(205,98,50)"/><text x="1.5180%" y="671.50">sched-4</text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_request (1,102 samples, 0.21%)</title><rect x="99.7843%" y="373" width="0.2113%" height="15" fill="rgb(205,185,37)"/><text x="100.0343%" y="383.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::add_pipeline_to_run::_{{closure}} (1,063 samples, 0.20%)</title><rect x="99.7917%" y="357" width="0.2039%" height="15" fill="rgb(238,207,15)"/><text x="100.0417%" y="367.50"></text></g><g><title>pvn_rdr_wd_nat::main::_{{closure}} (1,063 samples, 0.20%)</title><rect x="99.7917%" y="341" width="0.2039%" height="15" fill="rgb(213,199,42)"/><text x="100.0417%" y="351.50"></text></g><g><title>pvn_rdr_wd_nat::rdr_proxy_test (1,063 samples, 0.20%)</title><rect x="99.7917%" y="325" width="0.2039%" height="15" fill="rgb(235,201,11)"/><text x="100.0417%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,063 samples, 0.20%)</title><rect x="99.7917%" y="309" width="0.2039%" height="15" fill="rgb(207,46,11)"/><text x="100.0417%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,063 samples, 0.20%)</title><rect x="99.7917%" y="293" width="0.2039%" height="15" fill="rgb(241,35,35)"/><text x="100.0417%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1,063 samples, 0.20%)</title><rect x="99.7917%" y="277" width="0.2039%" height="15" fill="rgb(243,32,47)"/><text x="100.0417%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,063 samples, 0.20%)</title><rect x="99.7917%" y="261" width="0.2039%" height="15" fill="rgb(247,202,23)"/><text x="100.0417%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,063 samples, 0.20%)</title><rect x="99.7917%" y="245" width="0.2039%" height="15" fill="rgb(219,102,11)"/><text x="100.0417%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,063 samples, 0.20%)</title><rect x="99.7917%" y="229" width="0.2039%" height="15" fill="rgb(243,110,44)"/><text x="100.0417%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,063 samples, 0.20%)</title><rect x="99.7917%" y="213" width="0.2039%" height="15" fill="rgb(222,74,54)"/><text x="100.0417%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,063 samples, 0.20%)</title><rect x="99.7917%" y="197" width="0.2039%" height="15" fill="rgb(216,99,12)"/><text x="100.0417%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (1,063 samples, 0.20%)</title><rect x="99.7917%" y="181" width="0.2039%" height="15" fill="rgb(226,22,26)"/><text x="100.0417%" y="191.50"></text></g><g><title>core::iter::adapters::map_fold::_{{closure}} (1,063 samples, 0.20%)</title><rect x="99.7917%" y="165" width="0.2039%" height="15" fill="rgb(217,163,10)"/><text x="100.0417%" y="175.50"></text></g><g><title>pvn_rdr_wd_nat::rdr_proxy_test::_{{closure}} (1,063 samples, 0.20%)</title><rect x="99.7917%" y="149" width="0.2039%" height="15" fill="rgb(213,25,53)"/><text x="100.0417%" y="159.50"></text></g><g><title>pvn_rdr_wd_nat::nf::rdr_proxy (1,063 samples, 0.20%)</title><rect x="99.7917%" y="133" width="0.2039%" height="15" fill="rgb(252,105,26)"/><text x="100.0417%" y="143.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (875 samples, 0.17%)</title><rect x="99.8278%" y="117" width="0.1678%" height="15" fill="rgb(220,39,43)"/><text x="100.0778%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (875 samples, 0.17%)</title><rect x="99.8278%" y="101" width="0.1678%" height="15" fill="rgb(229,68,48)"/><text x="100.0778%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (875 samples, 0.17%)</title><rect x="99.8278%" y="85" width="0.1678%" height="15" fill="rgb(252,8,32)"/><text x="100.0778%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (875 samples, 0.17%)</title><rect x="99.8278%" y="69" width="0.1678%" height="15" fill="rgb(223,20,43)"/><text x="100.0778%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (875 samples, 0.17%)</title><rect x="99.8278%" y="53" width="0.1678%" height="15" fill="rgb(229,81,49)"/><text x="100.0778%" y="63.50"></text></g><g><title>__memset_avx2_erms (875 samples, 0.17%)</title><rect x="99.8278%" y="37" width="0.1678%" height="15" fill="rgb(236,28,36)"/><text x="100.0778%" y="47.50"></text></g><g><title>std::panic::catch_unwind (1,120 samples, 0.21%)</title><rect x="99.7827%" y="517" width="0.2148%" height="15" fill="rgb(249,185,26)"/><text x="100.0327%" y="527.50"></text></g><g><title>std::panicking::try (1,120 samples, 0.21%)</title><rect x="99.7827%" y="501" width="0.2148%" height="15" fill="rgb(249,174,33)"/><text x="100.0327%" y="511.50"></text></g><g><title>__rust_maybe_catch_panic (1,120 samples, 0.21%)</title><rect x="99.7827%" y="485" width="0.2148%" height="15" fill="rgb(233,201,37)"/><text x="100.0327%" y="495.50"></text></g><g><title>std::panicking::try::do_call (1,120 samples, 0.21%)</title><rect x="99.7827%" y="469" width="0.2148%" height="15" fill="rgb(221,78,26)"/><text x="100.0327%" y="479.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (1,120 samples, 0.21%)</title><rect x="99.7827%" y="453" width="0.2148%" height="15" fill="rgb(250,127,30)"/><text x="100.0327%" y="463.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (1,120 samples, 0.21%)</title><rect x="99.7827%" y="437" width="0.2148%" height="15" fill="rgb(230,49,44)"/><text x="100.0327%" y="447.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,120 samples, 0.21%)</title><rect x="99.7827%" y="421" width="0.2148%" height="15" fill="rgb(229,67,23)"/><text x="100.0327%" y="431.50"></text></g><g><title>e2d2::scheduler::context::NetBricksContext::start_scheduler::_{{closure}} (1,120 samples, 0.21%)</title><rect x="99.7827%" y="405" width="0.2148%" height="15" fill="rgb(249,83,47)"/><text x="100.0327%" y="415.50"></text></g><g><title>e2d2::scheduler::standalone_scheduler::StandaloneScheduler::handle_requests (1,112 samples, 0.21%)</title><rect x="99.7843%" y="389" width="0.2132%" height="15" fill="rgb(215,43,3)"/><text x="100.0343%" y="399.50"></text></g><g><title>__GI___clone (1,182 samples, 0.23%)</title><rect x="99.7710%" y="645" width="0.2267%" height="15" fill="rgb(238,154,13)"/><text x="100.0210%" y="655.50"></text></g><g><title>start_thread (1,168 samples, 0.22%)</title><rect x="99.7737%" y="629" width="0.2240%" height="15" fill="rgb(219,56,2)"/><text x="100.0237%" y="639.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,168 samples, 0.22%)</title><rect x="99.7737%" y="613" width="0.2240%" height="15" fill="rgb(233,0,4)"/><text x="100.0237%" y="623.50"></text></g><g><title>std::sys_common::thread::start_thread (1,168 samples, 0.22%)</title><rect x="99.7737%" y="597" width="0.2240%" height="15" fill="rgb(235,30,7)"/><text x="100.0237%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,168 samples, 0.22%)</title><rect x="99.7737%" y="581" width="0.2240%" height="15" fill="rgb(250,79,13)"/><text x="100.0237%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,168 samples, 0.22%)</title><rect x="99.7737%" y="565" width="0.2240%" height="15" fill="rgb(211,146,34)"/><text x="100.0237%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,168 samples, 0.22%)</title><rect x="99.7737%" y="549" width="0.2240%" height="15" fill="rgb(228,22,38)"/><text x="100.0237%" y="559.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (1,121 samples, 0.21%)</title><rect x="99.7827%" y="533" width="0.2150%" height="15" fill="rgb(235,168,5)"/><text x="100.0327%" y="543.50"></text></g><g><title>all (521,460 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="687.50"></text></g><g><title>sched-5 (1,568 samples, 0.30%)</title><rect x="99.6993%" y="661" width="0.3007%" height="15" fill="rgb(215,215,53)"/><text x="99.9493%" y="671.50"></text></g></svg></svg>